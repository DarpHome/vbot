{"module_name":"v.parser","description":"","contents":[{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 compile_file compiles the content of a file by the given path as a template","is_multi":false,"pos":{"len":77,"line_nr":93,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\tmpl.v","content":"fn (mut p Parser) compile_template_file(template_file string, fn_name string) string","name":"compile_template_file","parent_name":"Parser","return_type":"string","pos":{"len":88,"line_nr":94,"pos":2489,"col":0,"last_line":329},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn (mut p Parser) free()","name":"free","parent_name":"Parser","return_type":"void","pos":{"len":28,"line_nr":178,"pos":7368,"col":0,"last_line":180},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn (mut p Parser) parse() &ast.File","name":"parse","parent_name":"Parser","return_type":"v.ast.File","pos":{"len":39,"line_nr":307,"pos":11221,"col":0,"last_line":393},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn (mut p Parser) set_path(path string)","name":"set_path","parent_name":"Parser","return_type":"void","pos":{"len":43,"line_nr":195,"pos":7677,"col":0,"last_line":231},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 codegen allows you to generate V code, so that it can be parsed,","is_multi":false,"pos":{"len":66,"line_nr":471,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 checked, markused, cgen-ed etc further, just like user's V code.","is_multi":false,"pos":{"len":66,"line_nr":472,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn (mut p Parser) codegen(code string)","name":"codegen","parent_name":"Parser","return_type":"void","pos":{"len":42,"line_nr":473,"pos":15033,"col":0,"last_line":478},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"struct Parser {\n\tpref &pref.Preferences = unsafe { nil }\nmut:\n\tfile_base         string       // \"hello.v\"\n\tfile_name         string       // \"/home/user/hello.v\"\n\tfile_name_dir     string       // \"/home/user\"\n\tfile_display_path string       // just \"hello.v\", when your current folder for the compilation is \"/home/user/\", otherwise the full path \"/home/user/hello.v\"\n\tunique_prefix     string       // a hash of p.file_name, used for making anon fn generation unique\n\tfile_backend_mode ast.Language // .c for .c.v|.c.vv|.c.vsh files; .js for .js.v files, .amd64/.rv32/other arches for .amd64.v/.rv32.v/etc. files, .v otherwise.\n\tcomments_mode     scanner.CommentsMode = .skip_comments\n\t// see comment in parse_file\n\ttok                       token.Token\n\tprev_tok                  token.Token\n\tpeek_tok                  token.Token\n\ttable                     &ast.Table = unsafe { nil }\n\tlanguage                  ast.Language\n\tfn_language               ast.Language // .c for `fn C.abcd()` declarations\n\texpr_level                int  // prevent too deep recursions for pathological programs\n\tinside_vlib_file          bool // true for all vlib/ files\n\tinside_test_file          bool // when inside _test.v or _test.vv file\n\tinside_if                 bool\n\tinside_comptime_if        bool\n\tinside_if_expr            bool\n\tinside_if_cond            bool\n\tinside_ct_if_expr         bool\n\tinside_or_expr            bool\n\tinside_for                bool\n\tinside_fn                 bool // true even with implicit main\n\tinside_fn_return          bool\n\tinside_call_args          bool // true inside f(  ....  )\n\tinside_unsafe_fn          bool\n\tinside_str_interp         bool\n\tinside_array_lit          bool\n\tinside_in_array           bool\n\tinside_infix              bool\n\tinside_match              bool // to separate `match A { }` from `Struct{}`\n\tinside_select             bool // to allow `ch <- Struct{} {` inside `select`\n\tinside_match_case         bool // to separate `match_expr { }` from `Struct{}`\n\tinside_match_body         bool // to fix eval not used TODO\n\tinside_unsafe             bool\n\tinside_sum_type           bool // to prevent parsing inline sum type again\n\tinside_asm_template       bool\n\tinside_asm                bool\n\tinside_defer              bool\n\tinside_generic_params     bool // indicates if parsing between `<` and `>` of a method/function\n\tinside_receiver_param     bool // indicates if parsing the receiver parameter inside the first `(` and `)` of a method\n\tinside_struct_field_decl  bool\n\tinside_struct_attr_decl   bool\n\tinside_map_init           bool\n\tinside_orm                bool\n\tinside_chan_decl          bool\n\tinside_attr_decl          bool\n\tfixed_array_dim           int        // fixed array dim parsing level\n\tor_is_handled             bool       // ignore `or` in this expression\n\tbuiltin_mod               bool       // are we in the `builtin` module?\n\tmod                       string     // current module name\n\tis_manualfree             bool       // true when `[manualfree] module abc`, makes *all* fns in the current .v file, opt out of autofree\n\thas_globals               bool       // `[has_globals] module abc` - allow globals declarations, even without -enable-globals, in that single .v file __only__\n\tis_generated              bool       // `[generated] module abc` - turn off compiler notices for that single .v file __only__.\n\tis_translated             bool       // `[translated] module abc` - mark a file as translated, to relax some compiler checks for translated code.\n\tattrs                     []ast.Attr // attributes before next decl stmt\n\texpr_mod                  string     // for constructing full type names in parse_type()\n\tscope                     &ast.Scope = unsafe { nil }\n\timports                   map[string]string // alias => mod_name\n\tast_imports               []ast.Import      // mod_names\n\tused_imports              []string // alias\n\tauto_imports              []string // imports, the user does not need to specify\n\timported_symbols          map[string]string\n\tis_amp                    bool // for generating the right code for `&Foo{}`\n\treturns                   bool\n\tis_stmt_ident             bool // true while the beginning of a statement is an ident/selector\n\texpecting_type            bool // `is Type`, expecting type\n\tcur_fn_name               string\n\tlabel_names               []string\n\tname_error                bool // indicates if the token is not a name or the name is on another line\n\tn_asm                     int  // controls assembly labels\n\tglobal_labels             []string\n\tcomptime_if_cond          bool\n\tdefer_vars                []ast.Ident\n\tshould_abort              bool // when too many errors/warnings/notices are accumulated, should_abort becomes true, and the parser should stop\n\tcodegen_text              string\n\tanon_struct_decl          ast.StructDecl\n\tstruct_init_generic_types []ast.Type\n\tif_cond_comments          []ast.Comment\n\tleft_comments             []ast.Comment\n\tscript_mode               bool\n\tscript_mode_start_token   token.Token\npub mut:\n\tscanner        &scanner.Scanner = unsafe { nil }\n\terrors         []errors.Error\n\twarnings       []errors.Warning\n\tnotices        []errors.Notice\n\tvet_errors     []vet.Error\n\tvet_notices    []vet.Error\n\ttemplate_paths []string // record all compiled $tmpl files; needed for `v watch run webserver.v`\n}","name":"Parser","parent_name":"","return_type":"","pos":{"len":17,"line_nr":17,"pos":341,"col":0,"last_line":112},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 for tests","is_multi":false,"pos":{"len":11,"line_nr":116,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn parse_stmt(text string, table &ast.Table, scope &ast.Scope) ast.Stmt","name":"parse_stmt","parent_name":"","return_type":"v.ast.Stmt","pos":{"len":75,"line_nr":117,"pos":5781,"col":0,"last_line":135},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn parse_comptime(tmpl_path string, text string, table &ast.Table, pref_ &pref.Preferences, scope &ast.Scope) &ast.File","name":"parse_comptime","parent_name":"","return_type":"v.ast.File","pos":{"len":123,"line_nr":137,"pos":6270,"col":0,"last_line":153},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn parse_text(text string, path string, table &ast.Table, comments_mode scanner.CommentsMode, pref_ &pref.Preferences) &ast.File","name":"parse_text","parent_name":"","return_type":"v.ast.File","pos":{"len":132,"line_nr":155,"pos":6742,"col":0,"last_line":175},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn parse_file(path string, table &ast.Table, comments_mode scanner.CommentsMode, pref_ &pref.Preferences) &ast.File","name":"parse_file","parent_name":"","return_type":"v.ast.File","pos":{"len":119,"line_nr":233,"pos":8932,"col":0,"last_line":257},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn parse_vet_file(path string, table_ &ast.Table, pref_ &pref.Preferences) (&ast.File, []vet.Error, []vet.Error)","name":"parse_vet_file","parent_name":"","return_type":"v.ast.File, []v.vet.Error, []v.vet.Error)","pos":{"len":116,"line_nr":259,"pos":9891,"col":0,"last_line":305},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\nstruct Queue {\nmut:\n\tidx              int\n\tmu               &sync.Mutex = sync.new_mutex()\n\tmu2              &sync.Mutex = sync.new_mutex()\n\tpaths            []string\n\ttable            &ast.Table = unsafe { nil }\n\tparsed_ast_files []&ast.File\n\tpref             &pref.Preferences = unsafe { nil }\n\tglobal_scope     &ast.Scope = unsafe { nil }\n}\n\nfn (mut q Queue) run() {\n\tfor {\n\t\tq.mu.lock()\n\t\tidx := q.idx\n\t\tif idx >= q.paths.len {\n\t\t\tq.mu.unlock()\n\t\t\treturn\n\t\t}\n\t\tq.idx++\n\t\tq.mu.unlock()\n\t\tprintln('run(idx=$idx)')\n\t\tpath := q.paths[idx]\n\t\tfile := parse_file(path, q.table, .skip_comments, q.pref, q.global_scope)\n\t\tq.mu2.lock()\n\t\tq.parsed_ast_files << file\n\t\tq.mu2.unlock()\n\t\tprintln('run done(idx=$idx)')\n\t}\n}\n","is_multi":true,"pos":{"len":714,"line_nr":395,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\parser\\parser.v","content":"fn parse_files(paths []string, table &ast.Table, pref_ &pref.Preferences) []&ast.File","name":"parse_files","parent_name":"","return_type":"v.ast.File","pos":{"len":89,"line_nr":428,"pos":13871,"col":0,"last_line":469},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:43"}