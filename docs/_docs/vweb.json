{"module_name":"vweb","description":"# vweb - the V Web Server\n\nA simple yet powerful web server with built-in routing, parameter handling, templating, and other features. The [gitly](https://gitly.org/) site is based on vweb.\n\n**_Some features may not be complete, and have some bugs._**\n\n## Quick Start\nJust run **`v new <name> web`** in your terminal.\n\nRun your vweb app with a live reload via `v -d vweb_livereload watch run .`\n\nNow modifying any file in your web app (whether it's a .v file with the backend logic or a compiled .html template file) will result in an instant refresh of your app in the browser. No need to quit the app, rebuild it, and refresh the page in the browser!\n\n\n## Features\n\n- **Very fast** performance of C on the web.\n- **Small binary** hello world website is <100 KB.\n- **Easy to deploy** just one binary file that also includes all templates. No need to install any\ndependencies.- **Templates are precompiled** all errors are visible at compilation time, not at runtime.\n- **Multithreaded** by default\n\n### Examples\n\nThere are some examples that can be explored [here](https://github.com/vlang/v/tree/master/examples/vweb).\n\nAnd others like:\n\n- [vweb_orm_jwt](https://github.com/vlang/v/tree/master/examples/vweb_orm_jwt) (back-end)\n- [vorum](https://github.com/vlang/vorum) (front-end)\n- [gitly](https://github.com/vlang/gitly) (full-stack)\n\n**Front-end getting start example** `src/main.v`\n\n\n```v ignore\nmodule main\n\nimport vweb\nimport os\n\nstruct App {\nvweb.Context\n}\n\nstruct Object {\ntitle       string\ndescription string\n}\n\nfn main() {\nvweb.run_at(new_app(), vweb.RunParams{\nport: 8081\n}) or { panic(err) }\n}\n\nfn new_app() &App {\nmut app := &App{}\n// makes all static files available.\napp.mount_static_folder_at(os.resource_abs_path('.'), '/')\nreturn app\n}\n\n@['/']\npub fn (mut app App) page_home() vweb.Result {\n// all this constants can be accessed by src/templates/page/home.html file.\npage_title := 'V is the new V'\nv_url := 'https://github.com/vlang/v'\n\nlist_of_object := [\nObject{\ntitle: 'One good title'\ndescription: 'this is the first'\n},\nObject{\ntitle: 'Other good title'\ndescription: 'more one'\n},\n]\n// $vweb.html() in `<folder>_<name> vweb.Result ()` like this\n// render the `<name>.html` in folder `./templates/<folder>`\nreturn $vweb.html()\n}\n\n```\n\n`$vweb.html()` compiles an HTML template into V during compilation, and embeds the resulting code\ninto the current action.\n\nThat means that the template automatically has access to that action's entire environment.\n\n`src/templates/page/home.html`\n\n```html\n<html>\n<head>\n<title>${page_title}</title>\n@css 'src/templates/page/home.css'\n</head>\n<body>\n<h1 class=\"title\">Hello, Vs.</h1>\n@for var in list_of_object\n<div>\n<a href=\"${v_url}\">${var.title}</a>\n<span>${var.description}</span>\n</div>\n@end\n<div>@include 'component.html'</div>\n</body>\n</html>\n```\n\n`src/templates/page/component.html`\n\n```html\n<div>This is a component</div>\n```\n\n`src/templates/page/home.css`\n\n```css\nh1.title {\nfont-family: Arial, Helvetica, sans-serif;\ncolor: #3b7bbf;\n}\n```\n\nV supports [Template directives](/vlib/v/TEMPLATES.md) like\n`@css`, `@js` for static files in \<path\>\n`@if`, `@for` for conditional and loop\nand\n`@include` to include html components.\n\n## Deploying vweb apps\n\nEverything, including HTML templates, is in one binary file. That's all you need to deploy.\n\n## Getting Started\n\nTo start with vweb, you have to import the module `vweb` and define a struct to hold vweb.Context\n(and any other variables your program will need).\nThe web server can be started by calling `vweb.run(&App{}, port)` or `vweb.run(&App{}, RunParams)`\n\n**Example:**\n\n```v ignore\nimport vweb\n\nstruct App {\nvweb.Context\n}\n\nfn main() {\nvweb.run(&App{}, 8080)\n// // or\n// vweb.run_at(new_app(), vweb.RunParams{\n// \thost: 'localhost'\n// \tport: 8099\n// \tfamily: .ip\n// }) or { panic(err) }\n}\n```\n\n### Defining endpoints\n\nTo add endpoints to your web server, you have to extend the `App` struct.\nFor routing you can either use auto-mapping of function names or specify the path as an attribute.\nThe function expects a response of the type `vweb.Result`.\n\n**Example:**\n\n```v ignore\n// This endpoint can be accessed via http://localhost:port/hello\nfn (mut app App) hello() vweb.Result {\nreturn app.text('Hello')\n}\n\n// This endpoint can be accessed via http://localhost:port/foo\n@[\"/foo\"]\nfn (mut app App) world() vweb.Result {\nreturn app.text('World')\n}\n```\n\n#### - HTTP verbs\n\nTo use any HTTP verbs (or methods, as they are properly called),\nsuch as `[post]`, `[get]`, `[put]`, `[patch]` or `[delete]`\nyou can simply add the attribute before the function definition.\n\n**Example:**\n\n```v ignore\n@[post]\nfn (mut app App) world() vweb.Result {\nreturn app.text('World')\n}\n\n@['/product/create'; post]\nfn (mut app App) create_product() vweb.Result {\nreturn app.text('product')\n}\n```\n\n#### - Parameters\n\nParameters are passed directly in endpoint route using colon sign `:` and received using the same\nname at function\nTo pass a parameter to an endpoint, you simply define it inside an attribute, e. g.\n`['/hello/:user]`.\nAfter it is defined in the attribute, you have to add it as a function parameter.\n\n**Example:**\n\n```v ignore\nvvvv\n@['/hello/:user']            vvvv\nfn (mut app App) hello_user(user string) vweb.Result {\nreturn app.text('Hello $user')\n}\n```\n\nYou have access to the raw request data such as headers\nor the request body by accessing `app` (which is `vweb.Context`).\nIf you want to read the request body, you can do that by calling `app.req.data`.\nTo read the request headers, you just call `app.req.header` and access the\nheader you want example. `app.req.header.get(.content_type)`. See `struct Header`\nfor all available methods (`v doc net.http Header`).\nIt has, too, fields for the `query`, `form`, `files`.\n\n#### - Parameter Arrays\n\nIf you want multiple parameters in your route and if you want to parse the parameters\nyourself, or you want a wildcard route, you can add `...`  after the `:` and name,\ne.g. `['/:path...']`.\n\nThis will match all routes after `'/'`. For example the url `/path/to/test` would give\n`path = '/path/to/test'`.\n\n```v ignore\nvvv\n@['/:path...']             vvvv\nfn (mut app App) wildcard(path string) vweb.Result {\nreturn app.text('URL path = \"${path}\"')\n}\n```\n\n#### - Query\nTo handle the query context, you just need use the  `query` field\n\n**Example:**\n\n```v\nmodule main\n\nimport vweb\n\nstruct App {\nvweb.Context\n}\n\nfn main() {\nvweb.run(&App{}, 8081)\n}\n\n@['/user'; get]\npub fn (mut app App) controller_get_user_by_id() vweb.Result {\n// http://localhost:3000/user?q=vpm&order_by=desc => { 'q': 'vpm', 'order_by': 'desc' }\nreturn app.text(app.query.str())\n}\n```\n#### - Host\nTo restrict an endpoint to a specific host, you can use the `host` attribute\nfollowed by a colon `:` and the host name. You can test the Host feature locally\nby adding a host to the \"hosts\" file of your device.\n\n**Example:**\n\n```v ignore\n@['/'; host: 'example.com']\npub fn (mut app App) hello_web() vweb.Result {\nreturn app.text('Hello World')\n}\n\n@['/'; host: 'api.example.org']\npub fn (mut app App) hello_api() vweb.Result {\nreturn app.text('Hello API')\n}\n\n// define the handler without a host attribute last if you have conflicting paths.\n@['/']\npub fn (mut app App) hello_others() vweb.Result {\nreturn app.text('Hello Others')\n}\n```\n\nYou can also [create a controller](#hosts) to handle all requests from a specific\nhost in one app.\n\n### Middleware\n\nVweb has different kinds of middleware.\nThe `before_request()` method is always called before every request before any\nother middleware is processed. You could use it to check user session cookies or to add a header.\n\n**Example:**\n\n```v ignore\npub fn (mut app App) before_request() {\napp.user_id = app.get_cookie('id') or { '0' }\n}\n```\n\nMiddleware functions can be passed directly when creating an App instance and is\nexecuted when the url starts with the defined key.\n\nIn the following example, if a user navigates to `/path/to/test` the middleware\nis executed in the following order: `middleware_func`, `other_func`, `global_middleware`.\nThe middleware is executed in the same order as they are defined and if any function in\nthe chain returns `false` the propogation is stopped.\n\n**Example:**\n```v\nmodule main\n\nimport vweb\n\nstruct App {\nvweb.Context\nmiddlewares map[string][]vweb.Middleware\n}\n\nfn new_app() &App {\nmut app := &App{\nmiddlewares: {\n// chaining is allowed, middleware will be evaluated in order\n'/path/to/': [middleware_func, other_func]\n'/':         [global_middleware]\n}\n}\n\n// do stuff with app\n// ...\nreturn app\n}\n\nfn middleware_func(mut ctx vweb.Context) bool {\n// ...\nreturn true\n}\n\nfn other_func(mut ctx vweb.Context) bool {\n// ...\nreturn true\n}\n\nfn global_middleware(mut ctx vweb.Context) bool {\n// ...\nreturn true\n}\n```\n\nMiddleware functions will be of type `vweb.Middleware` and are not methods of App,\nso they could also be imported from other modules.\n```v ignore\npub type Middleware = fn (mut Context) bool\n```\n\nMiddleware can also be added to route specific functions via attributes.\n\n**Example:**\n```v ignore\n@[middleware: check_auth]\n@['/admin/data']\npub fn (mut app App) admin() vweb.Result {\n// ...\n}\n\n// check_auth is a method of App, so we don't need to pass the context as parameter.\npub fn (mut app App) check_auth () bool {\n// ...\nreturn true\n}\n```\nYou can only add 1 middleware to a route specific function via attributes.\n\n#### Middleware evaluation order\nThe middleware is executed in the following order:\n\n1. `before_request`\n2. The middleware in `app.middlewares`\n3. The middleware in the `[middleware]` attribute\n\nIf any function of step 2 or 3 returns `false` the middleware functions that would\ncome after it are not executed and the app handler will also not be executed. You\ncan think of it as a chain.\n\n### Context values\n\nYou can store a value pair in vweb's context. It is especially useful for passing variables\nfrom a middleware function to the route handler.\n\n**Example**:\n```v oksyntax\nmodule main\n\nimport vweb\n\nstruct App {\nvweb.Context\nmiddlewares map[string][]vweb.Middleware\n}\n\npub fn (mut app App) index() vweb.Result {\n// get the user or return HTTP 401\nuser := app.get_value[User]('user') or {\napp.set_status(401, '')\nreturn app.text('HTTP 401: Unauthorized')\n}\n\nreturn app.text('welcome ${user.name}')\n}\n\nfn main() {\nvweb.run(&App{\nmiddlewares: {\n'/': [get_session]\n}\n}, 8080)\n}\n\nstruct User {\nsession_id string\nname       string\n}\n\nfn get_session(mut ctx vweb.Context) bool {\n// implement your own logic to get the user\nuser := User{\nsession_id: '123456'\nname: 'Vweb'\n}\n\n// set the user\nctx.set_value('user', user)\nreturn true\n}\n```\n\nWhen you visit the index page the middleware function `get_session` will run first\nThis function sets a `User` value to a key `'user'`.\nWe get this key in `index` and display it to the user if the `'user'` key exists.\n\n#### Changing Context values\n\nBy default context values are immutable when retrieved with `get_value`. If you want to\nchange the value later you have to set it again with `set_value`.\n\n**Example:**\n```v ignore\nfn change_user(mut ctx vweb.Context) bool {\nuser := User{\nsession_id: '654321'\nname: 'tester'\n}\n\n// set the user\nctx.set_value('user', user)\nreturn true\n}\n```\n\n### Redirect\n\nUsed when you want be redirected to an url\n\n**Examples:**\n\n```v ignore\npub fn (mut app App) before_request() {\napp.user_id = app.get_cookie('id') or { app.redirect('/') }\n}\n```\n\n```v ignore\n@['/articles'; get]\npub fn (mut app App) articles() vweb.Result {\nif !app.token {\napp.redirect('/login')\n}\nreturn app.text('patatoes')\n}\n```\n\nYou can also combine middleware and redirect.\n\n**Example:**\n\n```v ignore\n@[middleware: with_auth]\n@['/admin/secret']\npub fn (mut app App) admin_secret() vweb.Result {\n// this code should never be reached\nreturn app.text('secret')\n}\n\n@['/redirect']\npub fn (mut app App) with_auth() bool {\napp.redirect('/auth/login')\nreturn false\n}\n```\n\n### Custom not found page\nYou can implement a `not_found` route that is called when a request is made and no\nmatching route is found to replace the default HTTP 404 not found page.\n\n**Example:**\n\n``` v ignore\npub fn (mut app App) not_found() vweb.Result {\napp.set_status(404, 'Not Found')\nreturn app.html('<h1>Page not found</h1>')\n}\n```\n\n### Databases\nThe `db` field in a vweb app is reserved for database connections. The connection is\ncopied to each new request.\n\n**Example:**\n\n```v\nmodule main\n\nimport vweb\nimport db.sqlite\n\nstruct App {\nvweb.Context\nmut:\ndb sqlite.DB\n}\n\nfn main() {\n// create the database connection\nmut db := sqlite.connect('db')!\n\nvweb.run(&App{\ndb: db\n}, 8080)\n}\n```\n\n### Multithreading\nBy default, a vweb app is multithreaded, that means that multiple requests can\nbe handled in parallel by using multiple CPU's: a worker pool. You can\nchange the number of workers (maximum allowed threads) by altering the `nr_workers`\noption. The default behaviour is to use the maximum number of jobs (cores in most cases).\n\n**Example:**\n```v ignore\nfn main() {\n// assign a maximum of 4 workers\nvweb.run_at(&App{}, nr_workers: 4)\n}\n```\n\n#### Database Pool\nA single connection database works fine if you run your app with 1 worker, of if\nyou access a file-based database like a sqlite file.\n\nThis approach will fail when using a non-file based database connection like a mysql\nconnection to another server somewhere on the internet. Multiple threads would need to access\nthe same connection at the same time.\n\nTo resolve this issue, you can use the vweb's built-in database pool. The database pool\nwill keep a number of connections open when the app is started and each worker is\nassigned its own connection.\n\nLet's look how we can improve our previous example with database pooling and using a\npostgresql server instead.\n\n**Example:**\n```v\nmodule main\n\nimport vweb\nimport db.pg\n\nstruct App {\nvweb.Context\ndb_handle vweb.DatabasePool[pg.DB]\nmut:\ndb pg.DB\n}\n\nfn get_database_connection() pg.DB {\n// insert your own credentials\nreturn pg.connect(user: 'user', password: 'password', dbname: 'database') or { panic(err) }\n}\n\nfn main() {\n// create the database pool and pass our `get_database_connection` function as handler\npool := vweb.database_pool(handler: get_database_connection)\n\n// no need to set the `db` field\nvweb.run(&App{\ndb_handle: pool\n}, 8080)\n}\n```\n\nIf you don't use the default number of workers (`nr_workers`) you have to change\nit to the same number in `vweb.run_at` as in `vweb.database_pool`\n\n### Extending the App struct with `[vweb_global]`\nYou can change your `App` struct however you like, but there are some things you\nhave to keep in mind. Under the hood at each request a new instance of `App` is\nconstructed, and all fields are re-initialized with their default type values,\nexcept for the `db` field.\n\nThis behaviour ensures that each request is treated equally and in the same context, but\nproblems arise when we want to provide more context than just the default `vweb.Context`.\n\nLet's view the following example where we want to provide a secret token to our app:\n\n```v\nmodule main\n\nimport vweb\n\nstruct App {\nvweb.Context\nsecret string\n}\n\nfn main() {\nvweb.run(&App{\nsecret: 'my secret'\n}, 8080)\n}\n\nfn (mut app App) index() vweb.Result {\nreturn app.text('My secret is: ${app.secret}')\n}\n```\n\nWhen you visit `localhost:8080/` you would expect to see the text\n`\"My secret is: my secret\"`, but instead there is only the text\n`\"My secret is: \"`. This is because of the way vweb works. We can override the default\nbehaviour by adding the attribute `[vweb_global]` to the `secret` field.\n\n**Example:**\n```v ignore\nstruct App {\nvweb.Context\nsecret string [vweb_global]\n}\n```\n\nNow if you visit `localhost:8080/` you see the text `\"My secret is: my secret\"`.\n> **Note**: the value of `secret` gets initialized with the provided value when creating\n> `App`. If you would modify `secret` in one request the value won't be changed in the\n> next request. You can use shared fields for this.\n\n### Shared Objects across requests\nWe saw in the previous section that we can persist data across multiple requests,\nbut what if we want to be able to mutate the data? Since vweb works with threads,\nwe have to use `shared` fields.\n\nLet's see how we can add a visitor counter to our `App`.\n\n**Example:**\n```v\nmodule main\n\nimport vweb\n\nstruct Counter {\npub mut:\ncount int\n}\n\nstruct App {\nvweb.Context\nmut:\ncounter shared Counter // shared fields can only be structs, arrays or maps.\n}\n\nfn main() {\n// initialize the shared object\nshared counter := Counter{\ncount: 0\n}\n\nvweb.run(&App{\ncounter: counter\n}, 8080)\n}\n\nfn (mut app App) index() vweb.Result {\nmut count := 0\n// lock the counter so we can modify it\nlock app.counter {\napp.counter.count += 1\ncount = app.counter.count\n}\nreturn app.text('Total visitors: ${count}')\n}\n```\n\n#### Drawback of Shared Objects\nThe drawback of using shared objects is that it affects performance. In the previous example\n`App.counter` needs to be locked each time the page is loaded if there are simultaneous\nrequests the next requests will have to wait for the lock to be released.\n\nIt is best practice to limit the use of shared objects as much as possible.\n\n### Controllers\nControllers can be used to split up app logic so you are able to have one struct\nper `\"/\"`.  E.g. a struct `Admin` for urls starting with `\"/admin\"` and a struct `Foo`\nfor urls starting with `\"/foo\"`\n\n**Example:**\n```v\nmodule main\n\nimport vweb\n\nstruct App {\nvweb.Context\nvweb.Controller\n}\n\nstruct Admin {\nvweb.Context\n}\n\nstruct Foo {\nvweb.Context\n}\n\nfn main() {\nmut app := &App{\ncontrollers: [\nvweb.controller('/admin', &Admin{}),\nvweb.controller('/foo', &Foo{}),\n]\n}\nvweb.run(app, 8080)\n}\n```\n\nYou can do everything with a controller struct as with a regular `App` struct.\nThe only difference being is that only the main app that is being passed to `vweb.run`\nis able to have controllers. If you add `vweb.Controller` on a controller struct it\nwill simply be ignored.\n\n#### Routing\nAny route inside a controller struct is treated as a relative route to its controller namespace.\n\n```v ignore\n@['/path']\npub fn (mut app Admin) path vweb.Result {\nreturn app.text('Admin')\n}\n```\nWhen we created the controller with `vweb.controller('/admin', &Admin{})` we told\nvweb that the namespace of that controller is `\"/admin\"` so in this example we would\nsee the text `\"Admin\"` if we navigate to the url `\"/admin/path\"`.\n\nVweb doesn't support fallback routes or duplicate routes, so if we add the following\nroute to the example the code will produce an error.\n\n```v ignore\n@['/admin/path']\npub fn (mut app App) admin_path vweb.Result {\nreturn app.text('Admin overwrite')\n}\n```\nThere will be an error, because the controller `Admin` handles all routes starting with\n`\"/admin\"`; the method `admin_path` is unreachable.\n\n#### Hosts\nYou can also set a host for a controller. All requests coming from that host will be handled\nby the controller.\n\n**Example:**\n```v\nmodule main\n\nimport vweb\n\nstruct App {\nvweb.Context\nvweb.Controller\n}\n\npub fn (mut app App) index() vweb.Result {\nreturn app.text('App')\n}\n\nstruct Example {\nvweb.Context\n}\n\n// You can only access this route at example.com: http://example.com/\npub fn (mut app Example) index() vweb.Result {\nreturn app.text('Example')\n}\n\nfn main() {\nvweb.run(&App{\ncontrollers: [\nvweb.controller_host('example.com', '/', &Example{}),\n]\n}, 8080)\n}\n```\n\n#### Databases and `[vweb_global]` in controllers\n\nFields with `[vweb_global]` have to passed to each controller individually.\nThe `db` field is unique and will be treated as a `vweb_global` field at all times.\n\n**Example:**\n```v\nmodule main\n\nimport vweb\nimport db.sqlite\n\nstruct App {\nvweb.Context\nvweb.Controller\nmut:\ndb sqlite.DB\n}\n\nstruct Admin {\nvweb.Context\nmut:\ndb sqlite.DB\n}\n\nfn main() {\nmut db := sqlite.connect('db')!\n\nmut app := &App{\ndb: db\ncontrollers: [\nvweb.controller('/admin', &Admin{\ndb: db\n}),\n]\n}\n}\n```\n\n#### Using a database pool\n\n**Example:**\n```v\nmodule main\n\nimport vweb\nimport db.pg\n\nstruct App {\nvweb.Context\nvweb.Controller\ndb_handle vweb.DatabasePool[pg.DB]\nmut:\ndb pg.DB\n}\n\nstruct Admin {\nvweb.Context\ndb_handle vweb.DatabasePool[pg.DB]\nmut:\ndb pg.DB\n}\n\nfn get_database_connection() pg.DB {\n// insert your own credentials\nreturn pg.connect(user: 'user', password: 'password', dbname: 'database') or { panic(err) }\n}\n\nfn main() {\n// create the database pool and pass our `get_database_connection` function as handler\npool := vweb.database_pool(handler: get_database_connection)\n\nmut app := &App{\ndb_handle: pool\ncontrollers: [\nvweb.controller('/admin', &Admin{\ndb_handle: pool\n}),\n]\n}\n}\n```\n\n### Responses\n\n#### - set_status\n\nSets the response status\n**Example:**\n\n```v ignore\n@['/user/get_all'; get]\npub fn (mut app App) controller_get_all_user() vweb.Result {\ntoken := app.get_header('token')\n\nif !token {\napp.set_status(401, '')\nreturn app.text('Not valid token')\n}\n\nresponse := app.service_get_all_user() or {\napp.set_status(400, '')\nreturn app.text('$err')\n}\nreturn app.json(response)\n}\n```\n\n#### - html\n\nResponse HTTP_OK with payload with content-type `text/html`\n**Example:**\n\n```v ignore\npub fn (mut app App) html_page() vweb.Result {\nreturn app.html('<h1>ok</h1>')\n}\n```\n\n#### - text\n\nResponse HTTP_OK with payload with content-type `text/plain`\n**Example:**\n\n```v ignore\npub fn (mut app App) simple() vweb.Result {\nreturn app.text('A simple result')\n}\n```\n\n#### - json\n\nResponse HTTP_OK with payload with content-type `application/json`\n**Examples:**\n\n```v ignore\n@['/articles'; get]\npub fn (mut app App) articles() vweb.Result {\narticles := app.find_all_articles()\njson_result := json.encode(articles)\nreturn app.json(json_result)\n}\n```\n\n```v ignore\n@['/user/create'; post]\npub fn (mut app App) controller_create_user() vweb.Result {\nbody := json.decode(User, app.req.data) or {\napp.set_status(400, '')\nreturn app.text('Failed to decode json, error: $err')\n}\n\nresponse := app.service_add_user(body.username, body.password) or {\napp.set_status(400, '')\nreturn app.text('error: $err')\n}\n\nreturn app.json(response)\n}\n```\n\n#### - json_pretty\n\nResponse HTTP_OK with a pretty-printed JSON result\n**Example:**\n\n```v ignore\nfn (mut app App) time_json_pretty() {\napp.json_pretty({\n'time': time.now().format()\n})\n}\n```\n\n#### - file\n\nResponse HTTP_OK with file as payload\n\n#### - ok\n\nResponse HTTP_OK with payload\n**Example:**\n\n```v ignore\n@['/form_echo'; post]\npub fn (mut app App) form_echo() vweb.Result {\napp.set_content_type(app.req.header.get(.content_type) or { '' })\nreturn app.ok(app.form['foo'])\n}\n```\n\n#### - server_error\n\nResponse a server error\n**Example:**\n\n```v ignore\nfn (mut app App) sse() vweb.Result {\nreturn app.server_error(501)\n}\n```\n\n#### - not_found\n\nResponse HTTP_NOT_FOUND with payload\n**Example:**\n\n```v ignore\n@['/:user/:repo/settings']\npub fn (mut app App) user_repo_settings(username string, repository string) vweb.Result {\nif username !in known_users {\nreturn app.not_found()\n}\nreturn app.html('username: $username | repository: $repository')\n}\n```\n\n### Requests\n\n#### - get_header\n\nReturns the header data from the key\n**Example:**\n\n```v ignore\n@['/user/get_all'; get]\npub fn (mut app App) controller_get_all_user() vweb.Result {\ntoken := app.get_header('token')\nreturn app.text(token)\n}\n```\n\n#### - get_cookie\n\nSets a cookie\n**Example:**\n\n```v ignore\npub fn (mut app App) before_request() {\napp.user_id = app.get_cookie('id') or { '0' }\n}\n```\n\n#### - add_header\n\nAdds an header to the response with key and val\n**Example:**\n\n```v ignore\n@['/upload'; post]\npub fn (mut app App) upload() vweb.Result {\nfdata := app.files['upfile']\n\ndata_rows := fdata[0].data.split('\n')\n\nmut output_data := ''\n\nfor elem in data_rows {\ndelim_row := elem.split('\t')\noutput_data += '${delim_row[0]}\t${delim_row[1]}\t'\noutput_data += '${delim_row[0].int() + delim_row[1].int()}\n'\n}\n\noutput_data = output_data.all_before_last('\n')\n\napp.add_header('Content-Disposition', 'attachment; filename=results.txt')\napp.send_response_to_client('application/octet-stream', output_data)\n\nreturn $vweb.html()\n}\n```\n\n#### - set_cookie\n\nSets a cookie\n**Example:**\n\n```v ignore\npub fn (mut app App) cookie() vweb.Result {\napp.set_cookie(name: 'cookie', value: 'test')\nreturn app.text('Response Headers\n$app.header')\n}\n```\n\n#### - set_cookie_with_expire_date\n\nSets a cookie with a `expire_data`\n**Example:**\n\n```v ignore\npub fn (mut app App) cookie() vweb.Result {\nkey := 'cookie'\nvalue := 'test'\nduration := time.Duration(2 * time.minute ) // add 2 minutes\nexpire_date := time.now().add(duration)\n\napp.set_cookie_with_expire_date(key, value, expire_date)\nreturn app.text('Response Headers\n$app.header')\n}\n```\n\n#### - set_content_type\n\nSets the response content type\n**Example:**\n\n```v ignore\n@['/form_echo'; post]\npub fn (mut app App) form_echo() vweb.Result {\napp.set_content_type(app.req.header.get(.content_type) or { '' })\nreturn app.ok(app.form['foo'])\n}\n```\n\n### Template\n\n#### -handle_static\n\nhandle_static is used to mark a folder (relative to the current working folder) as one that\ncontains only static resources (css files, images etc).\\nhost_handle_static can be used to limit the static resources to a specific host.\n\nIf `root` is set the mount path for the dir will be in '/'\n\n**Example:**\n\n```v ignore\nfn main() {\nmut app := &App{}\napp.serve_static('/favicon.ico', 'favicon.ico')\n// app.host_serve_static('localhost', '/favicon.ico', 'favicon.ico')\n// Automatically make available known static mime types found in given directory.\nos.chdir(os.dir(os.executable()))?\napp.handle_static('assets', true)\nvweb.run(app, port)\n}\n```\n\n#### -mount_static_folder_at\n\nmakes all static files in `directory_path` and inside it, available at http://server/mount_path.\n\nFor example: suppose you have called .mount_static_folder_at('/var/share/myassets', '/assets'),\nand you have a file /var/share/myassets/main.css .\n=> That file will be available at URL: http://server/assets/main.css .\n\nmount_static_folder_at can be used to limit the static resources to a specific host.\n\n#### -serve_static\n\nServes a file static.\n`url` is the access path on the site, `file_path` is the real path to the file, `mime_type` is the\nfile type\n\nhost_serve_static can be used to limit the static resources to a specific host.\n\n**Example:**\n\n```v ignore\nfn main() {\nmut app := &App{}\napp.serve_static('/favicon.ico', 'favicon.ico')\n// app.host_serve_static('localhost', /favicon.ico', 'favicon.ico')\napp.mount_static_folder_at(os.resource_abs_path('.'), '/')\nvweb.run(app, 8081)\n}\n```\n\n### Others\n\n#### -user_agent\n\nReturns the user-agent from the current user\n\n**Example:**\n\n```v ignore\npub fn (mut app App) user_agent() vweb.Result {\nua := app.user_agent()\nreturn app.text('User-Agent: $ua')\n}\n```\n\n#### -ip\n\nReturns the ip address from the current user\n\n**Example:**\n\n```v ignore\npub fn (mut app App) ip() vweb.Result {\nip := app.ip()\nreturn app.text('ip: $ip')\n}\n```\n\n#### -error\n\nSet a string to the form error\n\n**Example:**\n\n```v ignore\npub fn (mut app App) error() vweb.Result {\napp.error('here as an error')\nprintln(app.form_error) //'vweb error: here as an error'\n}\n```\n# Cross-Site Request Forgery (CSRF) protection\n\nVweb has built-in csrf protection. Go to the [csrf module](csrf/) to learn how\nyou can protect your app against CSRF.\n","contents":[{"attributes":{},"comments":[{"text":"\u0001 A type which don't get filtered inside templates","is_multi":false,"pos":{"len":50,"line_nr":17,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"type RawHtml = string","name":"RawHtml","parent_name":"","return_type":"","pos":{"len":16,"line_nr":18,"pos":391,"col":0,"last_line":18},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 A dummy structure that returns from routes to indicate that you actually sent something to a user","is_multi":false,"pos":{"len":99,"line_nr":20,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"struct Result {}","name":"Result","parent_name":"","return_type":"","pos":{"len":17,"line_nr":22,"pos":529,"col":0,"last_line":22},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const methods_with_form = [http.Method.post, .put, .patch]","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":24,"pos":551,"col":0,"last_line":24},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const headers_close = http.new_custom_header_from_map({\n\t'Server':                           'VWeb'\n\thttp.CommonHeader.connection.str(): 'close'\n}) or { panic('should never fail') }","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":25,"pos":614,"col":0,"last_line":28},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const http_302 = http.new_response(\n\tstatus: .found\n\tbody: '302 Found'\n\theader: headers_close\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":30,"pos":801,"col":0,"last_line":34},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const http_303 = http.new_response(\n\tstatus: .see_other\n\tbody: '303 See Other'\n\theader: headers_close\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":35,"pos":901,"col":0,"last_line":39},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const http_400 = http.new_response(\n\tstatus: .bad_request\n\tbody: '400 Bad Request'\n\theader: http.new_header(\n\t\tkey: .content_type\n\t\tvalue: 'text/plain'\n\t).join(headers_close)\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":40,"pos":1009,"col":0,"last_line":47},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const http_404 = http.new_response(\n\tstatus: .not_found\n\tbody: '404 Not Found'\n\theader: http.new_header(\n\t\tkey: .content_type\n\t\tvalue: 'text/plain'\n\t).join(headers_close)\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":48,"pos":1190,"col":0,"last_line":55},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const http_500 = http.new_response(\n\tstatus: .internal_server_error\n\tbody: '500 Internal Server Error'\n\theader: http.new_header(\n\t\tkey: .content_type\n\t\tvalue: 'text/plain'\n\t).join(headers_close)\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":56,"pos":1367,"col":0,"last_line":63},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const mime_types = {\n\t'.aac':    'audio/aac'\n\t'.abw':    'application/x-abiword'\n\t'.arc':    'application/x-freearc'\n\t'.avi':    'video/x-msvideo'\n\t'.azw':    'application/vnd.amazon.ebook'\n\t'.bin':    'application/octet-stream'\n\t'.bmp':    'image/bmp'\n\t'.bz':     'application/x-bzip'\n\t'.bz2':    'application/x-bzip2'\n\t'.cda':    'application/x-cdf'\n\t'.csh':    'application/x-csh'\n\t'.css':    'text/css'\n\t'.csv':    'text/csv'\n\t'.doc':    'application/msword'\n\t'.docx':   'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n\t'.eot':    'application/vnd.ms-fontobject'\n\t'.epub':   'application/epub+zip'\n\t'.gz':     'application/gzip'\n\t'.gif':    'image/gif'\n\t'.htm':    'text/html'\n\t'.html':   'text/html'\n\t'.ico':    'image/vnd.microsoft.icon'\n\t'.ics':    'text/calendar'\n\t'.jar':    'application/java-archive'\n\t'.jpeg':   'image/jpeg'\n\t'.jpg':    'image/jpeg'\n\t'.js':     'text/javascript'\n\t'.json':   'application/json'\n\t'.jsonld': 'application/ld+json'\n\t'.md':     'text/markdown'\n\t'.mid':    'audio/midi audio/x-midi'\n\t'.midi':   'audio/midi audio/x-midi'\n\t'.mjs':    'text/javascript'\n\t'.mp3':    'audio/mpeg'\n\t'.mp4':    'video/mp4'\n\t'.mpeg':   'video/mpeg'\n\t'.mpkg':   'application/vnd.apple.installer+xml'\n\t'.odp':    'application/vnd.oasis.opendocument.presentation'\n\t'.ods':    'application/vnd.oasis.opendocument.spreadsheet'\n\t'.odt':    'application/vnd.oasis.opendocument.text'\n\t'.oga':    'audio/ogg'\n\t'.ogv':    'video/ogg'\n\t'.ogx':    'application/ogg'\n\t'.opus':   'audio/opus'\n\t'.otf':    'font/otf'\n\t'.png':    'image/png'\n\t'.pdf':    'application/pdf'\n\t'.php':    'application/x-httpd-php'\n\t'.ppt':    'application/vnd.ms-powerpoint'\n\t'.pptx':   'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n\t'.rar':    'application/vnd.rar'\n\t'.rtf':    'application/rtf'\n\t'.sh':     'application/x-sh'\n\t'.svg':    'image/svg+xml'\n\t'.swf':    'application/x-shockwave-flash'\n\t'.tar':    'application/x-tar'\n\t'.toml':   'application/toml'\n\t'.tif':    'image/tiff'\n\t'.tiff':   'image/tiff'\n\t'.ts':     'video/mp2t'\n\t'.ttf':    'font/ttf'\n\t'.txt':    'text/plain'\n\t'.vsd':    'application/vnd.visio'\n\t'.wasm':   'application/wasm'\n\t'.wav':    'audio/wav'\n\t'.weba':   'audio/webm'\n\t'.webm':   'video/webm'\n\t'.webp':   'image/webp'\n\t'.woff':   'font/woff'\n\t'.woff2':  'font/woff2'\n\t'.xhtml':  'application/xhtml+xml'\n\t'.xls':    'application/vnd.ms-excel'\n\t'.xlsx':   'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t'.xml':    'application/xml'\n\t'.xul':    'application/vnd.mozilla.xul+xml'\n\t'.zip':    'application/zip'\n\t'.3gp':    'video/3gpp'\n\t'.3g2':    'video/3gpp2'\n\t'.7z':     'application/x-7z-compressed'\n}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":64,"pos":1568,"col":0,"last_line":144},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const max_http_post_size = 1024 * 1024","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":145,"pos":4263,"col":0,"last_line":145},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"const default_port = 8080","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":146,"pos":4306,"col":0,"last_line":146},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 The Context struct represents the Context which hold the HTTP request and response.","is_multi":false,"pos":{"len":85,"line_nr":148,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It has fields for the query, form, files.","is_multi":false,"pos":{"len":43,"line_nr":149,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 Defining this method is optional.","is_multi":false,"pos":{"len":35,"line_nr":199,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This method called at server start.","is_multi":false,"pos":{"len":37,"line_nr":200,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 You can use it for initializing globals.","is_multi":false,"pos":{"len":42,"line_nr":201,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (ctx Context) init_server()","name":"init_server","parent_name":"Context","return_type":"void","pos":{"len":34,"line_nr":202,"pos":5973,"col":0,"last_line":204},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Defining this method is optional.","is_multi":false,"pos":{"len":35,"line_nr":206,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This method is called before every request (aka middleware).","is_multi":false,"pos":{"len":62,"line_nr":207,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 You can use it for checking user session cookies or to add headers.","is_multi":false,"pos":{"len":69,"line_nr":208,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (ctx Context) before_request()","name":"before_request","parent_name":"Context","return_type":"void","pos":{"len":37,"line_nr":209,"pos":6273,"col":0,"last_line":209},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":211,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 vweb intern function","is_multi":false,"pos":{"len":22,"line_nr":212,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) send_response_to_client(mimetype string, res string) bool","name":"send_response_to_client","parent_name":"Context","return_type":"bool","pos":{"len":82,"line_nr":214,"pos":6368,"col":0,"last_line":240},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response with payload and content-type `text/html`","is_multi":false,"pos":{"len":52,"line_nr":242,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) html(payload string) Result","name":"html","parent_name":"Context","return_type":"Result","pos":{"len":52,"line_nr":243,"pos":7309,"col":0,"last_line":246},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response with s as payload and content-type `text/plain`","is_multi":false,"pos":{"len":58,"line_nr":248,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) text(s string) Result","name":"text","parent_name":"Context","return_type":"Result","pos":{"len":46,"line_nr":249,"pos":7495,"col":0,"last_line":252},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response with json_s as payload and content-type `application/json`","is_multi":false,"pos":{"len":69,"line_nr":254,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) json[T](j T) Result","name":"json","parent_name":"Context","return_type":"Result","pos":{"len":44,"line_nr":255,"pos":7681,"col":0,"last_line":259},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response with a pretty-printed JSON result","is_multi":false,"pos":{"len":44,"line_nr":261,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) json_pretty[T](j T) Result","name":"json_pretty","parent_name":"Context","return_type":"Result","pos":{"len":51,"line_nr":262,"pos":7877,"col":0,"last_line":266},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":268,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Response with file as payload","is_multi":false,"pos":{"len":31,"line_nr":269,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) file(f_path string) Result","name":"file","parent_name":"Context","return_type":"Result","pos":{"len":51,"line_nr":270,"pos":8089,"col":0,"last_line":289},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response with s as payload and sets the status code to HTTP_OK","is_multi":false,"pos":{"len":64,"line_nr":291,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) ok(s string) Result","name":"ok","parent_name":"Context","return_type":"Result","pos":{"len":44,"line_nr":292,"pos":8675,"col":0,"last_line":296},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":298,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Response a server error","is_multi":false,"pos":{"len":25,"line_nr":299,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) server_error(ecode int) Result","name":"server_error","parent_name":"Context","return_type":"Result","pos":{"len":55,"line_nr":300,"pos":8861,"col":0,"last_line":309},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Redirect to an url","is_multi":false,"pos":{"len":20,"line_nr":316,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) redirect(url string, params RedirectParams) Result","name":"redirect","parent_name":"Context","return_type":"Result","pos":{"len":75,"line_nr":317,"pos":9184,"col":0,"last_line":330},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Send an not_found response","is_multi":false,"pos":{"len":28,"line_nr":332,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) not_found() Result","name":"not_found","parent_name":"Context","return_type":"Result","pos":{"len":43,"line_nr":333,"pos":9593,"col":0,"last_line":341},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":343,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Sets a cookie","is_multi":false,"pos":{"len":15,"line_nr":344,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) set_cookie(cookie http.Cookie)","name":"set_cookie","parent_name":"Context","return_type":"void","pos":{"len":55,"line_nr":345,"pos":9908,"col":0,"last_line":352},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Sets the response content type","is_multi":false,"pos":{"len":32,"line_nr":354,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) set_content_type(typ string)","name":"set_content_type","parent_name":"Context","return_type":"void","pos":{"len":53,"line_nr":355,"pos":10177,"col":0,"last_line":357},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":359,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Sets a cookie with a `expire_date`","is_multi":false,"pos":{"len":36,"line_nr":360,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) set_cookie_with_expire_date(key string, val string, expire_date time.Time)","name":"set_cookie_with_expire_date","parent_name":"Context","return_type":"void","pos":{"len":99,"line_nr":361,"pos":10313,"col":0,"last_line":368},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Gets a cookie by a key","is_multi":false,"pos":{"len":24,"line_nr":370,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (ctx &Context) get_cookie(key string) !string","name":"get_cookie","parent_name":"Context","return_type":"!string","pos":{"len":52,"line_nr":371,"pos":10543,"col":0,"last_line":377},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":379,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Sets the response status","is_multi":false,"pos":{"len":26,"line_nr":380,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) set_status(code int, desc string)","name":"set_status","parent_name":"Context","return_type":"void","pos":{"len":58,"line_nr":381,"pos":10787,"col":0,"last_line":387},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":389,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Adds an header to the response with key and val","is_multi":false,"pos":{"len":49,"line_nr":390,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) add_header(key string, val string)","name":"add_header","parent_name":"Context","return_type":"void","pos":{"len":59,"line_nr":391,"pos":11037,"col":0,"last_line":393},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":395,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Returns the header data from the key","is_multi":false,"pos":{"len":38,"line_nr":396,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (ctx &Context) get_header(key string) string","name":"get_header","parent_name":"Context","return_type":"string","pos":{"len":51,"line_nr":397,"pos":11196,"col":0,"last_line":399},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_value sets a value on the context","is_multi":false,"pos":{"len":39,"line_nr":401,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) set_value(key context.Key, value context.Any)","name":"set_value","parent_name":"Context","return_type":"void","pos":{"len":70,"line_nr":402,"pos":11343,"col":0,"last_line":404},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_value gets a value from the context","is_multi":false,"pos":{"len":41,"line_nr":406,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (ctx &Context) get_value[T](key context.Key) ?T","name":"get_value","parent_name":"Context","return_type":"?T","pos":{"len":54,"line_nr":407,"pos":11513,"col":0,"last_line":423},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 handle_static is used to mark a folder (relative to the current working folder)","is_multi":false,"pos":{"len":81,"line_nr":994,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 as one that contains only static resources (css files, images etc).","is_multi":false,"pos":{"len":69,"line_nr":995,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If `root` is set the mount path for the dir will be in '/'","is_multi":false,"pos":{"len":60,"line_nr":996,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Usage:","is_multi":false,"pos":{"len":8,"line_nr":997,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```v","is_multi":false,"pos":{"len":6,"line_nr":998,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 os.chdir( os.executable() )?","is_multi":false,"pos":{"len":30,"line_nr":999,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 app.handle_static('assets', true)","is_multi":false,"pos":{"len":35,"line_nr":1000,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```","is_multi":false,"pos":{"len":5,"line_nr":1001,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) handle_static(directory_path string, root bool) bool","name":"handle_static","parent_name":"Context","return_type":"bool","pos":{"len":77,"line_nr":1002,"pos":29151,"col":0,"last_line":1004},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 host_handle_static is used to mark a folder (relative to the current working folder)","is_multi":false,"pos":{"len":86,"line_nr":1006,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 as one that contains only static resources (css files, images etc).","is_multi":false,"pos":{"len":69,"line_nr":1007,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If `root` is set the mount path for the dir will be in '/'","is_multi":false,"pos":{"len":60,"line_nr":1008,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Usage:","is_multi":false,"pos":{"len":8,"line_nr":1009,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```v","is_multi":false,"pos":{"len":6,"line_nr":1010,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 os.chdir( os.executable() )?","is_multi":false,"pos":{"len":30,"line_nr":1011,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 app.host_handle_static('localhost', 'assets', true)","is_multi":false,"pos":{"len":53,"line_nr":1012,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```","is_multi":false,"pos":{"len":5,"line_nr":1013,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) host_handle_static(host string, directory_path string, root bool) bool","name":"host_handle_static","parent_name":"Context","return_type":"bool","pos":{"len":95,"line_nr":1014,"pos":29624,"col":0,"last_line":1026},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":1028,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 mount_static_folder_at - makes all static files in `directory_path` and inside it, available at http://server/mount_path","is_multi":false,"pos":{"len":122,"line_nr":1029,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 For example: suppose you have called .mount_static_folder_at('/var/share/myassets', '/assets'),","is_multi":false,"pos":{"len":97,"line_nr":1030,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and you have a file /var/share/myassets/main.css .","is_multi":false,"pos":{"len":52,"line_nr":1031,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 => That file will be available at URL: http://server/assets/main.css .","is_multi":false,"pos":{"len":72,"line_nr":1032,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) mount_static_folder_at(directory_path string, mount_path string) bool","name":"mount_static_folder_at","parent_name":"Context","return_type":"bool","pos":{"len":94,"line_nr":1033,"pos":30464,"col":0,"last_line":1035},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":1037,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 host_mount_static_folder_at - makes all static files in `directory_path` and inside it, available at http://host/mount_path","is_multi":false,"pos":{"len":125,"line_nr":1038,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 For example: suppose you have called .host_mount_static_folder_at('localhost', '/var/share/myassets', '/assets'),","is_multi":false,"pos":{"len":115,"line_nr":1039,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and you have a file /var/share/myassets/main.css .","is_multi":false,"pos":{"len":52,"line_nr":1040,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 => That file will be available at URL: http://localhost/assets/main.css .","is_multi":false,"pos":{"len":75,"line_nr":1041,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) host_mount_static_folder_at(host string, directory_path string, mount_path string) bool","name":"host_mount_static_folder_at","parent_name":"Context","return_type":"bool","pos":{"len":112,"line_nr":1042,"pos":31026,"col":0,"last_line":1051},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":1053,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Serves a file static","is_multi":false,"pos":{"len":22,"line_nr":1054,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `url` is the access path on the site, `file_path` is the real path to the file, `mime_type` is the file type","is_multi":false,"pos":{"len":110,"line_nr":1055,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) serve_static(url string, file_path string)","name":"serve_static","parent_name":"Context","return_type":"void","pos":{"len":67,"line_nr":1056,"pos":31590,"col":0,"last_line":1058},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test","is_multi":false,"pos":{"len":13,"line_nr":1060,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Serves a file static","is_multi":false,"pos":{"len":22,"line_nr":1061,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `url` is the access path on the site, `file_path` is the real path to the file","is_multi":false,"pos":{"len":80,"line_nr":1062,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `mime_type` is the file type, `host` is the host to serve the file from","is_multi":false,"pos":{"len":73,"line_nr":1063,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) host_serve_static(host string, url string, file_path string)","name":"host_serve_static","parent_name":"Context","return_type":"void","pos":{"len":85,"line_nr":1064,"pos":31902,"col":0,"last_line":1070},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 user_agent returns the user-agent header for the current client","is_multi":false,"pos":{"len":65,"line_nr":1072,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (ctx &Context) user_agent() string","name":"user_agent","parent_name":"Context","return_type":"string","pos":{"len":41,"line_nr":1073,"pos":32250,"col":0,"last_line":1075},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the ip address from the current user","is_multi":false,"pos":{"len":46,"line_nr":1077,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (ctx &Context) ip() string","name":"ip","parent_name":"Context","return_type":"string","pos":{"len":33,"line_nr":1078,"pos":32395,"col":0,"last_line":1091},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Set s to the form error","is_multi":false,"pos":{"len":25,"line_nr":1093,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn (mut ctx Context) error(s string)","name":"error","parent_name":"Context","return_type":"void","pos":{"len":40,"line_nr":1094,"pos":32711,"col":0,"last_line":1097},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"struct Context {\nmut:\n\tcontent_type string = 'text/plain'\n\tstatus       string = '200 OK'\n\tctx          context.Context = context.EmptyContext{}\npub:\n\t// HTTP Request\n\treq http.Request\n\t// TODO Response\npub mut:\n\tdone bool\n\t// time.ticks() from start of vweb connection handle.\n\t// You can use it to determine how much time is spent on your request.\n\tpage_gen_start i64\n\t// TCP connection to client.\n\t// But beware, do not store it for further use, after request processing vweb will close connection.\n\tconn              &net.TcpConn = unsafe { nil }\n\tstatic_files      map[string]string\n\tstatic_mime_types map[string]string\n\tstatic_hosts      map[string]string\n\t// Map containing query params for the route.\n\t// http://localhost:3000/index?q=vpm&order_by=desc => { 'q': 'vpm', 'order_by': 'desc' }\n\tquery map[string]string\n\t// Multipart-form fields.\n\tform map[string]string\n\t// Files from multipart-form.\n\tfiles map[string][]http.FileData\n\n\theader http.Header // response headers\n\t// ? It doesn't seem to be used anywhere\n\tform_error                  string\n\tlivereload_poll_interval_ms int = 250\n}","name":"Context","parent_name":"","return_type":"","pos":{"len":18,"line_nr":150,"pos":4469,"col":0,"last_line":182},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"struct RedirectParams {\n\tstatus_code int = 302\n}","name":"RedirectParams","parent_name":"","return_type":"","pos":{"len":25,"line_nr":312,"pos":9108,"col":0,"last_line":314},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"type DatabasePool[T] = fn (tid int) T","name":"DatabasePool","parent_name":"","return_type":"","pos":{"len":21,"line_nr":425,"pos":12086,"col":0,"last_line":425},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"type Middleware = fn (mut Context) bool","name":"Middleware","parent_name":"","return_type":"","pos":{"len":19,"line_nr":438,"pos":12240,"col":0,"last_line":438},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"struct ControllerPath {\npub:\n\tpath    string\n\thandler ControllerHandler = unsafe { nil }\npub mut:\n\thost string\n}","name":"ControllerPath","parent_name":"","return_type":"","pos":{"len":25,"line_nr":466,"pos":12973,"col":0,"last_line":472},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"struct Controller {\npub mut:\n\tcontrollers []&ControllerPath\n}","name":"Controller","parent_name":"","return_type":"","pos":{"len":21,"line_nr":478,"pos":13157,"col":0,"last_line":481},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 controller generates a new Controller for the main app","is_multi":false,"pos":{"len":56,"line_nr":483,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn controller[T](path string, global_app &T) &ControllerPath","name":"controller","parent_name":"","return_type":"ControllerPath","pos":{"len":64,"line_nr":484,"pos":13282,"col":0,"last_line":499},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 controller_host generates a controller which only handles incoming requests from the `host` domain","is_multi":false,"pos":{"len":100,"line_nr":501,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn controller_host[T](host string, path string, global_app &T) &ControllerPath","name":"controller_host","parent_name":"","return_type":"ControllerPath","pos":{"len":82,"line_nr":502,"pos":14073,"col":0,"last_line":506},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 run - start a new VWeb server, listening to all available addresses, at the specified `port`","is_multi":false,"pos":{"len":94,"line_nr":508,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn run[T](global_app &T, port int)","name":"run","parent_name":"","return_type":"void","pos":{"len":38,"line_nr":509,"pos":14330,"col":0,"last_line":511},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"struct RunParams {\n\tfamily               net.AddrFamily = .ip6 // use `family: .ip, host: 'localhost'` when you want it to bind only to 127.0.0.1\n\thost                 string\n\tport                 int  = 8080\n\tnr_workers           int  = runtime.nr_jobs()\n\tpool_channel_slots   int  = 1000\n\tshow_startup_message bool = true\n\tstartup_message      string\n}","name":"RunParams","parent_name":"","return_type":"","pos":{"len":20,"line_nr":514,"pos":14467,"col":0,"last_line":522},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 run_at - start a new VWeb server, listening only on a specific address `host`, at the specified `port`","is_multi":false,"pos":{"len":104,"line_nr":524,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: vweb.run_at(new_app(), vweb.RunParams{ host: 'localhost' port: 8099 family: .ip }) or { panic(err) }","is_multi":false,"pos":{"len":111,"line_nr":525,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn run_at[T](global_app &T, params RunParams) !","name":"run_at","parent_name":"","return_type":"!","pos":{"len":51,"line_nr":527,"pos":15060,"col":0,"last_line":582},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns an empty result","is_multi":false,"pos":{"len":25,"line_nr":1099,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn not_found() Result","name":"not_found","parent_name":"","return_type":"Result","pos":{"len":25,"line_nr":1100,"pos":32844,"col":0,"last_line":1102},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"struct PoolParams[T] {\n\thandler    fn () T = unsafe { nil } @[required]\n\tnr_workers int = runtime.nr_jobs()\n}","name":"PoolParams","parent_name":"","return_type":"","pos":{"len":21,"line_nr":1199,"pos":35324,"col":0,"last_line":1202},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 database_pool creates a pool of database connections","is_multi":false,"pos":{"len":54,"line_nr":1204,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\vweb\\vweb.v","content":"fn database_pool[T](params PoolParams[T]) DatabasePool[T]","name":"database_pool","parent_name":"","return_type":"DatabasePool[T]","pos":{"len":61,"line_nr":1205,"pos":35495,"col":0,"last_line":1218},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:43"}