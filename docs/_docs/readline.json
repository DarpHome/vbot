{"module_name":"readline","description":"# Description\n\nThe `readline` module lets you await and read user input from a terminal in an easy and structured manner.\n\nThe module provides an easy way to prompt the user for questions or even make a REPL or an embedded console.\n\n# Usage:\n\n\n```v\nimport readline\n\nmut r := readline.Readline{}\nanswer := r.read_line('hello: ')!\nprintln(answer)\n```\n\nor just:\n\n```v\nimport readline { read_line }\n\ninput := read_line('What is your name: ')!\nprintln('Your name is: ${input}')\n```\n","contents":[{"attributes":{},"comments":[{"text":"\u0001 Readline is the key struct for reading and holding user input via a terminal.","is_multi":false,"pos":{"len":79,"line_nr":19,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: import readline { Readline }","is_multi":false,"pos":{"len":39,"line_nr":20,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 Only use standard os.get_line","is_multi":false,"pos":{"len":31,"line_nr":16,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Need implementation for readline capabilities","is_multi":false,"pos":{"len":47,"line_nr":17,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":18,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 read_line_utf8 blocks execution in a loop and awaits user input","is_multi":false,"pos":{"len":65,"line_nr":19,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 characters from a terminal until `EOF` or `Enter` key is encountered","is_multi":false,"pos":{"len":70,"line_nr":20,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 in the input stream.","is_multi":false,"pos":{"len":22,"line_nr":21,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 read_line_utf8 returns the complete input line as an UTF-8 encoded `[]rune` or","is_multi":false,"pos":{"len":80,"line_nr":22,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 an error if the line is empty.","is_multi":false,"pos":{"len":32,"line_nr":23,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The `prompt` `string` is output as a prefix text for the input capturing.","is_multi":false,"pos":{"len":75,"line_nr":24,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 read_line_utf8 is the main method of the `readline` module and `Readline` struct.","is_multi":false,"pos":{"len":83,"line_nr":25,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\readline\\readline_windows.c.v","content":"fn (mut r Readline) read_line_utf8(prompt string) ![]rune","name":"read_line_utf8","parent_name":"Readline","return_type":"![]rune","pos":{"len":61,"line_nr":26,"pos":955,"col":0,"last_line":46},"platform":"windows","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 read_line does the same as `read_line_utf8` but returns user input as a `string`.","is_multi":false,"pos":{"len":83,"line_nr":48,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 (As opposed to `[]rune` returned by `read_line_utf8`).","is_multi":false,"pos":{"len":56,"line_nr":49,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\readline\\readline_windows.c.v","content":"fn (mut r Readline) read_line(prompt string) !string","name":"read_line","parent_name":"Readline","return_type":"!string","pos":{"len":56,"line_nr":50,"pos":1579,"col":0,"last_line":53},"platform":"windows","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\readline\\readline.v","content":"struct Readline {\nmut:\n\tis_raw            bool\n\torig_termios      termios.Termios // Linux\n\tcurrent           []rune // Line being edited\n\tcursor            int    // Cursor position\n\toverwrite         bool\n\tcursor_row_offset int\n\tprompt            string\n\tprompt_offset     int\n\tprevious_lines    [][]rune\n\tskip_empty        bool // skip the empty lines when calling .history_previous()\n\tsearch_index      int\n\tis_tty            bool\n}","name":"Readline","parent_name":"","return_type":"","pos":{"len":19,"line_nr":21,"pos":574,"col":0,"last_line":35},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 read_line_utf8 blocks execution in a loop and awaits user input","is_multi":false,"pos":{"len":65,"line_nr":55,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 characters from a terminal until `EOF` or `Enter` key is encountered","is_multi":false,"pos":{"len":70,"line_nr":56,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 in the input stream.","is_multi":false,"pos":{"len":22,"line_nr":57,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 read_line_utf8 returns the complete input line as an UTF-8 encoded `[]rune` or","is_multi":false,"pos":{"len":80,"line_nr":58,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 an error if the line is empty.","is_multi":false,"pos":{"len":32,"line_nr":59,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The `prompt` `string` is output as a prefix text for the input capturing.","is_multi":false,"pos":{"len":75,"line_nr":60,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 read_line_utf8 is the main method of the `readline` module and `Readline` struct.","is_multi":false,"pos":{"len":83,"line_nr":61,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NOTE that this version of `read_line_utf8` is a standalone function without","is_multi":false,"pos":{"len":77,"line_nr":62,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 persistent functionalities (e.g. history).","is_multi":false,"pos":{"len":44,"line_nr":63,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\readline\\readline_windows.c.v","content":"fn read_line_utf8(prompt string) ![]rune","name":"read_line_utf8","parent_name":"","return_type":"![]rune","pos":{"len":44,"line_nr":64,"pos":2258,"col":0,"last_line":68},"platform":"windows","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 read_line does the same as `read_line_utf8` but returns user input as a `string`.","is_multi":false,"pos":{"len":83,"line_nr":70,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 (As opposed to `[]rune` as returned by `read_line_utf8`).","is_multi":false,"pos":{"len":59,"line_nr":71,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NOTE that this version of `read_line` is a standalone function without","is_multi":false,"pos":{"len":72,"line_nr":72,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 persistent functionalities (e.g. history).","is_multi":false,"pos":{"len":44,"line_nr":73,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\readline\\readline_windows.c.v","content":"fn read_line(prompt string) !string","name":"read_line","parent_name":"","return_type":"!string","pos":{"len":39,"line_nr":74,"pos":2637,"col":0,"last_line":78},"platform":"windows","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:36"}