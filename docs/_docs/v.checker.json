{"module_name":"v.checker","description":"","contents":[{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 array_builtin_methods contains a list of all methods on array, that return other typed arrays,","is_multi":false,"pos":{"len":96,"line_nr":26,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 i.e. that act as *pseudogeneric* methods, that need compiler support, so that the types of the results","is_multi":false,"pos":{"len":104,"line_nr":27,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 are properly checked.","is_multi":false,"pos":{"len":23,"line_nr":28,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that methods that do not return anything, or that return known types, are not listed here, since they are just ordinary non generic methods.","is_multi":false,"pos":{"len":147,"line_nr":29,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"const array_builtin_methods = ['filter', 'clone', 'repeat', 'reverse', 'map', 'slice', 'sort',\n\t'sorted', 'sorted_with_compare', 'contains', 'index', 'wait', 'any', 'all', 'first', 'last',\n\t'pop', 'delete']","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":30,"pos":1174,"col":0,"last_line":32},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"const array_builtin_methods_chk = token.new_keywords_matcher_from_array_trie(array_builtin_methods)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":33,"pos":1385,"col":0,"last_line":33},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO: remove `byte` from this list when it is no longer supported","is_multi":false,"pos":{"len":67,"line_nr":34,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"const reserved_type_names = ['byte', 'bool', 'char', 'i8', 'i16', 'int', 'i64', 'u8', 'u16',\n\t'u32', 'u64', 'f32', 'f64', 'map', 'string', 'rune', 'usize', 'isize', 'voidptr', 'thread']","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":35,"pos":1558,"col":0,"last_line":36},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"const reserved_type_names_chk = token.new_keywords_matcher_from_array_trie(reserved_type_names)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":37,"pos":1748,"col":0,"last_line":37},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"const vroot_is_deprecated_message = '@VROOT is deprecated, use @VMODROOT or @VEXEROOT instead'","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":38,"pos":1848,"col":0,"last_line":38},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"fn (mut c Checker) change_current_file(file &ast.File)","name":"change_current_file","parent_name":"Checker","return_type":"void","pos":{"len":58,"line_nr":299,"pos":12332,"col":0,"last_line":304},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"fn (mut c Checker) check(mut ast_file ast.File)","name":"check","parent_name":"Checker","return_type":"void","pos":{"len":51,"line_nr":192,"pos":9061,"col":0,"last_line":265},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 not used right now","is_multi":false,"pos":{"len":20,"line_nr":290,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"fn (mut c Checker) check2(mut ast_file ast.File) []errors.Error","name":"check2","parent_name":"Checker","return_type":"[]v.errors.Error","pos":{"len":67,"line_nr":291,"pos":12153,"col":0,"last_line":297},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"fn (mut c Checker) check_files(ast_files []&ast.File)","name":"check_files","parent_name":"Checker","return_type":"void","pos":{"len":57,"line_nr":306,"pos":12507,"col":0,"last_line":438},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"fn (mut c Checker) check_scope_vars(sc &ast.Scope)","name":"check_scope_vars","parent_name":"Checker","return_type":"void","pos":{"len":54,"line_nr":267,"pos":11490,"col":0,"last_line":288},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"fn (mut c Checker) expr(mut node ast.Expr) ast.Type","name":"expr","parent_name":"Checker","return_type":"v.ast.Type","pos":{"len":55,"line_nr":2578,"pos":84945,"col":0,"last_line":2959},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\lambda_expr.v","content":"fn (mut c Checker) lambda_expr(mut node ast.LambdaExpr, exp_typ ast.Type) ast.Type","name":"lambda_expr","parent_name":"Checker","return_type":"v.ast.Type","pos":{"len":86,"line_nr":4,"pos":30,"col":0,"last_line":120},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\lambda_expr.v","content":"fn (mut c Checker) lambda_expr_fix_type_of_param(mut node ast.LambdaExpr, mut pident ast.Ident, ptype ast.Type)","name":"lambda_expr_fix_type_of_param","parent_name":"Checker","return_type":"void","pos":{"len":115,"line_nr":122,"pos":3129,"col":0,"last_line":135},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\lambda_expr.v","content":"fn (mut c Checker) support_lambda_expr_in_sort(param_type ast.Type, return_type ast.Type, mut expr ast.LambdaExpr)","name":"support_lambda_expr_in_sort","parent_name":"Checker","return_type":"void","pos":{"len":118,"line_nr":137,"pos":3508,"col":0,"last_line":157},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\lambda_expr.v","content":"fn (mut c Checker) support_lambda_expr_one_param(param_type ast.Type, return_type ast.Type, mut expr ast.LambdaExpr)","name":"support_lambda_expr_one_param","parent_name":"Checker","return_type":"void","pos":{"len":120,"line_nr":159,"pos":4051,"col":0,"last_line":173},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"struct Checker {\npub mut:\n\tpref &pref.Preferences = unsafe { nil } // Preferences shared from V struct\n\t//\n\ttable &ast.Table = unsafe { nil }\n\tfile  &ast.File  = unsafe { nil }\n\t//\n\tnr_errors     int\n\tnr_warnings   int\n\tnr_notices    int\n\terrors        []errors.Error\n\twarnings      []errors.Warning\n\tnotices       []errors.Notice\n\terror_lines   map[string]bool // dedup errors\n\twarning_lines map[string]bool // dedup warns\n\tnotice_lines  map[string]bool // dedup notices\n\terror_details []string\n\tshould_abort  bool // when too many errors/warnings/notices are accumulated, .should_abort becomes true. It is checked in statement/expression loops, so the checker can return early, instead of wasting time.\n\t//\n\texpected_type              ast.Type\n\texpected_or_type           ast.Type        // fn() or { 'this type' } eg. string. expected or block type\n\texpected_expr_type         ast.Type        // if/match is_expr: expected_type\n\tmod                        string          // current module name\n\tconst_var                  &ast.ConstField = unsafe { nil } // the current constant, when checking const declarations\n\tconst_deps                 []string\n\tconst_names                []string\n\tglobal_names               []string\n\tlocked_names               []string // vars that are currently locked\n\trlocked_names              []string // vars that are currently read-locked\n\tin_for_count               int      // if checker is currently in a for loop\n\treturns                    bool\n\tscope_returns              bool\n\tis_builtin_mod             bool // true inside the 'builtin', 'os' or 'strconv' modules; TODO: remove the need for special casing this\n\tis_just_builtin_mod        bool // true only inside 'builtin'\n\tis_generated               bool // true for `[generated] module xyz` .v files\n\tinside_unsafe              bool // true inside `unsafe {}` blocks\n\tinside_const               bool // true inside `const ( ... )` blocks\n\tinside_anon_fn             bool // true inside `fn() { ... }()`\n\tinside_lambda              bool // true inside `|...| ...`\n\tinside_ref_lit             bool // true inside `a := &something`\n\tinside_defer               bool // true inside `defer {}` blocks\n\tinside_fn_arg              bool // `a`, `b` in `a.f(b)`\n\tinside_ct_attr             bool // true inside `[if expr]`\n\tinside_x_is_type           bool // true inside the Type expression of `if x is Type {`\n\tinside_generic_struct_init bool\n\tcur_struct_generic_types   []ast.Type\n\tcur_struct_concrete_types  []ast.Type\n\tskip_flags                 bool      // should `#flag` and `#include` be skipped\n\tfn_level                   int       // 0 for the top level, 1 for `fn abc() {}`, 2 for a nested fn, etc\n\tsmartcast_mut_pos          token.Pos // match mut foo, if mut foo is Foo\n\tsmartcast_cond_pos         token.Pos // match cond\n\tct_cond_stack              []ast.Expr\n\tct_user_defines            map[string]ComptimeBranchSkipState\n\tct_system_defines          map[string]ComptimeBranchSkipState\nmut:\n\tstmt_level int // the nesting level inside each stmts list;\n\t// .stmt_level is used to check for `evaluated but not used` ExprStmts like `1 << 1`\n\t// 1 for statements directly at each inner scope level;\n\t// increases for `x := if cond { statement_list1} else {statement_list2}`;\n\t// increases for `x := optfn() or { statement_list3 }`;\n\t// files                            []ast.File\n\texpr_level                       int // to avoid infinite recursion segfaults due to compiler bugs\n\tensure_generic_type_level        int // to avoid infinite recursion segfaults in ensure_generic_type_specify_type_names\n\tcur_orm_ts                       ast.TypeSymbol\n\tcur_anon_fn                      &ast.AnonFn = unsafe { nil }\n\tvmod_file_content                string     // needed for @VMOD_FILE, contents of the file, *NOT its path**\n\tloop_label                       string     // set when inside a labelled for loop\n\tvweb_gen_types                   []ast.Type // vweb route checks\n\ttimers                           &util.Timers = util.get_timers()\n\tcomptime_info_stack              []comptime.ComptimeInfo // stores the values from the above on each $for loop, to make nesting them easier\n\tcomptime                         comptime.ComptimeInfo\n\tfn_scope                         &ast.Scope = unsafe { nil }\n\tmain_fn_decl_node                ast.FnDecl\n\tmatch_exhaustive_cutoff_limit    int = 10\n\tis_last_stmt                     bool\n\tprevent_sum_type_unwrapping_once bool // needed for assign new values to sum type, stopping unwrapping then\n\tusing_new_err_struct             bool\n\tneed_recheck_generic_fns         bool // need recheck generic fns because there are cascaded nested generic fn\n\tinside_sql                       bool // to handle sql table fields pseudo variables\n\tinside_selector_expr             bool\n\tinside_interface_deref           bool\n\tinside_decl_rhs                  bool\n\tinside_if_guard                  bool // true inside the guard condition of `if x := opt() {}`\n\tinside_assign                    bool\n\t// doing_line_info                  int    // a quick single file run when called with v -line-info (contains line nr to inspect)\n\t// doing_line_path                  string // same, but stores the path being parsed\n\tis_index_assign   bool\n\tcomptime_call_pos int // needed for correctly checking use before decl for templates\n\tgoto_labels       map[string]ast.GotoLabel // to check for unused goto labels\n\tenum_data_type    ast.Type\n\tfield_data_type   ast.Type\n\tvariant_data_type ast.Type\n\tfn_return_type    ast.Type\n\torm_table_fields  map[string][]ast.StructField // known table structs\n\t//\n\tv_current_commit_hash string // same as old C.V_CURRENT_COMMIT_HASH\n}","name":"Checker","parent_name":"","return_type":"","pos":{"len":18,"line_nr":41,"pos":1964,"col":0,"last_line":137},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\checker\\checker.v","content":"fn new_checker(table &ast.Table, pref_ &pref.Preferences) &Checker","name":"new_checker","parent_name":"","return_type":"Checker","pos":{"len":70,"line_nr":139,"pos":7653,"col":0,"last_line":156},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:40"}