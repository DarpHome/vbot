{"module_name":"rand","contents":[{"attributes":{},"comments":[{"text":"\u0001 uuid_v4 generates a random (v4) UUID","is_multi":false,"pos":{"len":38,"line_nr":4,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)","is_multi":false,"pos":{"len":84,"line_nr":5,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.c.v","content":"fn uuid_v4() string","name":"uuid_v4","parent_name":"","return_type":"string","pos":{"len":23,"line_nr":6,"pos":208,"col":0,"last_line":8},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 PRNG is a common interface for all PRNGs that can be used seamlessly with the rand","is_multi":false,"pos":{"len":84,"line_nr":12,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 modules's API. It defines all the methods that a PRNG (in the vlib or custom made) must","is_multi":false,"pos":{"len":89,"line_nr":13,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 implement in order to ensure that _all_ functions can be used with the generator.","is_multi":false,"pos":{"len":83,"line_nr":14,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 bytes returns a buffer of `bytes_needed` random bytes","is_multi":false,"pos":{"len":55,"line_nr":26,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) bytes(bytes_needed int) ![]u8","name":"bytes","parent_name":"PRNG","return_type":"![]u8","pos":{"len":51,"line_nr":28,"pos":737,"col":0,"last_line":37},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 read fills in `buf` with a maximum of `buf.len` random bytes","is_multi":false,"pos":{"len":62,"line_nr":39,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) read(mut buf []u8)","name":"read","parent_name":"PRNG","return_type":"void","pos":{"len":40,"line_nr":40,"pos":1024,"col":0,"last_line":42},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u32n returns a uniformly distributed pseudorandom 32-bit signed positive `u32` in range `[0, max)`.","is_multi":false,"pos":{"len":101,"line_nr":44,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) u32n(max u32) !u32","name":"u32n","parent_name":"PRNG","return_type":"!u32","pos":{"len":40,"line_nr":46,"pos":1216,"col":0,"last_line":78},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u64n returns a uniformly distributed pseudorandom 64-bit signed positive `u64` in range `[0, max)`.","is_multi":false,"pos":{"len":101,"line_nr":80,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) u64n(max u64) !u64","name":"u64n","parent_name":"PRNG","return_type":"!u64","pos":{"len":40,"line_nr":82,"pos":2083,"col":0,"last_line":108},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u32_in_range returns a uniformly distributed pseudorandom 32-bit unsigned `u32` in range `[min, max)`.","is_multi":false,"pos":{"len":104,"line_nr":110,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) u32_in_range(min u32, max u32) !u32","name":"u32_in_range","parent_name":"PRNG","return_type":"!u32","pos":{"len":57,"line_nr":112,"pos":2674,"col":0,"last_line":117},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u64_in_range returns a uniformly distributed pseudorandom 64-bit unsigned `u64` in range `[min, max)`.","is_multi":false,"pos":{"len":104,"line_nr":119,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) u64_in_range(min u64, max u64) !u64","name":"u64_in_range","parent_name":"PRNG","return_type":"!u64","pos":{"len":57,"line_nr":121,"pos":2955,"col":0,"last_line":126},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i8 returns a (possibly negative) pseudorandom 8-bit `i8`.","is_multi":false,"pos":{"len":59,"line_nr":128,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) i8() i8","name":"i8","parent_name":"PRNG","return_type":"i8","pos":{"len":29,"line_nr":130,"pos":3191,"col":0,"last_line":132},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i16 returns a (possibly negative) pseudorandom 16-bit `i16`.","is_multi":false,"pos":{"len":62,"line_nr":134,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) i16() i16","name":"i16","parent_name":"PRNG","return_type":"i16","pos":{"len":31,"line_nr":136,"pos":3321,"col":0,"last_line":138},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 int returns a (possibly negative) pseudorandom 32-bit `int`.","is_multi":false,"pos":{"len":62,"line_nr":140,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) int() int","name":"int","parent_name":"PRNG","return_type":"int","pos":{"len":31,"line_nr":142,"pos":3455,"col":0,"last_line":144},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64 returns a (possibly negative) pseudorandom 64-bit `i64`.","is_multi":false,"pos":{"len":62,"line_nr":146,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) i64() i64","name":"i64","parent_name":"PRNG","return_type":"i64","pos":{"len":31,"line_nr":148,"pos":3589,"col":0,"last_line":150},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 int31 returns a positive pseudorandom 31-bit `int`.","is_multi":false,"pos":{"len":53,"line_nr":152,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) int31() int","name":"int31","parent_name":"PRNG","return_type":"int","pos":{"len":33,"line_nr":154,"pos":3714,"col":0,"last_line":156},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 int63 returns a positive pseudorandom 63-bit `i64`.","is_multi":false,"pos":{"len":53,"line_nr":158,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) int63() i64","name":"int63","parent_name":"PRNG","return_type":"i64","pos":{"len":33,"line_nr":160,"pos":3888,"col":0,"last_line":162},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 intn returns a pseudorandom `int` in range `[0, max)`.","is_multi":false,"pos":{"len":56,"line_nr":164,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) intn(max int) !int","name":"intn","parent_name":"PRNG","return_type":"!int","pos":{"len":40,"line_nr":166,"pos":4065,"col":0,"last_line":171},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64n returns a pseudorandom int that lies in `[0, max)`.","is_multi":false,"pos":{"len":58,"line_nr":173,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) i64n(max i64) !i64","name":"i64n","parent_name":"PRNG","return_type":"!i64","pos":{"len":40,"line_nr":175,"pos":4274,"col":0,"last_line":180},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 int_in_range returns a pseudorandom `int` in range `[min, max)`.","is_multi":false,"pos":{"len":66,"line_nr":182,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) int_in_range(min int, max int) !int","name":"int_in_range","parent_name":"PRNG","return_type":"!int","pos":{"len":57,"line_nr":184,"pos":4491,"col":0,"last_line":190},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64_in_range returns a pseudorandom `i64` in range `[min, max)`.","is_multi":false,"pos":{"len":66,"line_nr":192,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) i64_in_range(min i64, max i64) !i64","name":"i64_in_range","parent_name":"PRNG","return_type":"!i64","pos":{"len":57,"line_nr":194,"pos":4818,"col":0,"last_line":199},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32 returns a pseudorandom `f32` value in range `[0, 1)`","is_multi":false,"pos":{"len":58,"line_nr":201,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 using rng.u32() multiplied by an f64 constant.","is_multi":false,"pos":{"len":48,"line_nr":202,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) f32() f32","name":"f32","parent_name":"PRNG","return_type":"f32","pos":{"len":31,"line_nr":204,"pos":5103,"col":0,"last_line":206},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32cp returns a pseudorandom `f32` value in range `[0, 1)`","is_multi":false,"pos":{"len":60,"line_nr":208,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 with full precision (mantissa random between 0 and 1","is_multi":false,"pos":{"len":54,"line_nr":209,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and the exponent varies as well.)","is_multi":false,"pos":{"len":35,"line_nr":210,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See https://allendowney.com/research/rand/ for background on the method.","is_multi":false,"pos":{"len":74,"line_nr":211,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) f32cp() f32","name":"f32cp","parent_name":"PRNG","return_type":"f32","pos":{"len":33,"line_nr":213,"pos":5441,"col":0,"last_line":240},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64 returns a pseudorandom `f64` value in range `[0, 1)`","is_multi":false,"pos":{"len":58,"line_nr":242,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 using rng.u64() multiplied by a constant.","is_multi":false,"pos":{"len":43,"line_nr":243,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) f64() f64","name":"f64","parent_name":"PRNG","return_type":"f64","pos":{"len":31,"line_nr":245,"pos":6163,"col":0,"last_line":247},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64cp returns a pseudorandom `f64` value in range `[0, 1)`","is_multi":false,"pos":{"len":60,"line_nr":249,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 with full precision (mantissa random between 0 and 1","is_multi":false,"pos":{"len":54,"line_nr":250,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and the exponent varies as well.)","is_multi":false,"pos":{"len":35,"line_nr":251,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See https://allendowney.com/research/rand/ for background on the method.","is_multi":false,"pos":{"len":74,"line_nr":252,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) f64cp() f64","name":"f64cp","parent_name":"PRNG","return_type":"f64","pos":{"len":33,"line_nr":254,"pos":6502,"col":0,"last_line":280},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32n returns a pseudorandom `f32` value in range `[0, max]`.","is_multi":false,"pos":{"len":62,"line_nr":282,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) f32n(max f32) !f32","name":"f32n","parent_name":"PRNG","return_type":"!f32","pos":{"len":40,"line_nr":284,"pos":7094,"col":0,"last_line":289},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64n returns a pseudorandom `f64` value in range `[0, max]`.","is_multi":false,"pos":{"len":62,"line_nr":291,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) f64n(max f64) !f64","name":"f64n","parent_name":"PRNG","return_type":"!f64","pos":{"len":40,"line_nr":293,"pos":7301,"col":0,"last_line":298},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32_in_range returns a pseudorandom `f32` in range `[min, max]`.","is_multi":false,"pos":{"len":66,"line_nr":300,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) f32_in_range(min f32, max f32) !f32","name":"f32_in_range","parent_name":"PRNG","return_type":"!f32","pos":{"len":57,"line_nr":302,"pos":7512,"col":0,"last_line":307},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64_in_range returns a pseudorandom `i64` in range `[min, max]`.","is_multi":false,"pos":{"len":66,"line_nr":309,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) f64_in_range(min f64, max f64) !f64","name":"f64_in_range","parent_name":"PRNG","return_type":"!f64","pos":{"len":57,"line_nr":311,"pos":7766,"col":0,"last_line":316},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ulid generates an Unique Lexicographically sortable IDentifier.","is_multi":false,"pos":{"len":65,"line_nr":318,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See https://github.com/ulid/spec .","is_multi":false,"pos":{"len":36,"line_nr":319,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: ULIDs can leak timing information, if you make them public, because","is_multi":false,"pos":{"len":75,"line_nr":320,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 you can infer the rate at which some resource is being created, like","is_multi":false,"pos":{"len":70,"line_nr":321,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 users or business transactions.","is_multi":false,"pos":{"len":33,"line_nr":322,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 (https://news.ycombinator.com/item?id=14526173)","is_multi":false,"pos":{"len":49,"line_nr":323,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) ulid() string","name":"ulid","parent_name":"PRNG","return_type":"string","pos":{"len":35,"line_nr":324,"pos":8282,"col":0,"last_line":326},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ulid_at_millisecond does the same as `ulid` but takes a custom Unix millisecond timestamp via `unix_time_milli`.","is_multi":false,"pos":{"len":114,"line_nr":328,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) ulid_at_millisecond(unix_time_milli u64) string","name":"ulid_at_millisecond","parent_name":"PRNG","return_type":"string","pos":{"len":69,"line_nr":329,"pos":8520,"col":0,"last_line":331},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 string_from_set returns a string of length `len` containing random characters sampled from the given `charset`","is_multi":false,"pos":{"len":112,"line_nr":333,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) string_from_set(charset string, len int) string","name":"string_from_set","parent_name":"PRNG","return_type":"string","pos":{"len":69,"line_nr":334,"pos":8772,"col":0,"last_line":336},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 string returns a string of length `len` containing random characters in range `[a-zA-Z]`.","is_multi":false,"pos":{"len":91,"line_nr":338,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) string(len int) string","name":"string","parent_name":"PRNG","return_type":"string","pos":{"len":44,"line_nr":339,"pos":8996,"col":0,"last_line":341},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 hex returns a hexadecimal number of length `len` containing random characters in range `[a-f0-9]`.","is_multi":false,"pos":{"len":100,"line_nr":343,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) hex(len int) string","name":"hex","parent_name":"PRNG","return_type":"string","pos":{"len":41,"line_nr":344,"pos":9217,"col":0,"last_line":346},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ascii returns a random string of the printable ASCII characters with length `len`.","is_multi":false,"pos":{"len":84,"line_nr":348,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) ascii(len int) string","name":"ascii","parent_name":"PRNG","return_type":"string","pos":{"len":43,"line_nr":349,"pos":9413,"col":0,"last_line":351},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bernoulli returns true with a probability p. Note that 0 <= p <= 1.","is_multi":false,"pos":{"len":69,"line_nr":353,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) bernoulli(p f64) !bool","name":"bernoulli","parent_name":"PRNG","return_type":"!bool","pos":{"len":44,"line_nr":354,"pos":9598,"col":0,"last_line":359},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 normal returns a normally distributed pseudorandom f64 with mean `mu` and standard","is_multi":false,"pos":{"len":84,"line_nr":361,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 deviation `sigma`. By default, `mu` is 0.0 and `sigma` is 1.0.","is_multi":false,"pos":{"len":64,"line_nr":362,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NOTE: Use normal_pair() instead if you're generating a lot of normal variates.","is_multi":false,"pos":{"len":80,"line_nr":363,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) normal(conf config.NormalConfigStruct) !f64","name":"normal","parent_name":"PRNG","return_type":"!f64","pos":{"len":65,"line_nr":364,"pos":9986,"col":0,"last_line":367},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 normal_pair returns a pair of normally distributed pseudorandom f64 with mean `mu` and standard","is_multi":false,"pos":{"len":97,"line_nr":369,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 deviation `sigma`. By default, `mu` is 0.0 and `sigma` is 1.0.","is_multi":false,"pos":{"len":64,"line_nr":370,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) normal_pair(conf config.NormalConfigStruct) !(f64, f64)","name":"normal_pair","parent_name":"PRNG","return_type":"!(f64, f64)","pos":{"len":77,"line_nr":371,"pos":10264,"col":0,"last_line":392},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 binomial returns the number of successful trials out of n when the","is_multi":false,"pos":{"len":68,"line_nr":394,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 probability of success for each trial is p.","is_multi":false,"pos":{"len":45,"line_nr":395,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) binomial(n int, p f64) !int","name":"binomial","parent_name":"PRNG","return_type":"!int","pos":{"len":49,"line_nr":396,"pos":11043,"col":0,"last_line":407},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 exponential returns an exponentially distributed random number with the rate parameter","is_multi":false,"pos":{"len":88,"line_nr":409,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 lambda. It is expected that lambda is positive.","is_multi":false,"pos":{"len":49,"line_nr":410,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) exponential(lambda f64) f64","name":"exponential","parent_name":"PRNG","return_type":"f64","pos":{"len":49,"line_nr":411,"pos":11412,"col":0,"last_line":417},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 shuffle randomly permutates the elements in `a`. The range for shuffling is","is_multi":false,"pos":{"len":77,"line_nr":419,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 optional and the entire array is shuffled by default. Leave the end as 0 to","is_multi":false,"pos":{"len":77,"line_nr":420,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 shuffle all elements until the end.","is_multi":false,"pos":{"len":37,"line_nr":421,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) shuffle[T](mut a []T, config_ config.ShuffleConfigStruct) !","name":"shuffle","parent_name":"PRNG","return_type":"!","pos":{"len":81,"line_nr":423,"pos":11835,"col":0,"last_line":437},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 shuffle_clone returns a random permutation of the elements in `a`.","is_multi":false,"pos":{"len":68,"line_nr":439,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The permutation is done on a fresh clone of `a`, so `a` remains unchanged.","is_multi":false,"pos":{"len":76,"line_nr":440,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) shuffle_clone[T](a []T, config_ config.ShuffleConfigStruct) ![]T","name":"shuffle_clone","parent_name":"PRNG","return_type":"![]T","pos":{"len":86,"line_nr":441,"pos":12428,"col":0,"last_line":445},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 choose samples k elements from the array without replacement.","is_multi":false,"pos":{"len":63,"line_nr":447,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This means the indices cannot repeat and it restricts the sample size to be less than or equal to the size of the given array.","is_multi":false,"pos":{"len":128,"line_nr":448,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that if the array has repeating elements, then the sample may have repeats as well.","is_multi":false,"pos":{"len":90,"line_nr":449,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) choose[T](array []T, k int) ![]T","name":"choose","parent_name":"PRNG","return_type":"![]T","pos":{"len":54,"line_nr":450,"pos":12876,"col":0,"last_line":462},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 element returns a random element from the given array.","is_multi":false,"pos":{"len":56,"line_nr":464,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that all the positions in the array have an equal chance of being selected. This means that if the array has repeating elements, then the probability of selecting a particular element is not uniform.","is_multi":false,"pos":{"len":206,"line_nr":465,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) element[T](array []T) !T","name":"element","parent_name":"PRNG","return_type":"!T","pos":{"len":46,"line_nr":466,"pos":13500,"col":0,"last_line":471},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sample samples k elements from the array with replacement.","is_multi":false,"pos":{"len":60,"line_nr":473,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This means the elements can repeat and the size of the sample may exceed the size of the array.","is_multi":false,"pos":{"len":97,"line_nr":474,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn (mut rng PRNG) sample[T](array []T, k int) []T","name":"sample","parent_name":"PRNG","return_type":"[]T","pos":{"len":53,"line_nr":475,"pos":13837,"col":0,"last_line":481},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"interface PRNG {\nmut:\n\tseed(seed_data []u32)\n\tu8() u8\n\tu16() u16\n\tu32() u32\n\tu64() u64\n\tblock_size() int\n\tfree()\n}","name":"PRNG","parent_name":"","return_type":"","pos":{"len":118,"line_nr":15,"pos":550,"col":0,"last_line":24},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_default returns a new instance of the default RNG. If the seed is not provided, the current time will be used to seed the instance.","is_multi":false,"pos":{"len":137,"line_nr":485,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn new_default(config_ config.PRNGConfigStruct) &PRNG","name":"new_default","parent_name":"","return_type":"PRNG","pos":{"len":57,"line_nr":487,"pos":14194,"col":0,"last_line":492},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_current_rng returns the PRNG instance currently in use. If it is not changed, it will be an instance of wyrand.WyRandRNG.","is_multi":false,"pos":{"len":127,"line_nr":494,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn get_current_rng() &PRNG","name":"get_current_rng","parent_name":"","return_type":"PRNG","pos":{"len":30,"line_nr":495,"pos":14495,"col":0,"last_line":497},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_rng changes the default RNG from wyrand.WyRandRNG (or whatever the last RNG was) to the one","is_multi":false,"pos":{"len":97,"line_nr":499,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 provided by the user. Note that this new RNG must be seeded manually with a constant seed or the","is_multi":false,"pos":{"len":98,"line_nr":500,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `seed.time_seed_array()` method. Also, it is recommended to store the old RNG in a variable and","is_multi":false,"pos":{"len":97,"line_nr":501,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 should be restored if work with the custom RNG is complete. It is not necessary to restore if the","is_multi":false,"pos":{"len":99,"line_nr":502,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 program terminates soon afterwards.","is_multi":false,"pos":{"len":37,"line_nr":503,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn set_rng(rng &PRNG)","name":"set_rng","parent_name":"","return_type":"void","pos":{"len":25,"line_nr":504,"pos":14989,"col":0,"last_line":506},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 seed sets the given array of `u32` values as the seed for the `default_rng`. The default_rng is","is_multi":false,"pos":{"len":97,"line_nr":508,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 an instance of WyRandRNG which takes 2 u32 values. When using a custom RNG, make sure to use","is_multi":false,"pos":{"len":94,"line_nr":509,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the correct number of u32s.","is_multi":false,"pos":{"len":29,"line_nr":510,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn seed(seed []u32)","name":"seed","parent_name":"","return_type":"void","pos":{"len":23,"line_nr":511,"pos":15276,"col":0,"last_line":513},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u8 returns a uniformly distributed pseudorandom 8-bit unsigned positive `u8`.","is_multi":false,"pos":{"len":79,"line_nr":515,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn u8() u8","name":"u8","parent_name":"","return_type":"u8","pos":{"len":14,"line_nr":516,"pos":15410,"col":0,"last_line":518},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u16 returns a uniformly distributed pseudorandom 16-bit unsigned positive `u16`.","is_multi":false,"pos":{"len":82,"line_nr":520,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn u16() u16","name":"u16","parent_name":"","return_type":"u16","pos":{"len":16,"line_nr":521,"pos":15539,"col":0,"last_line":523},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u32 returns a uniformly distributed `u32` in range `[0, 2³²)`.","is_multi":false,"pos":{"len":66,"line_nr":525,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn u32() u32","name":"u32","parent_name":"","return_type":"u32","pos":{"len":16,"line_nr":526,"pos":15655,"col":0,"last_line":528},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u64 returns a uniformly distributed `u64` in range `[0, 2⁶⁴)`.","is_multi":false,"pos":{"len":68,"line_nr":530,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn u64() u64","name":"u64","parent_name":"","return_type":"u64","pos":{"len":16,"line_nr":531,"pos":15773,"col":0,"last_line":533},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u32n returns a uniformly distributed pseudorandom 32-bit signed positive `u32` in range `[0, max)`.","is_multi":false,"pos":{"len":101,"line_nr":535,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn u32n(max u32) !u32","name":"u32n","parent_name":"","return_type":"!u32","pos":{"len":25,"line_nr":536,"pos":15924,"col":0,"last_line":538},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u64n returns a uniformly distributed pseudorandom 64-bit signed positive `u64` in range `[0, max)`.","is_multi":false,"pos":{"len":101,"line_nr":540,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn u64n(max u64) !u64","name":"u64n","parent_name":"","return_type":"!u64","pos":{"len":25,"line_nr":541,"pos":16088,"col":0,"last_line":543},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u32_in_range returns a uniformly distributed pseudorandom 32-bit unsigned `u32` in range `[min, max)`.","is_multi":false,"pos":{"len":104,"line_nr":545,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn u32_in_range(min u32, max u32) !u32","name":"u32_in_range","parent_name":"","return_type":"!u32","pos":{"len":42,"line_nr":546,"pos":16255,"col":0,"last_line":548},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u64_in_range returns a uniformly distributed pseudorandom 64-bit unsigned `u64` in range `[min, max)`.","is_multi":false,"pos":{"len":104,"line_nr":550,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn u64_in_range(min u64, max u64) !u64","name":"u64_in_range","parent_name":"","return_type":"!u64","pos":{"len":42,"line_nr":551,"pos":16452,"col":0,"last_line":553},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i16 returns a uniformly distributed pseudorandom 16-bit signed (possibly negative) `i16`.","is_multi":false,"pos":{"len":91,"line_nr":555,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn i16() i16","name":"i16","parent_name":"","return_type":"i16","pos":{"len":16,"line_nr":556,"pos":16636,"col":0,"last_line":558},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 int returns a uniformly distributed pseudorandom 32-bit signed (possibly negative) `int`.","is_multi":false,"pos":{"len":91,"line_nr":560,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn int() int","name":"int","parent_name":"","return_type":"int","pos":{"len":16,"line_nr":561,"pos":16777,"col":0,"last_line":563},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 intn returns a uniformly distributed pseudorandom 32-bit signed positive `int` in range `[0, max)`.","is_multi":false,"pos":{"len":101,"line_nr":565,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn intn(max int) !int","name":"intn","parent_name":"","return_type":"!int","pos":{"len":25,"line_nr":566,"pos":16928,"col":0,"last_line":568},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 int_in_range returns a uniformly distributed pseudorandom  32-bit signed int in range `[min, max)`.","is_multi":false,"pos":{"len":101,"line_nr":570,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Both `min` and `max` can be negative, but we must have `min < max`.","is_multi":false,"pos":{"len":69,"line_nr":571,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn int_in_range(min int, max int) !int","name":"int_in_range","parent_name":"","return_type":"!int","pos":{"len":42,"line_nr":572,"pos":17163,"col":0,"last_line":574},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 int31 returns a uniformly distributed pseudorandom 31-bit signed positive `int`.","is_multi":false,"pos":{"len":82,"line_nr":576,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn int31() int","name":"int31","parent_name":"","return_type":"int","pos":{"len":18,"line_nr":577,"pos":17338,"col":0,"last_line":579},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64 returns a uniformly distributed pseudorandom 64-bit signed (possibly negative) `i64`.","is_multi":false,"pos":{"len":91,"line_nr":581,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn i64() i64","name":"i64","parent_name":"","return_type":"i64","pos":{"len":16,"line_nr":582,"pos":17483,"col":0,"last_line":584},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64n returns a uniformly distributed pseudorandom 64-bit signed positive `i64` in range `[0, max)`.","is_multi":false,"pos":{"len":101,"line_nr":586,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn i64n(max i64) !i64","name":"i64n","parent_name":"","return_type":"!i64","pos":{"len":25,"line_nr":587,"pos":17634,"col":0,"last_line":589},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64_in_range returns a uniformly distributed pseudorandom 64-bit signed `i64` in range `[min, max)`.","is_multi":false,"pos":{"len":102,"line_nr":591,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn i64_in_range(min i64, max i64) !i64","name":"i64_in_range","parent_name":"","return_type":"!i64","pos":{"len":42,"line_nr":592,"pos":17799,"col":0,"last_line":594},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 int63 returns a uniformly distributed pseudorandom 63-bit signed positive `i64`.","is_multi":false,"pos":{"len":82,"line_nr":596,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn int63() i64","name":"int63","parent_name":"","return_type":"i64","pos":{"len":18,"line_nr":597,"pos":17974,"col":0,"last_line":599},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32 returns a uniformly distributed 32-bit floating point in range `[0, 1)`.","is_multi":false,"pos":{"len":78,"line_nr":601,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn f32() f32","name":"f32","parent_name":"","return_type":"f32","pos":{"len":16,"line_nr":602,"pos":18106,"col":0,"last_line":604},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32cp returns a uniformly distributed 32-bit floating point in range `[0, 1)`","is_multi":false,"pos":{"len":79,"line_nr":606,"pos":0,"col":0,"last_line":0}},{"text":"\u0001  with full precision mantissa.","is_multi":false,"pos":{"len":32,"line_nr":607,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn f32cp() f32","name":"f32cp","parent_name":"","return_type":"f32","pos":{"len":18,"line_nr":608,"pos":18269,"col":0,"last_line":610},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64 returns a uniformly distributed 64-bit floating point in range `[0, 1)`.","is_multi":false,"pos":{"len":78,"line_nr":612,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn f64() f64","name":"f64","parent_name":"","return_type":"f64","pos":{"len":16,"line_nr":613,"pos":18401,"col":0,"last_line":615},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64 returns a uniformly distributed 64-bit floating point in range `[0, 1)`","is_multi":false,"pos":{"len":77,"line_nr":617,"pos":0,"col":0,"last_line":0}},{"text":"\u0001  with full precision mantissa.","is_multi":false,"pos":{"len":32,"line_nr":618,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn f64cp() f64","name":"f64cp","parent_name":"","return_type":"f64","pos":{"len":18,"line_nr":619,"pos":18562,"col":0,"last_line":621},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32n returns a uniformly distributed 32-bit floating point in range `[0, max)`.","is_multi":false,"pos":{"len":81,"line_nr":623,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn f32n(max f32) !f32","name":"f32n","parent_name":"","return_type":"!f32","pos":{"len":25,"line_nr":624,"pos":18697,"col":0,"last_line":626},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64n returns a uniformly distributed 64-bit floating point in range `[0, max)`.","is_multi":false,"pos":{"len":81,"line_nr":628,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn f64n(max f64) !f64","name":"f64n","parent_name":"","return_type":"!f64","pos":{"len":25,"line_nr":629,"pos":18841,"col":0,"last_line":631},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32_in_range returns a uniformly distributed 32-bit floating point in range `[min, max)`.","is_multi":false,"pos":{"len":91,"line_nr":633,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn f32_in_range(min f32, max f32) !f32","name":"f32_in_range","parent_name":"","return_type":"!f32","pos":{"len":42,"line_nr":634,"pos":18995,"col":0,"last_line":636},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64_in_range returns a uniformly distributed 64-bit floating point in range `[min, max)`.","is_multi":false,"pos":{"len":91,"line_nr":638,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn f64_in_range(min f64, max f64) !f64","name":"f64_in_range","parent_name":"","return_type":"!f64","pos":{"len":42,"line_nr":639,"pos":19179,"col":0,"last_line":641},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bytes returns a buffer of `bytes_needed` random bytes","is_multi":false,"pos":{"len":55,"line_nr":643,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn bytes(bytes_needed int) ![]u8","name":"bytes","parent_name":"","return_type":"![]u8","pos":{"len":36,"line_nr":644,"pos":19327,"col":0,"last_line":646},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 read fills in `buf` a maximum of `buf.len` random bytes","is_multi":false,"pos":{"len":57,"line_nr":648,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn read(mut buf []u8)","name":"read","parent_name":"","return_type":"void","pos":{"len":25,"line_nr":649,"pos":19468,"col":0,"last_line":651},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ulid generates an Unique Lexicographically sortable IDentifier.","is_multi":false,"pos":{"len":65,"line_nr":657,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See https://github.com/ulid/spec .","is_multi":false,"pos":{"len":36,"line_nr":658,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: ULIDs can leak timing information, if you make them public, because","is_multi":false,"pos":{"len":75,"line_nr":659,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 you can infer the rate at which some resource is being created, like","is_multi":false,"pos":{"len":70,"line_nr":660,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 users or business transactions.","is_multi":false,"pos":{"len":33,"line_nr":661,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 (https://news.ycombinator.com/item?id=14526173)","is_multi":false,"pos":{"len":49,"line_nr":662,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn ulid() string","name":"ulid","parent_name":"","return_type":"string","pos":{"len":20,"line_nr":663,"pos":20114,"col":0,"last_line":665},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ulid_at_millisecond does the same as `ulid` but takes a custom Unix millisecond timestamp via `unix_time_milli`.","is_multi":false,"pos":{"len":114,"line_nr":667,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn ulid_at_millisecond(unix_time_milli u64) string","name":"ulid_at_millisecond","parent_name":"","return_type":"string","pos":{"len":54,"line_nr":668,"pos":20283,"col":0,"last_line":670},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 string_from_set returns a string of length `len` containing random characters sampled from the given `charset`","is_multi":false,"pos":{"len":112,"line_nr":672,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn string_from_set(charset string, len int) string","name":"string_from_set","parent_name":"","return_type":"string","pos":{"len":54,"line_nr":673,"pos":20514,"col":0,"last_line":675},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 string returns a string of length `len` containing random characters in range `[a-zA-Z]`.","is_multi":false,"pos":{"len":91,"line_nr":677,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn string(len int) string","name":"string","parent_name":"","return_type":"string","pos":{"len":29,"line_nr":678,"pos":20717,"col":0,"last_line":680},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 hex returns a hexadecimal number of length `len` containing random characters in range `[a-f0-9]`.","is_multi":false,"pos":{"len":100,"line_nr":682,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn hex(len int) string","name":"hex","parent_name":"","return_type":"string","pos":{"len":26,"line_nr":683,"pos":20905,"col":0,"last_line":685},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ascii returns a random string of the printable ASCII characters with length `len`.","is_multi":false,"pos":{"len":84,"line_nr":687,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn ascii(len int) string","name":"ascii","parent_name":"","return_type":"string","pos":{"len":28,"line_nr":688,"pos":21068,"col":0,"last_line":690},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 shuffle randomly permutates the elements in `a`. The range for shuffling is","is_multi":false,"pos":{"len":77,"line_nr":692,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 optional and the entire array is shuffled by default. Leave the end as 0 to","is_multi":false,"pos":{"len":77,"line_nr":693,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 shuffle all elements until the end.","is_multi":false,"pos":{"len":37,"line_nr":694,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn shuffle[T](mut a []T, config_ config.ShuffleConfigStruct) !","name":"shuffle","parent_name":"","return_type":"!","pos":{"len":66,"line_nr":695,"pos":21346,"col":0,"last_line":697},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 shuffle_clone returns a random permutation of the elements in `a`.","is_multi":false,"pos":{"len":68,"line_nr":699,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The permutation is done on a fresh clone of `a`, so `a` remains unchanged.","is_multi":false,"pos":{"len":76,"line_nr":700,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn shuffle_clone[T](a []T, config_ config.ShuffleConfigStruct) ![]T","name":"shuffle_clone","parent_name":"","return_type":"![]T","pos":{"len":71,"line_nr":701,"pos":21607,"col":0,"last_line":703},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 choose samples k elements from the array without replacement.","is_multi":false,"pos":{"len":63,"line_nr":705,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This means the indices cannot repeat and it restricts the sample size to be less than or equal to the size of the given array.","is_multi":false,"pos":{"len":128,"line_nr":706,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that if the array has repeating elements, then the sample may have repeats as well.","is_multi":false,"pos":{"len":90,"line_nr":707,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn choose[T](array []T, k int) ![]T","name":"choose","parent_name":"","return_type":"![]T","pos":{"len":39,"line_nr":708,"pos":22020,"col":0,"last_line":710},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 element returns a random element from the given array.","is_multi":false,"pos":{"len":56,"line_nr":712,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that all the positions in the array have an equal chance of being selected. This means that if the array has repeating elements, then the probability of selecting a particular element is not uniform.","is_multi":false,"pos":{"len":206,"line_nr":713,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn element[T](array []T) !T","name":"element","parent_name":"","return_type":"!T","pos":{"len":31,"line_nr":714,"pos":22371,"col":0,"last_line":716},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sample samples k elements from the array with replacement.","is_multi":false,"pos":{"len":60,"line_nr":718,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This means the elements can repeat and the size of the sample may exceed the size of the array.","is_multi":false,"pos":{"len":97,"line_nr":719,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn sample[T](array []T, k int) []T","name":"sample","parent_name":"","return_type":"[]T","pos":{"len":38,"line_nr":720,"pos":22607,"col":0,"last_line":722},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bernoulli returns true with a probability p. Note that 0 <= p <= 1.","is_multi":false,"pos":{"len":69,"line_nr":724,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn bernoulli(p f64) !bool","name":"bernoulli","parent_name":"","return_type":"!bool","pos":{"len":29,"line_nr":725,"pos":22762,"col":0,"last_line":727},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 normal returns a normally distributed pseudorandom f64 with mean `mu` and standard","is_multi":false,"pos":{"len":84,"line_nr":729,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 deviation `sigma`. By default, `mu` is 0.0 and `sigma` is 1.0.","is_multi":false,"pos":{"len":64,"line_nr":730,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NOTE: Use normal_pair() instead if you're generating a lot of normal variates.","is_multi":false,"pos":{"len":80,"line_nr":731,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn normal(config_ config.NormalConfigStruct) !f64","name":"normal","parent_name":"","return_type":"!f64","pos":{"len":53,"line_nr":732,"pos":23064,"col":0,"last_line":734},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 normal_pair returns a pair of normally distributed pseudorandom f64 with mean `mu` and standard","is_multi":false,"pos":{"len":97,"line_nr":736,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 deviation `sigma`. By default, `mu` is 0.0 and `sigma` is 1.0.","is_multi":false,"pos":{"len":64,"line_nr":737,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn normal_pair(config_ config.NormalConfigStruct) !(f64, f64)","name":"normal_pair","parent_name":"","return_type":"!(f64, f64)","pos":{"len":65,"line_nr":738,"pos":23324,"col":0,"last_line":740},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 binomial returns the number of successful trials out of n when the","is_multi":false,"pos":{"len":68,"line_nr":742,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 probability of success for each trial is p.","is_multi":false,"pos":{"len":45,"line_nr":743,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn binomial(n int, p f64) !int","name":"binomial","parent_name":"","return_type":"!int","pos":{"len":34,"line_nr":744,"pos":23553,"col":0,"last_line":746},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 exponential returns an exponentially distributed random number with the rate parameter","is_multi":false,"pos":{"len":88,"line_nr":748,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 lambda. It is expected that lambda is positive.","is_multi":false,"pos":{"len":49,"line_nr":749,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\rand.v","content":"fn exponential(lambda f64) f64","name":"exponential","parent_name":"","return_type":"f64","pos":{"len":34,"line_nr":750,"pos":23769,"col":0,"last_line":752},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-02-05 19:45:35"}