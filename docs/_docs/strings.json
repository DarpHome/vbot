{"module_name":"strings","contents":[{"attributes":{},"comments":[{"text":"\u0001 strings.Builder is used to efficiently append many strings to a large","is_multi":false,"pos":{"len":71,"line_nr":5,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 dynamically growing buffer, then use the resulting large string. Using","is_multi":false,"pos":{"len":72,"line_nr":6,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 a string builder is much better for performance/memory usage than doing","is_multi":false,"pos":{"len":73,"line_nr":7,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 constantly string concatenation.","is_multi":false,"pos":{"len":34,"line_nr":8,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 reuse_as_plain_u8_array allows using the Builder instance as a plain []u8 return value.","is_multi":false,"pos":{"len":89,"line_nr":18,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It is useful, when you have accumulated data in the builder, that you want to","is_multi":false,"pos":{"len":79,"line_nr":19,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 pass/access as []u8 later, without copying or freeing the buffer.","is_multi":false,"pos":{"len":67,"line_nr":20,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NB: you *should NOT use* the string builder instance after calling this method.","is_multi":false,"pos":{"len":81,"line_nr":21,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Use only the return value after calling this method.","is_multi":false,"pos":{"len":54,"line_nr":22,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) reuse_as_plain_u8_array() []u8","name":"reuse_as_plain_u8_array","parent_name":"Builder","return_type":"[]u8","pos":{"len":53,"line_nr":24,"pos":1091,"col":0,"last_line":27},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 write_ptr writes `len` bytes provided byteptr to the accumulated buffer","is_multi":false,"pos":{"len":73,"line_nr":29,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) write_ptr(ptr &u8, len int)","name":"write_ptr","parent_name":"Builder","return_type":"void","pos":{"len":50,"line_nr":31,"pos":1283,"col":0,"last_line":36},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 write_rune appends a single rune to the accumulated buffer","is_multi":false,"pos":{"len":60,"line_nr":38,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) write_rune(r rune)","name":"write_rune","parent_name":"Builder","return_type":"void","pos":{"len":41,"line_nr":40,"pos":1476,"col":0,"last_line":47},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 write_runes appends all the given runes to the accumulated buffer","is_multi":false,"pos":{"len":67,"line_nr":49,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) write_runes(runes []rune)","name":"write_runes","parent_name":"Builder","return_type":"void","pos":{"len":48,"line_nr":50,"pos":1750,"col":0,"last_line":59},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 clear clears the buffer contents","is_multi":false,"pos":{"len":34,"line_nr":61,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) clear()","name":"clear","parent_name":"Builder","return_type":"void","pos":{"len":30,"line_nr":62,"pos":2026,"col":0,"last_line":64},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 write_u8 appends a single `data` byte to the accumulated buffer","is_multi":false,"pos":{"len":65,"line_nr":66,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) write_u8(data u8)","name":"write_u8","parent_name":"Builder","return_type":"void","pos":{"len":40,"line_nr":67,"pos":2151,"col":0,"last_line":69},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 write_byte appends a single `data` byte to the accumulated buffer","is_multi":false,"pos":{"len":67,"line_nr":71,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) write_byte(data u8)","name":"write_byte","parent_name":"Builder","return_type":"void","pos":{"len":42,"line_nr":72,"pos":2277,"col":0,"last_line":74},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 write_decimal appends a decimal representation of the number `n` into the builder `b`,","is_multi":false,"pos":{"len":88,"line_nr":76,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 without dynamic allocation. The higher order digits come first, i.e. 6123 will be written","is_multi":false,"pos":{"len":91,"line_nr":77,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 with the digit `6` first, then `1`, then `2` and `3` last.","is_multi":false,"pos":{"len":60,"line_nr":78,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) write_decimal(n i64)","name":"write_decimal","parent_name":"Builder","return_type":"void","pos":{"len":43,"line_nr":80,"pos":2604,"col":0,"last_line":100},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 write implements the io.Writer interface, that is why it","is_multi":false,"pos":{"len":58,"line_nr":102,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 it returns how many bytes were written to the string builder.","is_multi":false,"pos":{"len":63,"line_nr":103,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) write(data []u8) !int","name":"write","parent_name":"Builder","return_type":"!int","pos":{"len":44,"line_nr":104,"pos":3065,"col":0,"last_line":110},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 drain_builder writes all of the `other` builder content, then re-initialises","is_multi":false,"pos":{"len":78,"line_nr":112,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `other`, so that the `other` strings builder is ready to receive new content.","is_multi":false,"pos":{"len":79,"line_nr":113,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) drain_builder(mut other Builder, other_new_cap int)","name":"drain_builder","parent_name":"Builder","return_type":"void","pos":{"len":74,"line_nr":115,"pos":3352,"col":0,"last_line":121},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 byte_at returns a byte, located at a given index `i`.","is_multi":false,"pos":{"len":55,"line_nr":123,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: it can panic, if there are not enough bytes in the strings builder yet.","is_multi":false,"pos":{"len":79,"line_nr":124,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (b &Builder) byte_at(n int) u8","name":"byte_at","parent_name":"Builder","return_type":"u8","pos":{"len":37,"line_nr":126,"pos":3678,"col":0,"last_line":128},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 write appends the string `s` to the buffer","is_multi":false,"pos":{"len":44,"line_nr":130,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) write_string(s string)","name":"write_string","parent_name":"Builder","return_type":"void","pos":{"len":45,"line_nr":132,"pos":3810,"col":0,"last_line":141},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 writeln_string appends the string `s`+`\\n` to the buffer","is_multi":false,"pos":{"len":58,"line_nr":143,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["deprecated: 'use writeln() instead'","deprecated_after: '2024-03-21'"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) writeln_string(s string)","name":"writeln_string","parent_name":"Builder","return_type":"void","pos":{"len":47,"line_nr":147,"pos":4139,"col":0,"last_line":149},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 go_back discards the last `n` bytes from the buffer","is_multi":false,"pos":{"len":53,"line_nr":151,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) go_back(n int)","name":"go_back","parent_name":"Builder","return_type":"void","pos":{"len":37,"line_nr":152,"pos":4261,"col":0,"last_line":154},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 cut_last cuts the last `n` bytes from the buffer and returns them","is_multi":false,"pos":{"len":67,"line_nr":166,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) cut_last(n int) string","name":"cut_last","parent_name":"Builder","return_type":"string","pos":{"len":45,"line_nr":167,"pos":4574,"col":0,"last_line":172},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 cut_to cuts the string after `pos` and returns it.","is_multi":false,"pos":{"len":52,"line_nr":174,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 if `pos` is superior to builder length, returns an empty string","is_multi":false,"pos":{"len":65,"line_nr":175,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and cancel further operations","is_multi":false,"pos":{"len":31,"line_nr":176,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) cut_to(pos int) string","name":"cut_to","parent_name":"Builder","return_type":"string","pos":{"len":45,"line_nr":177,"pos":4858,"col":0,"last_line":182},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 go_back_to resets the buffer to the given position `pos`","is_multi":false,"pos":{"len":58,"line_nr":184,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: pos should be < than the existing buffer length.","is_multi":false,"pos":{"len":56,"line_nr":185,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) go_back_to(pos int)","name":"go_back_to","parent_name":"Builder","return_type":"void","pos":{"len":42,"line_nr":186,"pos":5092,"col":0,"last_line":188},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 writeln appends the string `s`, and then a newline character.","is_multi":false,"pos":{"len":63,"line_nr":190,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) writeln(s string)","name":"writeln","parent_name":"Builder","return_type":"void","pos":{"len":40,"line_nr":192,"pos":5228,"col":0,"last_line":201},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 last_n(5) returns 'world'","is_multi":false,"pos":{"len":27,"line_nr":203,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 buf == 'hello world'","is_multi":false,"pos":{"len":22,"line_nr":204,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (b &Builder) last_n(n int) string","name":"last_n","parent_name":"Builder","return_type":"string","pos":{"len":40,"line_nr":205,"pos":5468,"col":0,"last_line":210},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 after(6) returns 'world'","is_multi":false,"pos":{"len":26,"line_nr":212,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 buf == 'hello world'","is_multi":false,"pos":{"len":22,"line_nr":213,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (b &Builder) after(n int) string","name":"after","parent_name":"Builder","return_type":"string","pos":{"len":39,"line_nr":214,"pos":5627,"col":0,"last_line":219},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 str returns a copy of all of the accumulated buffer content.","is_multi":false,"pos":{"len":62,"line_nr":221,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: after a call to b.str(), the builder b will be empty, and could be used again.","is_multi":false,"pos":{"len":86,"line_nr":222,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The returned string *owns* its own separate copy of the accumulated data that was in","is_multi":false,"pos":{"len":86,"line_nr":223,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the string builder, before the .str() call.","is_multi":false,"pos":{"len":45,"line_nr":224,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) str() string","name":"str","parent_name":"Builder","return_type":"string","pos":{"len":35,"line_nr":225,"pos":6021,"col":0,"last_line":231},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ensure_cap ensures that the buffer has enough space for at least `n` bytes by growing the buffer if necessary","is_multi":false,"pos":{"len":111,"line_nr":233,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) ensure_cap(n int)","name":"ensure_cap","parent_name":"Builder","return_type":"void","pos":{"len":40,"line_nr":234,"pos":6314,"col":0,"last_line":253},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 free frees the memory block, used for the buffer.","is_multi":false,"pos":{"len":51,"line_nr":255,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: do not use the builder, after a call to free().","is_multi":false,"pos":{"len":55,"line_nr":256,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn (mut b Builder) free()","name":"free","parent_name":"Builder","return_type":"void","pos":{"len":29,"line_nr":258,"pos":6885,"col":0,"last_line":265},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"type Builder = []u8","name":"Builder","parent_name":"","return_type":"","pos":{"len":16,"line_nr":9,"pos":444,"col":0,"last_line":9},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_builder returns a new string builder, with an initial capacity of `initial_size`","is_multi":false,"pos":{"len":86,"line_nr":11,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\builder.c.v","content":"fn new_builder(initial_size int) Builder","name":"new_builder","parent_name":"","return_type":"Builder","pos":{"len":44,"line_nr":12,"pos":557,"col":0,"last_line":16},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 levenshtein_distance uses the Levenshtein Distance algorithm to calculate","is_multi":false,"pos":{"len":75,"line_nr":14,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the distance between between two strings `a` and `b` (lower is closer).","is_multi":false,"pos":{"len":73,"line_nr":15,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\similarity.v","content":"fn levenshtein_distance(a string, b string) int","name":"levenshtein_distance","parent_name":"","return_type":"int","pos":{"len":51,"line_nr":17,"pos":306,"col":0,"last_line":45},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 levenshtein_distance_percentage uses the Levenshtein Distance algorithm to calculate","is_multi":false,"pos":{"len":86,"line_nr":47,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 how similar two strings are as a percentage (higher is closer).","is_multi":false,"pos":{"len":65,"line_nr":48,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\similarity.v","content":"fn levenshtein_distance_percentage(a string, b string) f32","name":"levenshtein_distance_percentage","parent_name":"","return_type":"f32","pos":{"len":62,"line_nr":49,"pos":1014,"col":0,"last_line":53},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 dice_coefficient implements the Sørensen–Dice coefficient.","is_multi":false,"pos":{"len":63,"line_nr":55,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It finds the similarity between two strings, and returns a coefficient","is_multi":false,"pos":{"len":72,"line_nr":56,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 between 0.0 (not similar) and 1.0 (exact match).","is_multi":false,"pos":{"len":50,"line_nr":57,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\similarity.v","content":"fn dice_coefficient(s1 string, s2 string) f32","name":"dice_coefficient","parent_name":"","return_type":"f32","pos":{"len":49,"line_nr":58,"pos":1397,"col":0,"last_line":86},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 strings.repeat - fill a string with `n` repetitions of the character `c`","is_multi":false,"pos":{"len":74,"line_nr":2,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\strings.c.v","content":"fn repeat(c u8, n int) string","name":"repeat","parent_name":"","return_type":"string","pos":{"len":33,"line_nr":4,"pos":115,"col":0,"last_line":14},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 strings.repeat_string - gives you `n` repetitions of the substring `s`","is_multi":false,"pos":{"len":72,"line_nr":16,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: strings.repeat, that repeats a single byte, is between 2x","is_multi":false,"pos":{"len":65,"line_nr":17,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and 24x faster than strings.repeat_string called for a 1 char string.","is_multi":false,"pos":{"len":71,"line_nr":18,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\strings.c.v","content":"fn repeat_string(s string, n int) string","name":"repeat_string","parent_name":"","return_type":"string","pos":{"len":44,"line_nr":20,"pos":564,"col":0,"last_line":39},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 import rand","is_multi":false,"pos":{"len":13,"line_nr":2,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 random returns a random string with `n` characters","is_multi":false,"pos":{"len":52,"line_nr":3,"pos":0,"col":0,"last_line":0}},{"text":"\npub fn random(n int) string {\n\tbuf := vmalloc(n)\n\tfor i in 0..n {\n\t\tbuf[i] = rand.next()\n\t}\n\treturn tos(buf)\n}\n","is_multi":true,"pos":{"len":112,"line_nr":4,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 find_between_pair_byte returns the string found between the pair of marks defined","is_multi":false,"pos":{"len":83,"line_nr":14,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 by `start` and `end`.","is_multi":false,"pos":{"len":23,"line_nr":15,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 As opposed to the `find_between`, `all_after*`, `all_before*` methods defined on the","is_multi":false,"pos":{"len":86,"line_nr":16,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `string` type, this function can extract content between *nested* marks in `input`.","is_multi":false,"pos":{"len":85,"line_nr":17,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If `start` and `end` marks are nested in `input`, the characters","is_multi":false,"pos":{"len":66,"line_nr":18,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 between the *outermost* mark pair is returned. It is expected that `start` and `end`","is_multi":false,"pos":{"len":86,"line_nr":19,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 marks are *balanced*, meaning that the amount of `start` marks equal the","is_multi":false,"pos":{"len":74,"line_nr":20,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 amount of `end` marks in the `input`. An empty string is returned otherwise.","is_multi":false,"pos":{"len":78,"line_nr":21,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Using two identical marks as `start` and `end` results in undefined output behavior.","is_multi":false,"pos":{"len":86,"line_nr":22,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 find_between_pair_byte is the fastest in the find_between_pair_* family of functions.","is_multi":false,"pos":{"len":87,"line_nr":23,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert strings.find_between_pair_u8('(V) (NOT V)',`(`,`)`) == 'V'","is_multi":false,"pos":{"len":76,"line_nr":24,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert strings.find_between_pair_u8('s {X{Y}} s',`{`,`}`) == 'X{Y}'","is_multi":false,"pos":{"len":78,"line_nr":25,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\strings.v","content":"fn find_between_pair_u8(input string, start u8, end u8) string","name":"find_between_pair_u8","parent_name":"","return_type":"string","pos":{"len":66,"line_nr":26,"pos":1135,"col":0,"last_line":47},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 find_between_pair_rune returns the string found between the pair of marks defined","is_multi":false,"pos":{"len":83,"line_nr":49,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 by `start` and `end`.","is_multi":false,"pos":{"len":23,"line_nr":50,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 As opposed to the `find_between`, `all_after*`, `all_before*` methods defined on the","is_multi":false,"pos":{"len":86,"line_nr":51,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `string` type, this function can extract content between *nested* marks in `input`.","is_multi":false,"pos":{"len":85,"line_nr":52,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If `start` and `end` marks are nested in `input`, the characters","is_multi":false,"pos":{"len":66,"line_nr":53,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 between the *outermost* mark pair is returned. It is expected that `start` and `end`","is_multi":false,"pos":{"len":86,"line_nr":54,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 marks are *balanced*, meaning that the amount of `start` marks equal the","is_multi":false,"pos":{"len":74,"line_nr":55,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 amount of `end` marks in the `input`. An empty string is returned otherwise.","is_multi":false,"pos":{"len":78,"line_nr":56,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Using two identical marks as `start` and `end` results in undefined output behavior.","is_multi":false,"pos":{"len":86,"line_nr":57,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 find_between_pair_rune is inbetween the fastest and slowest in the find_between_pair_* family of functions.","is_multi":false,"pos":{"len":109,"line_nr":58,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert strings.find_between_pair_rune('(V) (NOT V)',`(`,`)`) == 'V'","is_multi":false,"pos":{"len":78,"line_nr":59,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert strings.find_between_pair_rune('s {X{Y}} s',`{`,`}`) == 'X{Y}'","is_multi":false,"pos":{"len":80,"line_nr":60,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\strings.v","content":"fn find_between_pair_rune(input string, start rune, end rune) string","name":"find_between_pair_rune","parent_name":"","return_type":"string","pos":{"len":72,"line_nr":61,"pos":2460,"col":0,"last_line":83},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 find_between_pair_string returns the string found between the pair of marks defined","is_multi":false,"pos":{"len":85,"line_nr":85,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 by `start` and `end`.","is_multi":false,"pos":{"len":23,"line_nr":86,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 As opposed to the `find_between`, `all_after*`, `all_before*` methods defined on the","is_multi":false,"pos":{"len":86,"line_nr":87,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `string` type, this function can extract content between *nested* marks in `input`.","is_multi":false,"pos":{"len":85,"line_nr":88,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If `start` and `end` marks are nested in `input`, the characters","is_multi":false,"pos":{"len":66,"line_nr":89,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 between the *outermost* mark pair is returned. It is expected that `start` and `end`","is_multi":false,"pos":{"len":86,"line_nr":90,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 marks are *balanced*, meaning that the amount of `start` marks equal the","is_multi":false,"pos":{"len":74,"line_nr":91,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 amount of `end` marks in the `input`. An empty string is returned otherwise.","is_multi":false,"pos":{"len":78,"line_nr":92,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Using two identical marks as `start` and `end` results in undefined output behavior.","is_multi":false,"pos":{"len":86,"line_nr":93,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 find_between_pair_string is the slowest in the find_between_pair_* function family.","is_multi":false,"pos":{"len":85,"line_nr":94,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert strings.find_between_pair_string('/*V*/ /*NOT V*/','/*','*/') == 'V'","is_multi":false,"pos":{"len":86,"line_nr":95,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert strings.find_between_pair_string('s {{X{{Y}}}} s','{{','}}') == 'X{{Y}}'","is_multi":false,"pos":{"len":90,"line_nr":96,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\strings.v","content":"fn find_between_pair_string(input string, start string, end string) string","name":"find_between_pair_string","parent_name":"","return_type":"string","pos":{"len":78,"line_nr":97,"pos":3820,"col":0,"last_line":127},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 split_capital returns an array containing the contents of `s` split by capital letters.","is_multi":false,"pos":{"len":89,"line_nr":129,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert strings.split_capital('XYZ') == ['X', 'Y', 'Z']","is_multi":false,"pos":{"len":65,"line_nr":130,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert strings.split_capital('XYStar') == ['X', 'Y', 'Star']","is_multi":false,"pos":{"len":71,"line_nr":131,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\strings\\strings.v","content":"fn split_capital(s string) []string","name":"split_capital","parent_name":"","return_type":"[]string","pos":{"len":39,"line_nr":132,"pos":4733,"col":0,"last_line":148},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-02-05 19:45:36"}