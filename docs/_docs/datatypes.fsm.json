{"module_name":"datatypes.fsm","description":"# fsm\n\nThis module implements a Finite State Machine (FSM). The FSM is composed of states and transitions between them. These need to be specified by the client.\n\n## Usage\n\nHave a look at `fsm_test.v` for usage examples.\n\nOn each `run()`, all the possible transitions from the current state are evaluated. The first transition for the current state, whose condition evaluates to true is taken (the condition is specified by a transition callback function).\n\nIn a successful transition, the current state changes to the new one. When that happens: * the client-specified `on_exit()` handler from the current state is called. * the client-specified `on_entry()` handler of the new state is called.\n\nAfter all transitions are checked, and thus the state is changed, the client-specified `on_run()` handler of the now current state is called.\n\n## Plot States and Transitions\nThis module includes a tool for generating dot diagrams from .v source code, that defines a FSM. The tool is located in [fsm_graph.v](tools/fsm_graph.v).\n\nHere is an example of how to generate a .dot file with the graph and transitions:\n```bash\nv run vlib/datatypes/fsm/tools/fsm_graph.v -f vlib/datatypes/fsm/fsm_test.v > graph.dot\n```\n\nYou can convert the generated .dot file to a PNG file with Graphviz's `dot`\nconversion tool:\n```bash\nv run vlib/datatypes/fsm/tools/fsm_graph.v -f vlib/datatypes/fsm/fsm_test.v > graph.dot\ndot -Tpng graph.dot > graph.png\nxdg-open graph.png\n```\n\nYou can also visualise it with Graphviz (the `dot` command)\n& ImageMagick (the `display` command):\n```bash\nv run vlib/datatypes/fsm/tools/fsm_graph.v -f vlib/datatypes/fsm/fsm_test.v | dot -Tpng | display\n```\n\nTo view the .dot file, you can also use any of the\n[Graphviz Graphical Interfaces](https://graphviz.org/resources/#graphical-interfaces)\nand `xdot` in particular:\n```bash\nv run vlib/datatypes/fsm/tools/fsm_graph.v -f vlib/datatypes/fsm/fsm_test.v | xdot -\n```\n\nIn all of the above examples, you can replace `vlib/datatypes/fsm/fsm_test.v`\nwith the path to your own .v code that imports and uses `fsm`.\n","contents":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\datatypes\\fsm\\fsm.v","content":"type EventHandlerFn = fn (receiver voidptr, from string, to string)","name":"EventHandlerFn","parent_name":"","return_type":"","pos":{"len":23,"line_nr":2,"pos":12,"col":0,"last_line":2},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\datatypes\\fsm\\fsm.v","content":"type ConditionFn = fn (receiver voidptr, from string, to string) bool","name":"ConditionFn","parent_name":"","return_type":"","pos":{"len":20,"line_nr":4,"pos":85,"col":0,"last_line":4},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\datatypes\\fsm\\fsm.v","content":"fn (mut s StateMachine) set_state(name string) !","name":"set_state","parent_name":"StateMachine","return_type":"!","pos":{"len":52,"line_nr":37,"pos":795,"col":0,"last_line":43},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\datatypes\\fsm\\fsm.v","content":"fn (mut s StateMachine) get_state() string","name":"get_state","parent_name":"StateMachine","return_type":"string","pos":{"len":46,"line_nr":45,"pos":955,"col":0,"last_line":47},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\datatypes\\fsm\\fsm.v","content":"fn (mut s StateMachine) add_state(name string, entry EventHandlerFn, run EventHandlerFn, exit EventHandlerFn)","name":"add_state","parent_name":"StateMachine","return_type":"void","pos":{"len":113,"line_nr":49,"pos":1031,"col":0,"last_line":58},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\datatypes\\fsm\\fsm.v","content":"fn (mut s StateMachine) add_transition(from string, to string, condition_handler ConditionFn)","name":"add_transition","parent_name":"StateMachine","return_type":"void","pos":{"len":97,"line_nr":60,"pos":1293,"col":0,"last_line":70},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\datatypes\\fsm\\fsm.v","content":"fn (mut s StateMachine) run(receiver voidptr) !","name":"run","parent_name":"StateMachine","return_type":"!","pos":{"len":51,"line_nr":72,"pos":1559,"col":0,"last_line":88},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\datatypes\\fsm\\fsm.v","content":"struct StateMachine {\nmut:\n\tstates        map[string]State\n\ttransitions   map[string][]Transition\n\tcurrent_state string\n}","name":"StateMachine","parent_name":"","return_type":"","pos":{"len":23,"line_nr":26,"pos":614,"col":0,"last_line":31},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\datatypes\\fsm\\fsm.v","content":"fn new() StateMachine","name":"new","parent_name":"","return_type":"StateMachine","pos":{"len":25,"line_nr":33,"pos":741,"col":0,"last_line":35},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:32"}