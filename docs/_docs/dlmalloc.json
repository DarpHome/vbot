{"module_name":"dlmalloc","description":"","contents":[{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\n$if debug ? {\n\t#include \"valgrind.h\"\n}\n\nfn //C.VALGRIND_MALLOCLIKE_BLOCK(addr voidptr, size usize, rzb usize,is_zeroed bool)\nfn //C.VALGRIND_FREELIKE_BLOCK(addr voidptr, rzB usize)\nfn //C.VALGRIND_MAKE_MEM_UNDEFINED(addr voidptr, size usize)\n","is_multi":true,"pos":{"len":243,"line_nr":18,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"const n_small_bins = 32","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":28,"pos":834,"col":0,"last_line":28},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"const n_tree_bins = 32","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":29,"pos":862,"col":0,"last_line":29},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"const small_bin_shift = 3","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":30,"pos":889,"col":0,"last_line":30},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"const tree_bin_shift = 8","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":31,"pos":919,"col":0,"last_line":31},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"const max_release_check_rate = 4095","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":33,"pos":949,"col":0,"last_line":33},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 In order for dlmalloc to efficently manage memory, it needs a way to communicate with the underlying platform.","is_multi":false,"pos":{"len":112,"line_nr":201,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This `Allocator` type provides an interface for this communication.","is_multi":false,"pos":{"len":69,"line_nr":202,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":203,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":204,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Why not `interface?` Interfaces require memory allocation so it is simpler to pass a struct.","is_multi":false,"pos":{"len":94,"line_nr":205,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"struct Allocator {\n\talloc            fn (voidptr, usize) (voidptr, usize, u32) = unsafe { nil }\n\tremap            fn (voidptr, voidptr, usize, usize, bool) voidptr = unsafe { nil }\n\tfree_part        fn (voidptr, voidptr, usize, usize) bool = unsafe { nil }\n\tfree_            fn (voidptr, voidptr, usize) bool        = unsafe { nil }\n\tcan_release_part fn (voidptr, u32) bool = unsafe { nil }\n\tallocates_zeros  fn (voidptr) bool      = unsafe { nil }\n\tpage_size        fn (voidptr) usize     = unsafe { nil } // not a constant field because some platforms might have different page sizes depending on configs\n\tdata             voidptr\n}","name":"Allocator","parent_name":"","return_type":"","pos":{"len":20,"line_nr":206,"pos":4275,"col":0,"last_line":215},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"fn (dl &Dlmalloc) calloc_must_clear(ptr voidptr) bool","name":"calloc_must_clear","parent_name":"Dlmalloc","return_type":"bool","pos":{"len":57,"line_nr":436,"pos":9361,"col":0,"last_line":439},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 calloc is the same as `malloc`, except if the allocation succeeds it's guaranteed","is_multi":false,"pos":{"len":83,"line_nr":573,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 to point to `size` bytes of zeros.","is_multi":false,"pos":{"len":36,"line_nr":574,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"fn (mut dl Dlmalloc) calloc(size usize) voidptr","name":"calloc","parent_name":"Dlmalloc","return_type":"voidptr","pos":{"len":51,"line_nr":576,"pos":12229,"col":0,"last_line":584},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 free_ behaves as libc free, but operates within the given space","is_multi":false,"pos":{"len":65,"line_nr":586,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"fn (mut dl Dlmalloc) free_(mem voidptr)","name":"free_","parent_name":"Dlmalloc","return_type":"void","pos":{"len":43,"line_nr":588,"pos":12496,"col":0,"last_line":674},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"fn (mut dl Dlmalloc) malloc(size usize) voidptr","name":"malloc","parent_name":"Dlmalloc","return_type":"voidptr","pos":{"len":51,"line_nr":915,"pos":19116,"col":0,"last_line":923},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 realloc behaves as libc realloc, but operates within the given space","is_multi":false,"pos":{"len":70,"line_nr":1356,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"fn (mut dl Dlmalloc) realloc(oldmem voidptr, bytes usize) voidptr","name":"realloc","parent_name":"Dlmalloc","return_type":"voidptr","pos":{"len":69,"line_nr":1358,"pos":29762,"col":0,"last_line":1379},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 memaligns allocates memory aligned to `alignment_`. Only call this with power-of-two alignment","is_multi":false,"pos":{"len":96,"line_nr":1381,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and alignment > dlmalloc.malloc_alignment","is_multi":false,"pos":{"len":43,"line_nr":1382,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"fn (mut dl Dlmalloc) memalign(alignment_ usize, bytes usize) voidptr","name":"memalign","parent_name":"Dlmalloc","return_type":"voidptr","pos":{"len":72,"line_nr":1384,"pos":30422,"col":0,"last_line":1446},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"struct Dlmalloc {\n\tsystem_allocator Allocator\n\tmax_request      usize = 4294901657\nmut:\n\t// bin maps\n\tsmallmap u32 // bin map for small bins\n\ttreemap  u32 // bin map  for tree bins\n\n\tsmallbins      [66]&Chunk // small bins, it is actually (n_small_bins + 1) * 2\n\ttreebins       [n_tree_bins]&TreeChunk\n\tdvsize         usize\n\ttopsize        usize\n\tdv             &Chunk = unsafe { nil }\n\ttop            &Chunk = unsafe { nil }\n\tfootprint      usize\n\tmax_footprint  usize\n\tseg            Segment\n\ttrim_check     u32\n\tleast_addr     voidptr\n\trelease_checks usize\n}","name":"Dlmalloc","parent_name":"","return_type":"","pos":{"len":19,"line_nr":217,"pos":4915,"col":0,"last_line":237},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc.v","content":"fn new(system_allocator Allocator) Dlmalloc","name":"new","parent_name":"","return_type":"Dlmalloc","pos":{"len":47,"line_nr":239,"pos":5482,"col":0,"last_line":258},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\dlmalloc_sys_windows.c.v","content":"fn get_system_allocator() Allocator","name":"get_system_allocator","parent_name":"","return_type":"Allocator","pos":{"len":39,"line_nr":30,"pos":591,"col":0,"last_line":41},"platform":"windows","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001/ malloc allocates `size` bytes.","is_multi":false,"pos":{"len":33,"line_nr":5,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/","is_multi":false,"pos":{"len":2,"line_nr":6,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/ Returns a null pointer if allocation fails. Returns a valid pointer","is_multi":false,"pos":{"len":70,"line_nr":7,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/ otherwise.","is_multi":false,"pos":{"len":13,"line_nr":8,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\global.v","content":"fn malloc(size usize) voidptr","name":"malloc","parent_name":"","return_type":"voidptr","pos":{"len":33,"line_nr":10,"pos":215,"col":0,"last_line":14},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 free deallocates a `ptr`.","is_multi":false,"pos":{"len":27,"line_nr":16,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\global.v","content":"fn free(ptr voidptr)","name":"free","parent_name":"","return_type":"void","pos":{"len":24,"line_nr":18,"pos":335,"col":0,"last_line":22},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Same as `malloc`, except if the allocation succeeds it's guaranteed to","is_multi":false,"pos":{"len":72,"line_nr":24,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 point to `size` bytes of zeros.","is_multi":false,"pos":{"len":33,"line_nr":25,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\global.v","content":"fn calloc(size usize) voidptr","name":"calloc","parent_name":"","return_type":"voidptr","pos":{"len":33,"line_nr":27,"pos":517,"col":0,"last_line":31},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 realloc reallocates `ptr`, a previous allocation with `old_size` and","is_multi":false,"pos":{"len":70,"line_nr":33,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 to have `new_size`.","is_multi":false,"pos":{"len":21,"line_nr":34,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":35,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":36,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Returns a null pointer if the memory couldn't be reallocated, but `ptr`","is_multi":false,"pos":{"len":73,"line_nr":37,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 is still valid. Returns a valid pointer and frees `ptr` if the request","is_multi":false,"pos":{"len":72,"line_nr":38,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 is satisfied.","is_multi":false,"pos":{"len":15,"line_nr":39,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\global.v","content":"fn realloc(ptr voidptr, oldsize usize, newsize usize) voidptr","name":"realloc","parent_name":"","return_type":"voidptr","pos":{"len":65,"line_nr":41,"pos":875,"col":0,"last_line":47},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 memalign allocates `size` bytes with `align` align.","is_multi":false,"pos":{"len":53,"line_nr":49,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":50,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":51,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Returns a null pointer if allocation fails. Returns a valid pointer otherwise.","is_multi":false,"pos":{"len":80,"line_nr":52,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\dlmalloc\\global.v","content":"fn memalign(size usize, align usize) voidptr","name":"memalign","parent_name":"","return_type":"voidptr","pos":{"len":48,"line_nr":54,"pos":1166,"col":0,"last_line":62},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:32"}