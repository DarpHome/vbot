{"module_name":"compress.zstd","contents":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"enum ZSTD_strategy {\n\tzstd_default  = 0\n\tzstd_fast     = 1\n\tzstd_dfast    = 2\n\tzstd_greedy   = 3\n\tzstd_lazy     = 4\n\tzstd_lazy2    = 5\n\tzstd_btlazy2  = 6\n\tzstd_btopt    = 7\n\tzstd_btultra  = 8\n\tzstd_btultra2 = 9\n\t// note : new strategies _might_ be added in the future. Only the order (from fast to strong) is guaranteed\n}","name":"ZSTD_strategy","parent_name":"","return_type":"","pos":{"len":22,"line_nr":38,"pos":1249,"col":0,"last_line":50},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"enum ZSTD_cParameter {\n\t// compression parameters\n\t// Note: When compressing with a ZSTD_CDict these parameters are superseded\n\t// by the parameters used to construct the ZSTD_CDict.\n\t// See ZSTD_CCtx_refCDict() for more info (superseded-by-cdict).\n\t//\n\t// Set compression parameters according to pre-defined cLevel table.\n\t// Note that exact compression parameters are dynamically determined,\n\t// depending on both compression level and srcSize (when known).\n\t// Default level is ZSTD_CLEVEL_DEFAULT==3.\n\t// Special: value 0 means default, which is controlled by ZSTD_CLEVEL_DEFAULT.\n\t// Note 1 : it's possible to pass a negative compression level.\n\t// Note 2 : setting a level does not automatically set all other compression parameters\n\t// to default. Setting this will however eventually dynamically impact the compression\n\t// parameters which have not been manually set. The manually set\n\t// ones will 'stick'.\n\tzstd_c_compression_level             = 100\n\t// Advanced compression parameters :\n\t// It's possible to pin down compression parameters to some specific values.\n\t// In which case, these values are no longer dynamically selected by the compressor\n\t//\n\t// Maximum allowed back-reference distance, expressed as power of 2.\n\t// This will set a memory budget for streaming decompression,\n\t// with larger values requiring more memory\n\t// and typically compressing more.\n\t// Must be clamped between ZSTD_WINDOWLOG_MIN and ZSTD_WINDOWLOG_MAX.\n\t// Special: value 0 means \"use default windowLog\".\n\t// Note: Using a windowLog greater than ZSTD_WINDOWLOG_LIMIT_DEFAULT\n\t// requires explicitly allowing such size at streaming decompression stage.\n\tzstd_c_window_log                    = 101\n\t// Size of the initial probe table, as a power of 2.\n\t// Resulting memory usage is (1 << (hashLog+2)).\n\t// Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX.\n\t// Larger tables improve compression ratio of strategies <= dFast,\n\t// and improve speed of strategies > dFast.\n\t// Special: value 0 means \"use default hashLog\".\n\tzstd_c_hash_log                      = 102\n\t// Size of the multi-probe search table, as a power of 2.\n\t// Resulting memory usage is (1 << (chainLog+2)).\n\t// Must be clamped between ZSTD_CHAINLOG_MIN and ZSTD_CHAINLOG_MAX.\n\t// Larger tables result in better and slower compression.\n\t// This parameter is useless for \"fast\" strategy.\n\t// It's still useful when using \"dfast\" strategy,\n\t// in which case it defines a secondary probe table.\n\t// Special: value 0 means \"use default chainLog\".\n\tzstd_c_chain_log                     = 103\n\t// Number of search attempts, as a power of 2.\n\t// More attempts result in better and slower compression.\n\t// This parameter is useless for \"fast\" and \"dFast\" strategies.\n\t// Special: value 0 means \"use default searchLog\".\n\tzstd_c_search_log                    = 104\n\t// Minimum size of searched matches.\n\t// Note that Zstandard can still find matches of smaller size,\n\t// it just tweaks its search algorithm to look for this size and larger.\n\t// Larger values increase compression and decompression speed, but decrease ratio.\n\t// Must be clamped between ZSTD_MINMATCH_MIN and ZSTD_MINMATCH_MAX.\n\t// Note that currently, for all strategies < btopt, effective minimum is 4.\n\t// , for all strategies > fast, effective maximum is 6.\n\t// Special: value 0 means \"use default minMatchLength\".\n\tzstd_c_min_match                     = 105\n\t// Impact of this field depends on strategy.\n\t// For strategies btopt, btultra & btultra2:\n\t// Length of Match considered \"good enough\" to stop search.\n\t// Larger values make compression stronger, and slower.\n\t// For strategy fast:\n\t// Distance between match sampling.\n\t// Larger values make compression faster, and weaker.\n\t// Special: value 0 means \"use default targetLength\".\n\tzstd_c_target_length                 = 106\n\t// See ZSTD_strategy enum definition.\n\t// The higher the value of selected strategy, the more complex it is,\n\t// resulting in stronger and slower compression.\n\t// Special: value 0 means \"use default strategy\".\n\tzstd_c_strategy                      = 107\n\t// LDM mode parameters\n\t// Enable long distance matching.\n\t// This parameter is designed to improve compression ratio\n\t// for large inputs, by finding large matches at long distance.\n\t// It increases memory usage and window size.\n\t// Note: enabling this parameter increases default ZSTD_c_windowLog to 128 MB\n\t// except when expressly set to a different value.\n\t// Note: will be enabled by default if ZSTD_c_windowLog >= 128 MB and\n\t// compression strategy >= ZSTD_btopt (== compression level 16+)\n\tzstd_c_enable_long_distance_matching = 160\n\t// Size of the table for long distance matching, as a power of 2.\n\t// Larger values increase memory usage and compression ratio,\n\t// but decrease compression speed.\n\t// Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX\n\t// default: windowlog - 7.\n\t// Special: value 0 means \"automatically determine hashlog\".\n\tzstd_c_ldm_hash_log                  = 161\n\t// Minimum match size for long distance matcher.\n\t// Larger/too small values usually decrease compression ratio.\n\t// Must be clamped between ZSTD_LDM_MINMATCH_MIN and ZSTD_LDM_MINMATCH_MAX.\n\t// Special: value 0 means \"use default value\" (default: 64).\n\tzstd_c_ldm_min_match                 = 162\n\t// log size of each bucket in the ldm hash table for collision resolution.\n\t// Larger values improve collision resolution but decrease compression speed.\n\t// The maximum value is ZSTD_LDM_BUCKETSIZELOG_MAX.\n\t// Special: value 0 means \"use default value\" (default: 3).\n\tzstd_c_ldm_bucket_size_log           = 163\n\t// Frequency of inserting/looking up entries into the LDM hash table.\n\t// Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).\n\t// Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.\n\t// Larger values improve compression speed.\n\t// Deviating far from default value will likely result in a compression ratio decrease.\n\t// Special: value 0 means \"automatically determine hashRateLog\".\n\tzstd_c_ldm_hash_rate_log             = 164\n\t// frame parameters\n\t// Content size will be written into frame header _whenever known_ (default:1)\n\t// Content size must be known at the beginning of compression.\n\t// This is automatically the case when using ZSTD_compress2(),\n\t// For streaming scenarios, content size must be provided with ZSTD_CCtx_setPledgedSrcSize()\n\tzstd_c_content_size_flag             = 200\n\t// A 32-bits checksum of content is written at end of frame (default:0)\n\tzstd_c_checksum_flag                 = 201\n\t// When applicable, dictionary's ID is written into frame header (default:1)\n\tzstd_c_dict_id_flag                  = 202\n\t// multi-threading parameters\n\t// These parameters are only active if multi-threading is enabled (compiled with build macro ZSTD_MULTITHREAD).\n\t// Otherwise, trying to set any other value than default (0) will be a no-op and return an error.\n\t// In a situation where it's unknown if the linked library supports multi-threading or not,\n\t// setting ZSTD_c_nbWorkers to any value >= 1 and consulting the return value provides a quick way to check this property.\n\t//\n\t// Select how many threads will be spawned to compress in parallel.\n\t// When nbWorkers >= 1, triggers asynchronous mode when invoking ZSTD_compressStream*() :\n\t// ZSTD_compressStream*() consumes input and flush output if possible, but immediately gives back control to caller,\n\t// while compression is performed in parallel, within worker thread(s).\n\t// (note : a strong exception to this rule is when first invocation of ZSTD_compressStream2() sets ZSTD_e_end :\n\t// in which case, ZSTD_compressStream2() delegates to ZSTD_compress2(), which is always a blocking call).\n\t// More workers improve speed, but also increase memory usage.\n\t// Default value is `0`, aka \"single-threaded mode\" : no worker is spawned,\n\t// compression is performed inside Caller's thread, and all invocations are blocking\n\tzstd_c_nb_workers                    = 400\n\t// Size of a compression job. This value is enforced only when nbWorkers >= 1.\n\t// Each compression job is completed in parallel, so this value can indirectly impact the nb of active threads.\n\t// 0 means default, which is dynamically determined based on compression parameters.\n\t// Job size must be a minimum of overlap size, or ZSTDMT_JOBSIZE_MIN (= 512 KB), whichever is largest.\n\t// The minimum size is automatically and transparently enforced.\n\tzstd_c_job_size                      = 401\n\t// Control the overlap size, as a fraction of window size.\n\t// The overlap size is an amount of data reloaded from previous job at the beginning of a new job.\n\t// It helps preserve compression ratio, while each job is compressed in parallel.\n\t// This value is enforced only when nbWorkers >= 1.\n\t// Larger values increase compression ratio, but decrease speed.\n\t// Possible values range from 0 to 9 :\n\t// - 0 means \"default\" : value will be determined by the library, depending on strategy\n\t// - 1 means \"no overlap\"\n\t// - 9 means \"full overlap\", using a full window size.\n\t// Each intermediate rank increases/decreases load size by a factor 2 :\n\t// 9: full window;  8: w/2;  7: w/4;  6: w/8;  5:w/16;  4: w/32;  3:w/64;  2:w/128;  1:no overlap;  0:default\n\t// default value varies between 6 and 9, depending on strategy\n\tzstd_c_overlap_log                   = 402\n\t// note : additional experimental parameters are also available\n\t// within the experimental section of the API.\n\t// At the time of this writing, they include :\n\t// zstd_c_rsyncable\n\t// zstd_c_format\n\t// zstd_c_force_max_window\n\t// zstd_c_force_attach_dict\n\t// zstd_c_literal_compression_mode\n\t// zstd_c_target_c_block_size\n\t// zstd_c_src_size_hint\n\t// zstd_c_enable_dedicated_dict_search\n\t// zstd_c_stable_in_buffer\n\t// zstd_c_stable_out_buffer\n\t// zstd_c_block_delimiters\n\t// zstd_c_validate_sequences\n\t// zstd_c_use_block_splitter\n\t// zstd_c_use_row_match_finder\n\t// zstd_c_prefetch_c_dict_tables\n\t// zstd_c_enable_seq_producer_fallback\n\t// zstd_c_max_block_size\n\t// Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.\n\t// note : never ever use experimentalParam? names directly;\n\t//        also, the enums values themselves are unstable and can still change.\n\t//\n\tzstd_c_experimental_param1           = 500\n\tzstd_c_experimental_param2           = 10\n\tzstd_c_experimental_param3           = 1000\n\tzstd_c_experimental_param4           = 1001\n\tzstd_c_experimental_param5           = 1002\n\tzstd_c_experimental_param6           = 1003\n\tzstd_c_experimental_param7           = 1004\n\tzstd_c_experimental_param8           = 1005\n\tzstd_c_experimental_param9           = 1006\n\tzstd_c_experimental_param10          = 1007\n\tzstd_c_experimental_param11          = 1008\n\tzstd_c_experimental_param12          = 1009\n\tzstd_c_experimental_param13          = 1010\n\tzstd_c_experimental_param14          = 1011\n\tzstd_c_experimental_param15          = 1012\n\tzstd_c_experimental_param16          = 1013\n\tzstd_c_experimental_param17          = 1014\n\tzstd_c_experimental_param18          = 1015\n\tzstd_c_experimental_param19          = 1016\n}","name":"ZSTD_cParameter","parent_name":"","return_type":"","pos":{"len":24,"line_nr":52,"pos":1576,"col":0,"last_line":248},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"struct ZSTD_bounds {\n\terror       usize\n\tlower_bound int\n\tupper_bound int\n}","name":"ZSTD_bounds","parent_name":"","return_type":"","pos":{"len":22,"line_nr":250,"pos":12674,"col":0,"last_line":254},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"enum ZSTD_ResetDirective {\n\tzstd_reset_session_only           = 1\n\tzstd_reset_parameters             = 2\n\tzstd_reset_session_and_parameters = 3\n}","name":"ZSTD_ResetDirective","parent_name":"","return_type":"","pos":{"len":28,"line_nr":260,"pos":12930,"col":0,"last_line":264},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"enum ZSTD_dParameter {\n\t// Select a size limit (in power of 2) beyond which\n\t// the streaming API will refuse to allocate memory buffer\n\t// in order to protect the host from unreasonable memory requirements.\n\t// This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.\n\t// By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).\n\t// Special: value 0 means \"use default maximum windowLog\".\n\tzstd_d_window_log_max      = 100\n\t// note : additional experimental parameters are also available\n\t// within the experimental section of the API.\n\t// At the time of this writing, they include :\n\t// ZSTD_d_format\n\t// zstd_d_stable_out_buffer\n\t// zstd_d_force_ignore_checksum\n\t// zstd_d_ref_multipled_dicts\n\t// zstd_d_disable_huffman_assembly\n\t// Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.\n\t// note : never ever use experimentalParam? names directly\n\tzstd_d_experimental_param1 = 1000\n\tzstd_d_experimental_param2 = 1001\n\tzstd_d_experimental_param3 = 1002\n\tzstd_d_experimental_param4 = 1003\n\tzstd_d_experimental_param5 = 1004\n}","name":"ZSTD_dParameter","parent_name":"","return_type":"","pos":{"len":24,"line_nr":269,"pos":13206,"col":0,"last_line":292},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 streaming compression","is_multi":false,"pos":{"len":23,"line_nr":298,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"struct ZSTD_inBuffer {\npub mut:\n\tsrc  voidptr\n\tsize usize\n\tpos  usize\n}","name":"ZSTD_inBuffer","parent_name":"","return_type":"","pos":{"len":24,"line_nr":299,"pos":14574,"col":0,"last_line":304},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"struct ZSTD_outBuffer {\npub mut:\n\tdst  voidptr\n\tsize usize\n\tpos  usize\n}","name":"ZSTD_outBuffer","parent_name":"","return_type":"","pos":{"len":25,"line_nr":306,"pos":14651,"col":0,"last_line":311},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"enum ZSTD_EndDirective {\n\t// collect more data, encoder decides when to output compressed result, for optimal compression ratio\n\tzstd_e_continue = 0\n\t// flush any data provided so far,\n\t// it creates (at least) one new block, that can be decoded immediately on reception;\n\t// frame will continue: any future data can still reference previously compressed data, improving compression.\n\t// note : multithreaded compression will block to flush as much output as possible.\n\tzstd_e_flush    = 1\n\t// flush any remaining data _and_ close current frame.\n\t// note that frame is only closed after compressed data is fully flushed (return value == 0).\n\t// After that point, any additional data starts a new frame.\n\t// note : each frame is independent (does not reference any content from previous frame).\n\t// note : multithreaded compression will block to flush as much output as possible.\n\tzstd_e_end      = 2\n}","name":"ZSTD_EndDirective","parent_name":"","return_type":"","pos":{"len":26,"line_nr":316,"pos":14801,"col":0,"last_line":330},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 version_number return runtime library version, the value is (MAJOR*100*100 + MINOR*100 + RELEASE).","is_multi":false,"pos":{"len":100,"line_nr":348,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn version_number() u32","name":"version_number","parent_name":"","return_type":"u32","pos":{"len":27,"line_nr":349,"pos":16466,"col":0,"last_line":351},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 version_string return runtime library version, like \"1.5.5\".","is_multi":false,"pos":{"len":62,"line_nr":353,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn version_string() string","name":"version_string","parent_name":"","return_type":"string","pos":{"len":30,"line_nr":354,"pos":16594,"col":0,"last_line":356},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 is_error tells if a `usize` function result is an error code.","is_multi":false,"pos":{"len":63,"line_nr":358,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn is_error(code usize) bool","name":"is_error","parent_name":"","return_type":"bool","pos":{"len":32,"line_nr":359,"pos":16748,"col":0,"last_line":361},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_error_name provides readable string from an error code.","is_multi":false,"pos":{"len":61,"line_nr":363,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn get_error_name(code usize) string","name":"get_error_name","parent_name":"","return_type":"string","pos":{"len":40,"line_nr":364,"pos":16883,"col":0,"last_line":366},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 check_zstd check the zstd error code, and return a error string.","is_multi":false,"pos":{"len":66,"line_nr":368,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn check_zstd(code usize) !","name":"check_zstd","parent_name":"","return_type":"!","pos":{"len":31,"line_nr":369,"pos":17053,"col":0,"last_line":373},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 min_c_level return minimum negative compression level allowed.","is_multi":false,"pos":{"len":64,"line_nr":375,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn min_c_level() int","name":"min_c_level","parent_name":"","return_type":"int","pos":{"len":24,"line_nr":376,"pos":17217,"col":0,"last_line":378},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 max_c_level return maximum compression level available.","is_multi":false,"pos":{"len":57,"line_nr":380,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn max_c_level() int","name":"max_c_level","parent_name":"","return_type":"int","pos":{"len":24,"line_nr":381,"pos":17333,"col":0,"last_line":383},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 default_c_level return default compression level.","is_multi":false,"pos":{"len":51,"line_nr":385,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn default_c_level() int","name":"default_c_level","parent_name":"","return_type":"int","pos":{"len":28,"line_nr":386,"pos":17443,"col":0,"last_line":388},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"struct CompressParams {\n\tcompression_level int // 1~22\n\tnb_threads        int  = 1 // how many threads will be spawned to compress in parallel\n\tchecksum_flag     bool = true\n\tstrategy          ZSTD_strategy = ZSTD_strategy.zstd_default\n}","name":"CompressParams","parent_name":"","return_type":"","pos":{"len":25,"line_nr":391,"pos":17518,"col":0,"last_line":396},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 compresses an array of bytes using zstd and returns the compressed bytes in a new array","is_multi":false,"pos":{"len":89,"line_nr":398,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 extra compression parameters can be set by `params`","is_multi":false,"pos":{"len":53,"line_nr":399,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: compressed := zstd.compress(b)!","is_multi":false,"pos":{"len":42,"line_nr":400,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn compress(data []u8, params CompressParams) ![]u8","name":"compress","parent_name":"","return_type":"![]u8","pos":{"len":55,"line_nr":401,"pos":17951,"col":0,"last_line":420},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"struct DecompressParams {\n\twindow_log_max int\n}","name":"DecompressParams","parent_name":"","return_type":"","pos":{"len":27,"line_nr":423,"pos":18758,"col":0,"last_line":425},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 decompresses an array of bytes using zstd and returns the decompressed bytes in a new array","is_multi":false,"pos":{"len":93,"line_nr":427,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 extra decompression parameters can be set by `params`","is_multi":false,"pos":{"len":55,"line_nr":428,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: decompressed := zstd.decompress(b)!","is_multi":false,"pos":{"len":46,"line_nr":429,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn decompress(data []u8, params DecompressParams) ![]u8","name":"decompress","parent_name":"","return_type":"![]u8","pos":{"len":59,"line_nr":430,"pos":19011,"col":0,"last_line":443},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ZSTD_CCtx zstd compression context struct","is_multi":false,"pos":{"len":43,"line_nr":447,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 set_parameter set compression parameter `c_param` to value `val`","is_multi":false,"pos":{"len":66,"line_nr":467,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn (mut u ZSTD_CCtx) set_parameter(c_param ZSTD_cParameter, val int) usize","name":"set_parameter","parent_name":"ZSTD_CCtx","return_type":"usize","pos":{"len":78,"line_nr":468,"pos":20562,"col":0,"last_line":470},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 compress_stream2 do stream compress on `input`, and store compressed data in `output`.","is_multi":false,"pos":{"len":88,"line_nr":472,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `mode`:","is_multi":false,"pos":{"len":9,"line_nr":473,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \t.zstd_e_continue => continue stream compression.","is_multi":false,"pos":{"len":51,"line_nr":474,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \t.zstd_e_flush => flush data","is_multi":false,"pos":{"len":30,"line_nr":475,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \t.zstd_e_end => it is the last frame","is_multi":false,"pos":{"len":38,"line_nr":476,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn (mut u ZSTD_CCtx) compress_stream2(output &ZSTD_outBuffer, input &ZSTD_inBuffer, mode ZSTD_EndDirective) usize","name":"compress_stream2","parent_name":"ZSTD_CCtx","return_type":"usize","pos":{"len":117,"line_nr":477,"pos":20923,"col":0,"last_line":479},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 free_cctx free a compression context","is_multi":false,"pos":{"len":38,"line_nr":481,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn (mut u ZSTD_CCtx) free_cctx() usize","name":"free_cctx","parent_name":"ZSTD_CCtx","return_type":"usize","pos":{"len":42,"line_nr":482,"pos":21142,"col":0,"last_line":484},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"type ZSTD_CCtx = C.ZSTD_CCtx","name":"ZSTD_CCtx","parent_name":"","return_type":"","pos":{"len":18,"line_nr":448,"pos":19785,"col":0,"last_line":448},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_cctx create a compression context","is_multi":false,"pos":{"len":39,"line_nr":450,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 extra compression parameters can be set by `params`","is_multi":false,"pos":{"len":53,"line_nr":451,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn new_cctx(params CompressParams) !&ZSTD_CCtx","name":"new_cctx","parent_name":"","return_type":"ZSTD_CCtx","pos":{"len":50,"line_nr":452,"pos":19915,"col":0,"last_line":465},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ZSTD_DCtx zstd decompression context struct","is_multi":false,"pos":{"len":45,"line_nr":488,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 set_parameter set decompression parameter `d_param` to value `val`","is_multi":false,"pos":{"len":68,"line_nr":502,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn (mut u ZSTD_DCtx) set_parameter(d_param ZSTD_dParameter, val int) usize","name":"set_parameter","parent_name":"ZSTD_DCtx","return_type":"usize","pos":{"len":78,"line_nr":503,"pos":21734,"col":0,"last_line":505},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 decompress_stream do stream decompress on `input`, and store decompressed data in `output`.","is_multi":false,"pos":{"len":93,"line_nr":507,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 return remaining bytes in `input` stream","is_multi":false,"pos":{"len":42,"line_nr":508,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn (mut u ZSTD_DCtx) decompress_stream(output &ZSTD_outBuffer, input &ZSTD_inBuffer) usize","name":"decompress_stream","parent_name":"ZSTD_DCtx","return_type":"usize","pos":{"len":94,"line_nr":509,"pos":22008,"col":0,"last_line":511},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 free_cctx free a compression context","is_multi":false,"pos":{"len":38,"line_nr":513,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn (mut u ZSTD_DCtx) free_dctx() usize","name":"free_dctx","parent_name":"ZSTD_DCtx","return_type":"usize","pos":{"len":42,"line_nr":514,"pos":22199,"col":0,"last_line":516},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"type ZSTD_DCtx = C.ZSTD_DCtx","name":"ZSTD_DCtx","parent_name":"","return_type":"","pos":{"len":18,"line_nr":489,"pos":21288,"col":0,"last_line":489},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_dctx create a decompression context","is_multi":false,"pos":{"len":41,"line_nr":491,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 extra decompression parameters can be set by `params`","is_multi":false,"pos":{"len":55,"line_nr":492,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn new_dctx(params DecompressParams) !&ZSTD_DCtx","name":"new_dctx","parent_name":"","return_type":"ZSTD_DCtx","pos":{"len":52,"line_nr":493,"pos":21422,"col":0,"last_line":500},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 store_array compress an `array`'s data, and store it to file `fname`.","is_multi":false,"pos":{"len":71,"line_nr":518,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 extra compression parameters can be set by `params`","is_multi":false,"pos":{"len":53,"line_nr":519,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WARNING: Because struct padding, some data in struct may be marked unused.","is_multi":false,"pos":{"len":76,"line_nr":520,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 So, when `store_array`, it will cause memory fsanitize fail with 'use-of-uninitialized-value'.","is_multi":false,"pos":{"len":96,"line_nr":521,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It can be safely ignored.","is_multi":false,"pos":{"len":27,"line_nr":522,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 For example, following struct may cause memory fsanitize fail:","is_multi":false,"pos":{"len":64,"line_nr":523,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 struct MemoryTrace {","is_multi":false,"pos":{"len":22,"line_nr":524,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \toperation u8","is_multi":false,"pos":{"len":15,"line_nr":525,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \taddress   u64","is_multi":false,"pos":{"len":16,"line_nr":526,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \tsize      u8","is_multi":false,"pos":{"len":15,"line_nr":527,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 }","is_multi":false,"pos":{"len":3,"line_nr":528,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 By changing it into following , you can pass the memory fsanitize check :","is_multi":false,"pos":{"len":75,"line_nr":529,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 struct MemoryTrace {","is_multi":false,"pos":{"len":22,"line_nr":530,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \toperation u64","is_multi":false,"pos":{"len":16,"line_nr":531,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \taddress   u64","is_multi":false,"pos":{"len":16,"line_nr":532,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \tsize      u64","is_multi":false,"pos":{"len":16,"line_nr":533,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 }","is_multi":false,"pos":{"len":3,"line_nr":534,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn store_array[T](fname string, array []T, params CompressParams) !","name":"store_array","parent_name":"","return_type":"!","pos":{"len":71,"line_nr":535,"pos":22915,"col":0,"last_line":575},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 load_array return an array which data is decompressed from a file `fname`.","is_multi":false,"pos":{"len":76,"line_nr":577,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 extra decompression parameters can be set by `params`","is_multi":false,"pos":{"len":55,"line_nr":578,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\compress\\zstd\\zstd.v","content":"fn load_array[T](fname string, params DecompressParams) ![]T","name":"load_array","parent_name":"","return_type":"![]T","pos":{"len":64,"line_nr":579,"pos":24208,"col":0,"last_line":635},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-02-05 19:45:29"}