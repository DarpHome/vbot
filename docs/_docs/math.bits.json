{"module_name":"math.bits","description":"","contents":[{"attributes":{},"comments":[{"text":"\u0001 --- LeadingZeros ---","is_multi":false,"pos":{"len":22,"line_nr":24,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 leading_zeros_8 returns the number of leading zero bits in x; the result is 8 for x == 0.","is_multi":false,"pos":{"len":91,"line_nr":25,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn leading_zeros_8(x u8) int","name":"leading_zeros_8","parent_name":"","return_type":"int","pos":{"len":32,"line_nr":26,"pos":1100,"col":0,"last_line":28},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 leading_zeros_16 returns the number of leading zero bits in x; the result is 16 for x == 0.","is_multi":false,"pos":{"len":93,"line_nr":30,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn leading_zeros_16(x u16) int","name":"leading_zeros_16","parent_name":"","return_type":"int","pos":{"len":34,"line_nr":31,"pos":1254,"col":0,"last_line":33},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 leading_zeros_32 returns the number of leading zero bits in x; the result is 32 for x == 0.","is_multi":false,"pos":{"len":93,"line_nr":35,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn leading_zeros_32(x u32) int","name":"leading_zeros_32","parent_name":"","return_type":"int","pos":{"len":34,"line_nr":36,"pos":1412,"col":0,"last_line":38},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 leading_zeros_64 returns the number of leading zero bits in x; the result is 64 for x == 0.","is_multi":false,"pos":{"len":93,"line_nr":40,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn leading_zeros_64(x u64) int","name":"leading_zeros_64","parent_name":"","return_type":"int","pos":{"len":34,"line_nr":41,"pos":1570,"col":0,"last_line":43},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 --- TrailingZeros ---","is_multi":false,"pos":{"len":23,"line_nr":45,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 trailing_zeros_8 returns the number of trailing zero bits in x; the result is 8 for x == 0.","is_multi":false,"pos":{"len":93,"line_nr":46,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn trailing_zeros_8(x u8) int","name":"trailing_zeros_8","parent_name":"","return_type":"int","pos":{"len":33,"line_nr":47,"pos":1753,"col":0,"last_line":49},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 trailing_zeros_16 returns the number of trailing zero bits in x; the result is 16 for x == 0.","is_multi":false,"pos":{"len":95,"line_nr":51,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn trailing_zeros_16(x u16) int","name":"trailing_zeros_16","parent_name":"","return_type":"int","pos":{"len":35,"line_nr":52,"pos":1915,"col":0,"last_line":58},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 trailing_zeros_32 returns the number of trailing zero bits in x; the result is 32 for x == 0.","is_multi":false,"pos":{"len":95,"line_nr":60,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn trailing_zeros_32(x u32) int","name":"trailing_zeros_32","parent_name":"","return_type":"int","pos":{"len":35,"line_nr":61,"pos":2195,"col":0,"last_line":67},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 trailing_zeros_64 returns the number of trailing zero bits in x; the result is 64 for x == 0.","is_multi":false,"pos":{"len":95,"line_nr":69,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn trailing_zeros_64(x u64) int","name":"trailing_zeros_64","parent_name":"","return_type":"int","pos":{"len":35,"line_nr":70,"pos":2472,"col":0,"last_line":86},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 --- OnesCount ---","is_multi":false,"pos":{"len":19,"line_nr":88,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ones_count_8 returns the number of one bits (\"population count\") in x.","is_multi":false,"pos":{"len":72,"line_nr":89,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn ones_count_8(x u8) int","name":"ones_count_8","parent_name":"","return_type":"int","pos":{"len":29,"line_nr":90,"pos":3376,"col":0,"last_line":92},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ones_count_16 returns the number of one bits (\"population count\") in x.","is_multi":false,"pos":{"len":73,"line_nr":94,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn ones_count_16(x u16) int","name":"ones_count_16","parent_name":"","return_type":"int","pos":{"len":31,"line_nr":95,"pos":3512,"col":0,"last_line":97},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ones_count_32 returns the number of one bits (\"population count\") in x.","is_multi":false,"pos":{"len":73,"line_nr":99,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn ones_count_32(x u32) int","name":"ones_count_32","parent_name":"","return_type":"int","pos":{"len":31,"line_nr":100,"pos":3682,"col":0,"last_line":103},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ones_count_64 returns the number of one bits (\"population count\") in x.","is_multi":false,"pos":{"len":73,"line_nr":105,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn ones_count_64(x u64) int","name":"ones_count_64","parent_name":"","return_type":"int","pos":{"len":31,"line_nr":106,"pos":3910,"col":0,"last_line":133},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 --- RotateLeft ---","is_multi":false,"pos":{"len":20,"line_nr":140,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 rotate_left_8 returns the value of x rotated left by (k mod 8) bits.","is_multi":false,"pos":{"len":70,"line_nr":141,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 To rotate x right by k bits, call rotate_left_8(x, -k).","is_multi":false,"pos":{"len":57,"line_nr":142,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":143,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":144,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn rotate_left_8(x u8, k int) u8","name":"rotate_left_8","parent_name":"","return_type":"u8","pos":{"len":36,"line_nr":146,"pos":5277,"col":0,"last_line":149},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rotate_left_16 returns the value of x rotated left by (k mod 16) bits.","is_multi":false,"pos":{"len":72,"line_nr":151,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 To rotate x right by k bits, call rotate_left_16(x, -k).","is_multi":false,"pos":{"len":58,"line_nr":152,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":153,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":154,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn rotate_left_16(x u16, k int) u16","name":"rotate_left_16","parent_name":"","return_type":"u16","pos":{"len":39,"line_nr":156,"pos":5603,"col":0,"last_line":159},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rotate_left_32 returns the value of x rotated left by (k mod 32) bits.","is_multi":false,"pos":{"len":72,"line_nr":161,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 To rotate x right by k bits, call rotate_left_32(x, -k).","is_multi":false,"pos":{"len":58,"line_nr":162,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":163,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":164,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn rotate_left_32(x u32, k int) u32","name":"rotate_left_32","parent_name":"","return_type":"u32","pos":{"len":39,"line_nr":166,"pos":5936,"col":0,"last_line":169},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rotate_left_64 returns the value of x rotated left by (k mod 64) bits.","is_multi":false,"pos":{"len":72,"line_nr":171,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 To rotate x right by k bits, call rotate_left_64(x, -k).","is_multi":false,"pos":{"len":58,"line_nr":172,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":173,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":174,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn rotate_left_64(x u64, k int) u64","name":"rotate_left_64","parent_name":"","return_type":"u64","pos":{"len":39,"line_nr":176,"pos":6269,"col":0,"last_line":179},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 --- Reverse ---","is_multi":false,"pos":{"len":17,"line_nr":181,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 reverse_8 returns the value of x with its bits in reversed order.","is_multi":false,"pos":{"len":67,"line_nr":182,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn reverse_8(x u8) u8","name":"reverse_8","parent_name":"","return_type":"u8","pos":{"len":25,"line_nr":184,"pos":6488,"col":0,"last_line":186},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reverse_16 returns the value of x with its bits in reversed order.","is_multi":false,"pos":{"len":68,"line_nr":188,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn reverse_16(x u16) u16","name":"reverse_16","parent_name":"","return_type":"u16","pos":{"len":28,"line_nr":190,"pos":6620,"col":0,"last_line":192},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reverse_32 returns the value of x with its bits in reversed order.","is_multi":false,"pos":{"len":68,"line_nr":194,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn reverse_32(x u32) u32","name":"reverse_32","parent_name":"","return_type":"u32","pos":{"len":28,"line_nr":196,"pos":6804,"col":0,"last_line":201},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reverse_64 returns the value of x with its bits in reversed order.","is_multi":false,"pos":{"len":68,"line_nr":203,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn reverse_64(x u64) u64","name":"reverse_64","parent_name":"","return_type":"u64","pos":{"len":28,"line_nr":205,"pos":7200,"col":0,"last_line":210},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 --- ReverseBytes ---","is_multi":false,"pos":{"len":22,"line_nr":212,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 reverse_bytes_16 returns the value of x with its bytes in reversed order.","is_multi":false,"pos":{"len":75,"line_nr":213,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":214,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":215,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn reverse_bytes_16(x u16) u16","name":"reverse_bytes_16","parent_name":"","return_type":"u16","pos":{"len":34,"line_nr":217,"pos":7680,"col":0,"last_line":219},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reverse_bytes_32 returns the value of x with its bytes in reversed order.","is_multi":false,"pos":{"len":75,"line_nr":221,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":222,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":223,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn reverse_bytes_32(x u32) u32","name":"reverse_bytes_32","parent_name":"","return_type":"u32","pos":{"len":34,"line_nr":225,"pos":7903,"col":0,"last_line":228},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reverse_bytes_64 returns the value of x with its bytes in reversed order.","is_multi":false,"pos":{"len":75,"line_nr":230,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":231,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":232,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn reverse_bytes_64(x u64) u64","name":"reverse_bytes_64","parent_name":"","return_type":"u64","pos":{"len":34,"line_nr":234,"pos":8217,"col":0,"last_line":238},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 --- Len ---","is_multi":false,"pos":{"len":13,"line_nr":240,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 len_8 returns the minimum number of bits required to represent x; the result is 0 for x == 0.","is_multi":false,"pos":{"len":95,"line_nr":241,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn len_8(x u8) int","name":"len_8","parent_name":"","return_type":"int","pos":{"len":22,"line_nr":242,"pos":8572,"col":0,"last_line":244},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 len_16 returns the minimum number of bits required to represent x; the result is 0 for x == 0.","is_multi":false,"pos":{"len":96,"line_nr":246,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn len_16(x u16) int","name":"len_16","parent_name":"","return_type":"int","pos":{"len":24,"line_nr":247,"pos":8724,"col":0,"last_line":255},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 len_32 returns the minimum number of bits required to represent x; the result is 0 for x == 0.","is_multi":false,"pos":{"len":96,"line_nr":257,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn len_32(x u32) int","name":"len_32","parent_name":"","return_type":"int","pos":{"len":24,"line_nr":258,"pos":8945,"col":0,"last_line":270},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 len_64 returns the minimum number of bits required to represent x; the result is 0 for x == 0.","is_multi":false,"pos":{"len":96,"line_nr":272,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn len_64(x u64) int","name":"len_64","parent_name":"","return_type":"int","pos":{"len":24,"line_nr":273,"pos":9213,"col":0,"last_line":289},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 --- Add with carry ---","is_multi":false,"pos":{"len":24,"line_nr":291,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Add returns the sum with carry of x, y and carry: sum = x + y + carry.","is_multi":false,"pos":{"len":72,"line_nr":292,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The carry input must be 0 or 1; otherwise the behavior is undefined.","is_multi":false,"pos":{"len":70,"line_nr":293,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The carryOut output is guaranteed to be 0 or 1.","is_multi":false,"pos":{"len":49,"line_nr":294,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":295,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 add_32 returns the sum with carry of x, y and carry: sum = x + y + carry.","is_multi":false,"pos":{"len":75,"line_nr":296,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The carry input must be 0 or 1; otherwise the behavior is undefined.","is_multi":false,"pos":{"len":70,"line_nr":297,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The carryOut output is guaranteed to be 0 or 1.","is_multi":false,"pos":{"len":49,"line_nr":298,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":299,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":300,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn add_32(x u32, y u32, carry u32) (u32, u32)","name":"add_32","parent_name":"","return_type":"(u32, u32)","pos":{"len":49,"line_nr":301,"pos":9946,"col":0,"last_line":306},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 add_64 returns the sum with carry of x, y and carry: sum = x + y + carry.","is_multi":false,"pos":{"len":75,"line_nr":308,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The carry input must be 0 or 1; otherwise the behavior is undefined.","is_multi":false,"pos":{"len":70,"line_nr":309,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The carryOut output is guaranteed to be 0 or 1.","is_multi":false,"pos":{"len":49,"line_nr":310,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":311,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":312,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn add_64(x u64, y u64, carry u64) (u64, u64)","name":"add_64","parent_name":"","return_type":"(u64, u64)","pos":{"len":49,"line_nr":313,"pos":10381,"col":0,"last_line":320},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 --- Subtract with borrow ---","is_multi":false,"pos":{"len":30,"line_nr":322,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Sub returns the difference of x, y and borrow: diff = x - y - borrow.","is_multi":false,"pos":{"len":71,"line_nr":323,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The borrow input must be 0 or 1; otherwise the behavior is undefined.","is_multi":false,"pos":{"len":71,"line_nr":324,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The borrowOut output is guaranteed to be 0 or 1.","is_multi":false,"pos":{"len":50,"line_nr":325,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":326,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 sub_32 returns the difference of x, y and borrow, diff = x - y - borrow.","is_multi":false,"pos":{"len":74,"line_nr":327,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The borrow input must be 0 or 1; otherwise the behavior is undefined.","is_multi":false,"pos":{"len":71,"line_nr":328,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The borrowOut output is guaranteed to be 0 or 1.","is_multi":false,"pos":{"len":50,"line_nr":329,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":330,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":331,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn sub_32(x u32, y u32, borrow u32) (u32, u32)","name":"sub_32","parent_name":"","return_type":"(u32, u32)","pos":{"len":50,"line_nr":332,"pos":11241,"col":0,"last_line":340},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sub_64 returns the difference of x, y and borrow: diff = x - y - borrow.","is_multi":false,"pos":{"len":74,"line_nr":342,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The borrow input must be 0 or 1; otherwise the behavior is undefined.","is_multi":false,"pos":{"len":71,"line_nr":343,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The borrowOut output is guaranteed to be 0 or 1.","is_multi":false,"pos":{"len":50,"line_nr":344,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":345,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":346,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn sub_64(x u64, y u64, borrow u64) (u64, u64)","name":"sub_64","parent_name":"","return_type":"(u64, u64)","pos":{"len":50,"line_nr":347,"pos":11938,"col":0,"last_line":352},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 mul_32 returns the 64-bit product of x and y: (hi, lo) = x * y","is_multi":false,"pos":{"len":64,"line_nr":360,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 with the product bits' upper half returned in hi and the lower","is_multi":false,"pos":{"len":64,"line_nr":361,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 half returned in lo.","is_multi":false,"pos":{"len":22,"line_nr":362,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":363,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":364,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn mul_32(x u32, y u32) (u32, u32)","name":"mul_32","parent_name":"","return_type":"(u32, u32)","pos":{"len":38,"line_nr":365,"pos":12516,"col":0,"last_line":370},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 mul_64 returns the 128-bit product of x and y: (hi, lo) = x * y","is_multi":false,"pos":{"len":65,"line_nr":372,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 with the product bits' upper half returned in hi and the lower","is_multi":false,"pos":{"len":64,"line_nr":373,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 half returned in lo.","is_multi":false,"pos":{"len":22,"line_nr":374,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":375,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function's execution time does not depend on the inputs.","is_multi":false,"pos":{"len":63,"line_nr":376,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn mul_64(x u64, y u64) (u64, u64)","name":"mul_64","parent_name":"","return_type":"(u64, u64)","pos":{"len":38,"line_nr":377,"pos":12862,"col":0,"last_line":390},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 --- Full-width divide ---","is_multi":false,"pos":{"len":27,"line_nr":392,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 div_32 returns the quotient and remainder of (hi, lo) divided by y:","is_multi":false,"pos":{"len":69,"line_nr":393,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper","is_multi":false,"pos":{"len":66,"line_nr":394,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 half in parameter hi and the lower half in parameter lo.","is_multi":false,"pos":{"len":58,"line_nr":395,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 div_32 panics for y == 0 (division by zero) or y <= hi (quotient overflow).","is_multi":false,"pos":{"len":77,"line_nr":396,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn div_32(hi u32, lo u32, y u32) (u32, u32)","name":"div_32","parent_name":"","return_type":"(u32, u32)","pos":{"len":47,"line_nr":397,"pos":13449,"col":0,"last_line":405},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 div_64 returns the quotient and remainder of (hi, lo) divided by y:","is_multi":false,"pos":{"len":69,"line_nr":407,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper","is_multi":false,"pos":{"len":66,"line_nr":408,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 half in parameter hi and the lower half in parameter lo.","is_multi":false,"pos":{"len":58,"line_nr":409,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 div_64 panics for y == 0 (division by zero) or y <= hi (quotient overflow).","is_multi":false,"pos":{"len":77,"line_nr":410,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn div_64(hi u64, lo u64, y1 u64) (u64, u64)","name":"div_64","parent_name":"","return_type":"(u64, u64)","pos":{"len":48,"line_nr":411,"pos":13933,"col":0,"last_line":468},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rem_32 returns the remainder of (hi, lo) divided by y. Rem32 panics","is_multi":false,"pos":{"len":69,"line_nr":470,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 for y == 0 (division by zero) but, unlike Div32, it doesn't panic","is_multi":false,"pos":{"len":67,"line_nr":471,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 on a quotient overflow.","is_multi":false,"pos":{"len":25,"line_nr":472,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn rem_32(hi u32, lo u32, y u32) u32","name":"rem_32","parent_name":"","return_type":"u32","pos":{"len":40,"line_nr":473,"pos":15900,"col":0,"last_line":475},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rem_64 returns the remainder of (hi, lo) divided by y. Rem64 panics","is_multi":false,"pos":{"len":69,"line_nr":477,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 for y == 0 (division by zero) but, unlike div_64, it doesn't panic","is_multi":false,"pos":{"len":68,"line_nr":478,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 on a quotient overflow.","is_multi":false,"pos":{"len":25,"line_nr":479,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn rem_64(hi u64, lo u64, y u64) u64","name":"rem_64","parent_name":"","return_type":"u64","pos":{"len":40,"line_nr":480,"pos":16164,"col":0,"last_line":489},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 normalize returns a normal number y and exponent exp","is_multi":false,"pos":{"len":54,"line_nr":491,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 satisfying x == y × 2**exp. It assumes x is finite and non-zero.","is_multi":false,"pos":{"len":67,"line_nr":492,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\bits.v","content":"fn normalize(x f64) (f64, int)","name":"normalize","parent_name":"","return_type":"(f64, int)","pos":{"len":34,"line_nr":493,"pos":16618,"col":0,"last_line":503},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32_bits returns the IEEE 754 binary representation of f,","is_multi":false,"pos":{"len":59,"line_nr":5,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 with the sign bit of f and the result in the same bit position.","is_multi":false,"pos":{"len":65,"line_nr":6,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 f32_bits(f32_from_bits(x)) == x.","is_multi":false,"pos":{"len":34,"line_nr":7,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\unsafe_bits.v","content":"fn f32_bits(f f32) u32","name":"f32_bits","parent_name":"","return_type":"u32","pos":{"len":26,"line_nr":9,"pos":357,"col":0,"last_line":12},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32_from_bits returns the floating-point number corresponding","is_multi":false,"pos":{"len":63,"line_nr":14,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 to the IEEE 754 binary representation b, with the sign bit of b","is_multi":false,"pos":{"len":65,"line_nr":15,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and the result in the same bit position.","is_multi":false,"pos":{"len":42,"line_nr":16,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 f32_from_bits(f32_bits(x)) == x.","is_multi":false,"pos":{"len":34,"line_nr":17,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\unsafe_bits.v","content":"fn f32_from_bits(b u32) f32","name":"f32_from_bits","parent_name":"","return_type":"f32","pos":{"len":31,"line_nr":19,"pos":648,"col":0,"last_line":22},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64_bits returns the IEEE 754 binary representation of f,","is_multi":false,"pos":{"len":59,"line_nr":24,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 with the sign bit of f and the result in the same bit position,","is_multi":false,"pos":{"len":65,"line_nr":25,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and f64_bits(f64_from_bits(x)) == x.","is_multi":false,"pos":{"len":38,"line_nr":26,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\unsafe_bits.v","content":"fn f64_bits(f f64) u64","name":"f64_bits","parent_name":"","return_type":"u64","pos":{"len":26,"line_nr":28,"pos":900,"col":0,"last_line":31},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64_from_bits returns the floating-point number corresponding","is_multi":false,"pos":{"len":63,"line_nr":33,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 to the IEEE 754 binary representation b, with the sign bit of b","is_multi":false,"pos":{"len":65,"line_nr":34,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and the result in the same bit position.","is_multi":false,"pos":{"len":42,"line_nr":35,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 f64_from_bits(f64_bits(x)) == x.","is_multi":false,"pos":{"len":34,"line_nr":36,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\math\\bits\\unsafe_bits.v","content":"fn f64_from_bits(b u64) f64","name":"f64_from_bits","parent_name":"","return_type":"f64","pos":{"len":31,"line_nr":38,"pos":1191,"col":0,"last_line":41},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:34"}