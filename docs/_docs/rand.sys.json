{"module_name":"rand.sys","contents":[{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 Implementation note:","is_multi":false,"pos":{"len":22,"line_nr":9,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ====================","is_multi":false,"pos":{"len":22,"line_nr":10,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 C.rand returns a pseudorandom integer from 0 (inclusive) to C.RAND_MAX (exclusive)","is_multi":false,"pos":{"len":84,"line_nr":11,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 C.rand() is okay to use within its defined range.","is_multi":false,"pos":{"len":51,"line_nr":12,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 (See: https://web.archive.org/web/20180801210127/http://eternallyconfuzzled.com/arts/jsw_art_rand.aspx)","is_multi":false,"pos":{"len":105,"line_nr":13,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The problem is, this value varies with the libc implementation. On windows,","is_multi":false,"pos":{"len":77,"line_nr":14,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 for example, RAND_MAX is usually a measly 32767, whereas on (newer) linux it's generally","is_multi":false,"pos":{"len":90,"line_nr":15,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 2147483647. The repetition period also varies wildly. In order to provide more entropy","is_multi":false,"pos":{"len":88,"line_nr":16,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 without altering the underlying algorithm too much, this implementation simply","is_multi":false,"pos":{"len":80,"line_nr":17,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 requests for more random bits until the necessary width for the integers is achieved.","is_multi":false,"pos":{"len":87,"line_nr":18,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"const seed_len = 1","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":20,"pos":963,"col":0,"last_line":20},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 SysRNG is the PRNG provided by default in the libc implementiation that V uses.","is_multi":false,"pos":{"len":81,"line_nr":35,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 r.seed() sets the seed of the accepting SysRNG to the given data.","is_multi":false,"pos":{"len":67,"line_nr":42,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"fn (mut r SysRNG) seed(seed_data []u32)","name":"seed","parent_name":"SysRNG","return_type":"void","pos":{"len":43,"line_nr":43,"pos":1657,"col":0,"last_line":50},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 r.default_rand() exposes the default behavior of the system's RNG","is_multi":false,"pos":{"len":67,"line_nr":52,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 (equivalent to calling C.rand()). Recommended for testing/comparison","is_multi":false,"pos":{"len":70,"line_nr":53,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 b/w V and other languages using libc and not for regular use.","is_multi":false,"pos":{"len":63,"line_nr":54,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This is also a one-off feature of SysRNG, similar to the global seed","is_multi":false,"pos":{"len":70,"line_nr":55,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 situation. Other generators will not have this.","is_multi":false,"pos":{"len":49,"line_nr":56,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"fn (r SysRNG) default_rand() int","name":"default_rand","parent_name":"SysRNG","return_type":"int","pos":{"len":36,"line_nr":58,"pos":2191,"col":0,"last_line":60},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 byte returns a uniformly distributed pseudorandom 8-bit unsigned positive `byte`.","is_multi":false,"pos":{"len":83,"line_nr":62,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"fn (mut r SysRNG) u8() u8","name":"u8","parent_name":"SysRNG","return_type":"u8","pos":{"len":29,"line_nr":64,"pos":2345,"col":0,"last_line":76},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u16 returns a uniformly distributed pseudorandom 16-bit unsigned positive `u16`.","is_multi":false,"pos":{"len":82,"line_nr":78,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"fn (mut r SysRNG) u16() u16","name":"u16","parent_name":"SysRNG","return_type":"u16","pos":{"len":31,"line_nr":80,"pos":2702,"col":0,"last_line":92},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u32 returns a uniformly distributed pseudorandom 32-bit unsigned positive `u32`.","is_multi":false,"pos":{"len":82,"line_nr":94,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"fn (r SysRNG) u32() u32","name":"u32","parent_name":"SysRNG","return_type":"u32","pos":{"len":27,"line_nr":96,"pos":3083,"col":0,"last_line":102},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u64 returns a uniformly distributed pseudorandom 64-bit unsigned positive `u64`.","is_multi":false,"pos":{"len":82,"line_nr":104,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"fn (r SysRNG) u64() u64","name":"u64","parent_name":"SysRNG","return_type":"u64","pos":{"len":27,"line_nr":106,"pos":3355,"col":0,"last_line":112},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 block_size returns the number of bits that the RNG can produce in a single iteration.","is_multi":false,"pos":{"len":87,"line_nr":114,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"fn (r SysRNG) block_size() int","name":"block_size","parent_name":"SysRNG","return_type":"int","pos":{"len":34,"line_nr":116,"pos":3632,"col":0,"last_line":118},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 free should be called when the generator is no longer needed","is_multi":false,"pos":{"len":62,"line_nr":120,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"fn (mut rng SysRNG) free()","name":"free","parent_name":"SysRNG","return_type":"void","pos":{"len":30,"line_nr":122,"pos":3771,"col":0,"last_line":124},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\rand\\sys\\system_rng.c.v","content":"struct SysRNG {\n\tbuffer.PRNGBuffer\nmut:\n\tseed u32 = seed.time_seed_32()\n}","name":"SysRNG","parent_name":"","return_type":"","pos":{"len":17,"line_nr":36,"pos":1509,"col":0,"last_line":40},"platform":"cross","kind":"struct_","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-02-05 19:45:35"}