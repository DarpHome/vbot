{"module_name":"x.vweb","description":"# vweb - the V Web Server\n\nA simple yet powerful web server with built-in routing, parameter handling, templating, and other features.\n\n## Features\n\n- **Very fast** performance of C on the web.\n- **Easy to deploy** just one binary file that also includes all templates. No need to install any\ndependencies.- **Templates are precompiled** all errors are visible at compilation time, not at runtime.\n- **Middleware** functionality similair to other big frameworks.\n- **Controllers** to split up your apps logic.\n\n## Quick Start\n\nRun your vweb app with a live reload via `v -d vweb_livereload watch run .`\n\nNow modifying any file in your web app (whether it's a .v file with the backend logic or a compiled .html template file) will result in an instant refresh of your app in the browser. No need to quit the app, rebuild it, and refresh the page in the browser!\n\n## Deploying vweb apps\n\nAll the code, including HTML templates, is in one binary file. That's all you need to deploy. Use the `-prod` flag when building for production.\n\n## Getting Started\n\nTo start, you must import the module `x.vweb` and define a structure which will represent your app and a structure which will represent the context of a request. These structures must be declared with the `pub` keyword.\n\n**Example:**\n```v\nmodule main\n\nimport x.vweb\n\npub struct User {\npub mut:\nname string\nid   int\n}\n\n// Our context struct must embed `vweb.Context`!\npub struct Context {\nvweb.Context\npub mut:\n// In the context struct we store data that could be different\n// for each request. Like a User struct or a session id\nuser       User\nsession_id string\n}\n\npub struct App {\npub:\n// In the app struct we store data that should be accessible by all endpoints.\n// For example a database or configuration values.\nsecret_key string\n}\n\n// This is how endpoints are defined in vweb. This is the index route\npub fn (app &App) index(mut ctx Context) vweb.Result {\nreturn ctx.text('Hello V! The secret key is \"${app.secret_key}\"')\n}\n\nfn main() {\nmut app := &App{\nsecret_key: 'secret'\n}\n// Pass the App and context type and start the web server on port 8080\nvweb.run[App, Context](mut app, 8080)\n}\n```\n\nYou can use the `App` struct for data you want to keep during the lifetime of your program,\nor for data that you want to share between different routes.\n\nA new `Context` struct is created every time a request is received,\nso it can contain different data for each request.\n\n## Defining endpoints\n\nTo add endpoints to your web server, you must extend the `App` struct.\nFor routing you can either use auto-mapping of function names or specify the path as an attribute.\nThe function expects a parameter of your Context type and a response of the type `vweb.Result`.\n\n**Example:**\n```v ignore\n// This endpoint can be accessed via http://server:port/hello\npub fn (app &App) hello(mut ctx Context) vweb.Result {\nreturn ctx.text('Hello')\n}\n\n// This endpoint can be accessed via http://server:port/foo\n@['/foo']\npub fn (app &App) world(mut ctx Context) vweb.Result {\nreturn ctx.text('World')\n}\n```\n\n### HTTP verbs\n\nTo use any HTTP verbs (or methods, as they are properly called),\nsuch as `@[post]`, `@[get]`, `@[put]`, `@[patch]` or `@[delete]`\nyou can simply add the attribute before the function definition.\n\n**Example:**\n\n```v ignore\n// only GET requests to http://server:port/world are handled by this method\n@[get]\npub fn (app &App) world(mut ctx Context) vweb.Result {\nreturn ctx.text('World')\n}\n\n// only POST requests to http://server:port/product/create are handled by this method\n@['/product/create'; post]\npub fn (app &App) create_product(mut ctx Context) vweb.Result {\nreturn ctx.text('product')\n}\n```\n\nBy default endpoints are marked as GET requests only. It is also possible to\nadd multiple HTTP verbs per endpoint.\n\n**Example:**\n\n```v ignore\n// only GET and POST requests to http://server:port/login are handled by this method\n@['/login'; get; post]\npub fn (app &App) login(mut ctx Context) vweb.Result {\nif ctx.req.method == .get {\n// show the login page on a GET request\nreturn ctx.html('<h1>Login page</h1><p>todo: make form</p>')\n} else {\n// request method is POST\npassword := ctx.form['password']\n// validate password length\nif password.len < 12 {\nreturn ctx.text('password is too weak!')\n} else {\n// we receive a POST request, so we want to explicitly tell the browser\n// to send a GET request to the profile page.\nreturn ctx.redirect('/profile', .see_other)\n}\n}\n}\n```\n\n### Routes with Parameters\n\nParameters are passed directly to an endpoint route using the colon sign `:`. The route\nparameters are passed as arguments. V will cast the parameter to any of V's primitive types\n(`string`, `int` etc,).\n\nTo pass a parameter to an endpoint, you simply define it inside an attribute, e. g.\n`@['/hello/:user]`.\nAfter it is defined in the attribute, you have to add it as a function parameter.\n\n**Example:**\n\n```v ignore\n// V will pass the parameter 'user' as a string\nvvvv\n@['/hello/:user']                             vvvv\npub fn (app &App) hello_user(mut ctx Context, user string) vweb.Result {\nreturn ctx.text('Hello ${user}')\n}\n\n// V will pass the parameter 'id' as an int\nvv\n@['/document/:id']                              vv\npub fn (app &App) get_document(mut ctx Context, id int) vweb.Result {\nreturn ctx.text('Hello ${user}')\n}\n```\n\nIf we visit http://localhost:port/hello/vaesel we would see the text `Hello vaesel`.\n\n### Routes with Parameter Arrays\n\nIf you want multiple parameters in your route and if you want to parse the parameters\nyourself, or you want a wildcard route, you can add `...`  after the `:` and name,\ne.g. `@['/:path...']`.\n\nThis will match all routes after `'/'`. For example the url `/path/to/test` would give\n`path = '/path/to/test'`.\n\n```v ignore\nvvv\n@['/:path...']                              vvvv\npub fn (app &App) wildcard(mut ctx Context, path string) vweb.Result {\nreturn ctx.text('URL path = \"${path}\"')\n}\n```\n\n### Query, Form and Files\n\nYou have direct access to query values by accessing the `query` field on your context struct.\nYou are also able to access any formdata or files that were sent\nwith the request with the fields `.form` and `.files` respectively.\n\nIn the following example, visiting http://localhost:port/user?name=Vweb we\nwill see the text `Hello Vweb!`. And if we access the route without the `name` parameter,\nhttp://localhost:port/user, we will see the text `no user was found`,\n\n**Example:**\n```v ignore\n@['/user'; get]\npub fn (app &App) get_user_by_id(mut ctx Context) vweb.Result {\nuser_name := ctx.query['name'] or {\n// we can exit early and send a different response if no `name` parameter was passed\nreturn ctx.text('no user was found')\n}\n\nreturn ctx.text('Hello ${user_name}!')\n}\n```\n\n### Host\nTo restrict an endpoint to a specific host, you can use the `host` attribute\nfollowed by a colon `:` and the host name. You can test the Host feature locally\nby adding a host to the \"hosts\" file of your device.\n\n**Example:**\n\n```v ignore\n@['/'; host: 'example.com']\npub fn (app &App) hello_web(mut ctx Context) vweb.Result {\nreturn app.text('Hello World')\n}\n\n@['/'; host: 'api.example.org']\npub fn (app &App) hello_api(mut ctx Context) vweb.Result {\nreturn ctx.text('Hello API')\n}\n\n// define the handler without a host attribute last if you have conflicting paths.\n@['/']\npub fn (app &App) hello_others(mut ctx Context) vweb.Result {\nreturn ctx.text('Hello Others')\n}\n```\n\nYou can also [create a controller](#controller-with-hostname) to handle all requests from a specific\nhost in one app struct.\n\n### Route Matching Order\n\nVweb will match routes in the order that you define endpoints.\n\n**Example:**\n```v ignore\n@['/:path']\npub fn (app &App) with_parameter(mut ctx Context, path string) vweb.Result {\nreturn ctx.text('from with_parameter, path: \"${path}\"')\n}\n\n@['/normal']\npub fn (app &App) normal(mut ctx Context) vweb.Result {\nreturn ctx.text('from normal')\n}\n```\n\nIn this example we defined an endpoint with a parameter first. If we access our app\non the url http://localhost:port/normal we will not see `from normal`, but\n`from with_parameter, path: \"normal\"`.\n\n### Custom not found page\n\nYou can implement a `not_found` endpoint that is called when a request is made and no\nmatching route is found to replace the default HTTP 404 not found page. This route\nhas to be defined on our Context struct.\n\n**Example:**\n\n``` v ignore\npub fn (mut ctx Context) not_found() vweb.Result {\n// set HTTP status 404\nctx.res.set_status(.not_found)\nreturn ctx.html('<h1>Page not found!</h1>')\n}\n```\n\n## Static files\n\nVweb also provides a way of handling static files. We can mount a folder at the root\nof our web app, or at a custom route. To start using static files we have to embed\n`vweb.StaticHandler` on our app struct.\n\n**Example:**\n\nLet's say you have the following file structure:\n```\n.\n├── static/\n│   ├── css/\n│   │   └── main.css\n│   └── js/\n│       └── main.js\n└── main.v\n```\n\nIf we want all the documents inside the `static` sub-directory to be publicly accessible we can\nuse `handle_static`.\n\n> **Note:**\n> vweb will recursively search the folder you mount; all the files inside that folder\n> will be publicly available.\n\n*main.v*\n```v\nmodule main\n\nimport x.vweb\n\npub struct Context {\nvweb.Context\n}\n\npub struct App {\nvweb.StaticHandler\n}\n\nfn main() {\nmut app := &App{}\n\napp.handle_static('static', false)!\n\nvweb.run[App, Context](mut app, 8080)\n}\n```\n\nIf we start the app with `v run main.v` we can access our `main.css` file at\nhttp://localhost:8080/static/css/main.css\n\n### Mounting folders at specific locations\n\nIn the previous example the folder `static` was mounted at `/static`. We could also choose\nto mount the static folder at the root of our app: everything inside the `static` folder\nis available at `/`.\n\n**Example:**\n```v ignore\n// change the second argument to `true` to mount a folder at the app root\napp.handle_static('static', true)!\n```\nWe can now access `main.css` directly at http://localhost:8080/css/main.css\n\nIt is also possible to mount the `static` folder at a custom path.\n\n**Example:**\n```v ignore\n// mount the folder 'static' at path '/public', the path has to start with '/'\napp.mount_static_folder_at('static', '/public')\n```\n\nIf we run our app the `main.css` file is available at http://localhost:8080/public/main.css\n\n### Dealing with MIME types\n\nBy default vweb will map the extension of a file to a MIME type. If any of your static file's\nextensions do not have a default MIME type in vweb, vweb will throw an error and you\nhave to add your MIME type to `.static_mime_types` yourself.\n\n**Example:**\n\nLet's say you have the following file structure:\n```\n.\n├── static/\n│   └── file.what\n└── main.v\n```\n```v ignore\napp.handle_static('static', true)!\n```\nThis code will throw an error, because vweb has no default MIME type for a `.what` file extension.\n```\nunkown MIME type for file extension \".what\"\n```\nTo fix this we have to provide a MIME type for the `.what` file extension:\n```v ignore\napp.static_mime_types['.what'] = 'txt/plain'\napp.handle_static('static', true)!\n```\n\n\n## Middleware\n\nMiddleware in web development is (loosely defined) a hidden layer that sits between\nwhat a user requests (the HTTP Request) and what a user sees (the HTTP Response).\nWe can use this middleware layer to provide \"hidden\" functionality to our apps endpoints.\n\nTo use vweb's middleware we have to embed `vweb.Middleware` on our app struct and provide\nthe type of which context struct should be used.\n\n**Example:**\n```v ignore\npub struct App {\nvweb.Middleware[Context]\n}\n```\n\n### Use case\n\nWe could, for example, get the cookies for an HTTP request and check if the user has already\naccepted our cookie policy. Let's modify our Context struct to store whether the user has\naccepted our policy or not.\n\n**Example:**\n```v ignore\npub struct Context {\nvweb.Context\npub mut:\nhas_accepted_cookies bool\n}\n```\n\nIn vweb middleware functions take a `mut` parameter with the type of your context struct\nand must return `bool`. We have full access to modify our Context struct!\n\nThe return value indicates to vweb whether it can continue or has to stop. If we send a\nresponse to the client in a middleware function vweb has to stop, so we return `false`.\n\n**Example:**\n```v ignore\npub fn check_cookie_policy(mut ctx Context) bool {\n// get the cookie\ncookie_value := ctx.get_cookie('accepted_cookies') or { '' }\n// check if the cookie has been set\nif cookie_value == 'true' {\nctx.has_accepted_cookies = true\n}\n// we don't send a response, so we must return true\nreturn true\n}\n```\n\nWe can check this value in an endpoint and return a different response.\n\n**Example:**\n```v ignore\n@['/only-cookies']\npub fn (app &App) only_cookie_route(mut ctx Context) vweb.Result {\nif ctx.has_accepted_cookies {\nreturn ctx.text('Welcome!')\n} else {\nreturn ctx.text('You must accept the cookie policy!')\n}\n}\n```\n\nThere is one thing left for our middleware to work: we have to register our `only_cookie_route`\nfunction as middleware for our app. We must do this after the app is created and before the\napp is started.\n\n**Example:**\n```v ignore\nfn main() {\nmut app := &App{}\n\n// register middleware for all routes\napp.use(handler: only_cookie_route)\n\n// Pass the App and context type and start the web server on port 8080\nvweb.run[App, Context](mut app, 8080)\n}\n```\n\n### Types of middleware\n\nIn the previous example we used so called \"global\" middleware. This type of middleware\napplies to every endpoint defined on our app struct; global. It is also possible\nto register middleware for only a certain route(s).\n\n**Example:**\n```v ignore\n// register middleware only for the route '/auth'\napp.route_use('/auth', handler: auth_middleware)\n// register middleware only for the route '/documents/' with a parameter\n// e.g. '/documents/5'\napp.route_use('/documents/:id')\n// register middleware with a parameter array. The middleware will be registered\n// for all routes that start with '/user/' e.g. '/user/profile/update'\napp.route_use('/user/:path...')\n```\n\n### Evaluation moment\n\nBy default the registered middleware functions are executed *before* a method on your\napp struct is called. You can also change this behaviour to execute middleware functions\n*after* a method on your app struct is called, but before the response is sent!\n\n**Example:**\n```v ignore\npub fn modify_headers(mut ctx Context) bool {\n// add Content-Language: 'en-US' header to each response\nctx.res.header.add(.content_language, 'en-US')\nreturn true\n}\n```\n```v ignore\napp.use(handler: modify_headers, after: true)\n```\n\n#### When to use which type\n\nYou could use \"before\" middleware to check and modify the HTTP request and you could use\n\"after\" middleware to validate the HTTP response that will be sent or do some cleanup.\n\nAnything you can do in \"before\" middleware, you can do in \"after\" middleware.\n\n### Evaluation order\n\nVweb will handle requests in the following order:\n\n1. Execute global \"before\" middleware\n2. Execute \"before\" middleware that matches the requested route\n3. Execute the endpoint handler on your app struct\n4. Execute global \"after\" middleware\n5. Execute \"after\" middleware that matches the requested route\n\nIn each step, except for step `3`, vweb will evaluate the middleware in the order that\nthey are registered; when you call `app.use` or `app.route_use`.\n\n### Early exit\n\nIf any middleware sends a response (and thus must return `false`) vweb will not execute any\nother middleware, or the endpoint method, and immediately send the response.\n\n**Example:**\n```v ignore\npub fn early_exit(mut ctx Context) bool {\nctx.text('early exit')\n// we send a response from middleware, so we have to return false\nreturn false\n}\n\npub fn logger(mut ctx Context) bool {\nprintln('received request for \"${ctx.req.url}\"')\nreturn true\n}\n```\n```v ignore\napp.use(handler: early_exit)\napp.use(handler: logger)\n```\n\nBecause we register `early_exit` before `logger` our logging middleware will never be executed!\n\n## Controllers\n\nControllers can be used to split up your app logic so you are able to have one struct\nper \"route group\".  E.g. a struct `Admin` for urls starting with `'/admin'` and a struct `Foo`\nfor urls starting with `'/foo'`.\n\nTo use controllers we have to embed `vweb.Controller` on\nour app struct and when we register a controller we also have to specify\nwhat the type of the context struct will be. That means that is is possible\nto have a different context struct for each controller and the main app struct.\n\n**Example:**\n```v\nmodule main\n\nimport x.vweb\n\npub struct Context {\nvweb.Context\n}\n\npub struct App {\nvweb.Controller\n}\n\n// this endpoint will be available at '/'\npub fn (app &App) index(mut ctx Context) vweb.Result {\nreturn ctx.text('from app')\n}\n\npub struct Admin {}\n\n// this endpoint will be available at '/admin/'\npub fn (app &Admin) index(mut ctx Context) vweb.Result {\nreturn ctx.text('from admin')\n}\n\npub struct Foo {}\n\n// this endpoint will be available at '/foo/'\npub fn (app &Foo) index(mut ctx Context) vweb.Result {\nreturn ctx.text('from foo')\n}\n\nfn main() {\nmut app := &App{}\n\n// register the controllers the same way as how we start a vweb app\nmut admin_app := &Admin{}\napp.register_controller[Admin, Context]('/admin', mut admin_app)!\n\nmut foo_app := &Foo{}\napp.register_controller[Foo, Context]('/foo', mut foo_app)!\n\nvweb.run[App, Context](mut app, 8080)\n}\n```\n\nYou can do everything with a controller struct as with a regular `App` struct.\nRegister middleware, add static files and you can even register other controllers!\n\n### Routing\n\nAny route inside a controller struct is treated as a relative route to its controller namespace.\n\n```v ignore\n@['/path']\npub fn (app &Admin) path(mut ctx Context) vweb.Result {\nreturn ctx.text('Admin')\n}\n```\nWhen we registerted the controller with\n`app.register_controller[Admin, Context]('/admin', mut admin_app)!`\nwe told vweb that the namespace of that controller is `'/admin'` so in this example we would\nsee the text \"Admin\" if we navigate to the url `'/admin/path'`.\n\nVweb doesn't support duplicate routes, so if we add the following\nroute to the example the code will produce an error.\n\n```v ignore\n@['/admin/path']\npub fn (app &App) admin_path(mut ctx Context) vweb.Result {\nreturn ctx.text('Admin overwrite')\n}\n```\nThere will be an error, because the controller `Admin` handles all routes starting with\n`'/admin'`: the endpoint `admin_path` is unreachable.\n\n### Controller with hostname\n\nYou can also set a host for a controller. All requests coming to that host will be handled\nby the controller.\n\n**Example:**\n```v ignore\nstruct Example {}\n\n// You can only access this route at example.com: http://example.com/\npub fn (app &Example) index(mut ctx Context) vweb.Result {\nreturn ctx.text('Example')\n}\n```\n```v ignore\nmut example_app := &Example{}\n// set the controllers hostname to 'example.com' and handle all routes starting with '/',\n// we handle requests with any route to 'example.com'\napp.register_controller[Example, Context]('example.com', '/', mut example_app)!\n```\n\n## Context Methods\n\nvweb has a number of utility methods that make it easier to handle requests and send responses.\nThese methods are available on `vweb.Context` and directly on your own context struct if you\nembed `vweb.Context`. Below are some of te most used methods, look at the\n[standard library documentation](https://modules.vlang.io/) to see them all.\n\n### Request methods\n\nYou can directly access the HTTP request on the `.req` field.\n\n#### Get request headers\n\n**Example:**\n```v ignore\npub fn (app &App) index(mut ctx Context) vweb.Result {\ncontent_length := ctx.get_header(.content_length) or { '0' }\n// get custom header\ncustom_header := ctx.get_custom_header('X-HEADER') or { '' }\n// ...\n}\n```\n\n#### Get a cookie\n\n**Example:**\n```v ignore\npub fn (app &App) index(mut ctx Context) vweb.Result {\ncookie_val := ctx.get_cookie('token') or { '' }\n// ...\n}\n```\n\n### Response methods\n\nYou can directly modify the HTTP response by changing the `res` field,\nwhich is of the type `http.Response`.\n\n#### Send response with different MIME types\n\n```v ignore\n// send response HTTP_OK with content-type `text/html`\nctx.html('<h1>Hello world!</h1>')\n// send response HTTP_OK with content-type `text/plain`\nctx.text('Hello world!')\n// stringify the object and send response HTTP_OK with content-type `application/json`\nctx.json(User{\nname: 'test'\nage: 20\n})\n```\n\n#### Sending files\n\n**Example:**\n```v ignore\npub fn (app &App) file_response(mut ctx Context) vweb.Result {\n// send the file 'image.png' in folder 'data' to the user\nreturn ctx.file('data/image.png')\n}\n```\n\n#### Set response headers\n\n**Example:**\n```v ignore\npub fn (app &App) index(mut ctx Context) vweb.Result {\nctx.set_header(.accept, 'text/html')\n// set custom header\nctx.set_custom_header('X-HEADER', 'my-value')!\n// ...\n}\n```\n\n#### Set a cookie\n\n**Example:**\n```v ignore\npub fn (app &App) index(mut ctx Context) vweb.Result {\nctx.set_cookie(http.Cookie{\nname: 'token'\nvalue: 'true'\npath: '/'\nsecure: true\nhttp_only: true\n})\n// ...\n}\n```\n\n#### Redirect\n\nYou must pass the type of redirect to vweb:\n- `moved_permanently` HTTP code 301\n- `found` HTTP code 302\n- `see_other` HTTP code 303\n- `temporary_redirect` HTTP code 307\n- `permanent_redirect` HTTP code 308\n\n**Common use cases:**\n\nIf you want to change the request method, for example when you receive a post request and\nwant to redirect to another page via a GET request, you should use `see_other`. If you want\nthe HTTP method to stay the same you should use `found` generally speaking.\n\n**Example:**\n```v ignore\npub fn (app &App) index(mut ctx Context) vweb.Result {\ntoken := ctx.get_cookie('token') or { '' }\nif token == '' {\n// redirect the user to '/login' if the 'token' cookie is not set\n// we explicitly tell the browser to send a GET request\nreturn ctx.redirect('/login', .see_other)\n} else {\nreturn ctx.text('Welcome!')\n}\n}\n```\n\n#### Sending error responses\n\n**Example:**\n```v ignore\npub fn (app &App) login(mut ctx Context) vweb.Result {\nif username := ctx.form['username'] {\nreturn ctx.text('Hello \"${username}\"')\n} else {\n// send an HTTP 400 Bad Request response with a message\nreturn ctx.request_error('missing form value \"username\"')\n}\n}\n```\n\nYou can also use `ctx.server_error(msg string)` to send an HTTP 500 internal server\nerror with a message.\n\n## Advanced usage\n\nIf you need more controll over the TCP connection with a client, for example when\nyou want to keep the connection open. You can call `ctx.takeover_conn`.\n\nWhen this function is called you are free to do anything you want with the TCP\nconnection and vweb will not interfere. This means that we are responsible for\nsending a response over the connection and closing it.\n\n### Empty Result\n\nSometimes you want to send the response in another thread, for example when using\n[Server Sent Events](sse/README.md). When you are sure that a response will be sent\nover the TCP connection you can return `vweb.no_result()`. This function does nothinng\nand returns an empty `vweb.Result` struct, letting vweb know that we sent a response ourself.\n\n> **Note:**\n> It is important to call `ctx.takeover_conn` before you spawn a thread\n\n**Example:**\n```v\nmodule main\n\nimport net\nimport time\nimport x.vweb\n\npub struct Context {\nvweb.Context\n}\n\npub struct App {}\n\npub fn (app &App) index(mut ctx Context) vweb.Result {\nreturn ctx.text('hello!')\n}\n\n@['/long']\npub fn (app &App) long_response(mut ctx Context) vweb.Result {\n// let vweb know that the connection should not be closed\nctx.takeover_conn()\n// use spawn to handle the connection in another thread\n// if we don't the whole web server will block for 10 seconds,\n// since vweb is singlethreaded\nspawn handle_connection(mut ctx.conn)\n// we will send a custom response ourself, so we can safely return an empty result\nreturn vweb.no_result()\n}\n\nfn handle_connection(mut conn net.TcpConn) {\ndefer {\nconn.close() or {}\n}\n// block for 10 second\ntime.sleep(time.second * 10)\nconn.write_string('HTTP/1.1 200 OK\r\nContent-type: text/html\r\nContent-length: 15\r\n\r\nHello takeover!') or {}\n}\n\nfn main() {\nmut app := &App{}\nvweb.run[App, Context](mut app, 8080)\n}\n```\n","contents":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"enum RedirectType {\n\tmoved_permanently  = int(http.Status.moved_permanently)\n\tfound              = int(http.Status.found)\n\tsee_other          = int(http.Status.see_other)\n\ttemporary_redirect = int(http.Status.temporary_redirect)\n\tpermanent_redirect = int(http.Status.permanent_redirect)\n}","name":"RedirectType","parent_name":"","return_type":"","pos":{"len":21,"line_nr":12,"pos":105,"col":0,"last_line":18},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 The Context struct represents the Context which holds the HTTP request and response.","is_multi":false,"pos":{"len":86,"line_nr":20,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It has fields for the query, form, files and methods for handling the request and response","is_multi":false,"pos":{"len":92,"line_nr":21,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 returns the request header data from the key","is_multi":false,"pos":{"len":46,"line_nr":59,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (ctx &Context) get_header(key http.CommonHeader) !string","name":"get_header","parent_name":"Context","return_type":"!string","pos":{"len":63,"line_nr":60,"pos":1955,"col":0,"last_line":62},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 returns the request header data from the key","is_multi":false,"pos":{"len":46,"line_nr":64,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (ctx &Context) get_custom_header(key string) !string","name":"get_custom_header","parent_name":"Context","return_type":"!string","pos":{"len":59,"line_nr":65,"pos":2105,"col":0,"last_line":67},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set a header on the response object","is_multi":false,"pos":{"len":37,"line_nr":69,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) set_header(key http.CommonHeader, value string)","name":"set_header","parent_name":"Context","return_type":"void","pos":{"len":72,"line_nr":70,"pos":2249,"col":0,"last_line":72},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set a custom header on the response object","is_multi":false,"pos":{"len":44,"line_nr":74,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) set_custom_header(key string, value string) !","name":"set_custom_header","parent_name":"Context","return_type":"!","pos":{"len":70,"line_nr":75,"pos":2405,"col":0,"last_line":77},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 send_response_to_client finalizes the response headers and sets Content-Type to `mimetype`","is_multi":false,"pos":{"len":92,"line_nr":79,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and the response body to `response`","is_multi":false,"pos":{"len":37,"line_nr":80,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) send_response_to_client(mimetype string, response string) Result","name":"send_response_to_client","parent_name":"Context","return_type":"Result","pos":{"len":89,"line_nr":81,"pos":2654,"col":0,"last_line":120},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response HTTP_OK with s as payload with content-type `text/html`","is_multi":false,"pos":{"len":66,"line_nr":122,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) html(s string) Result","name":"html","parent_name":"Context","return_type":"Result","pos":{"len":46,"line_nr":123,"pos":4161,"col":0,"last_line":125},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response HTTP_OK with s as payload with content-type `text/plain`","is_multi":false,"pos":{"len":67,"line_nr":127,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) text(s string) Result","name":"text","parent_name":"Context","return_type":"Result","pos":{"len":46,"line_nr":128,"pos":4334,"col":0,"last_line":130},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response HTTP_OK with j as payload with content-type `application/json`","is_multi":false,"pos":{"len":73,"line_nr":132,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) json[T](j T) Result","name":"json","parent_name":"Context","return_type":"Result","pos":{"len":44,"line_nr":133,"pos":4514,"col":0,"last_line":136},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response HTTP_OK with a pretty-printed JSON result","is_multi":false,"pos":{"len":52,"line_nr":138,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) json_pretty[T](j T) Result","name":"json_pretty","parent_name":"Context","return_type":"Result","pos":{"len":51,"line_nr":139,"pos":4708,"col":0,"last_line":142},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO - test + turn read_file into streaming","is_multi":false,"pos":{"len":45,"line_nr":144,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Response HTTP_OK with file as payload","is_multi":false,"pos":{"len":39,"line_nr":145,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) file(file_path string) Result","name":"file","parent_name":"Context","return_type":"Result","pos":{"len":54,"line_nr":146,"pos":4950,"col":0,"last_line":169},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Response HTTP_OK with s as payload","is_multi":false,"pos":{"len":36,"line_nr":210,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) ok(s string) Result","name":"ok","parent_name":"Context","return_type":"Result","pos":{"len":44,"line_nr":211,"pos":6921,"col":0,"last_line":214},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 send an error 400 with a message","is_multi":false,"pos":{"len":34,"line_nr":216,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) request_error(msg string) Result","name":"request_error","parent_name":"Context","return_type":"Result","pos":{"len":57,"line_nr":217,"pos":7137,"col":0,"last_line":220},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 send an error 500 with a message","is_multi":false,"pos":{"len":34,"line_nr":222,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) server_error(msg string) Result","name":"server_error","parent_name":"Context","return_type":"Result","pos":{"len":56,"line_nr":223,"pos":7325,"col":0,"last_line":226},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Redirect to an url","is_multi":false,"pos":{"len":20,"line_nr":228,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) redirect(url string, redirect_type RedirectType) Result","name":"redirect","parent_name":"Context","return_type":"Result","pos":{"len":80,"line_nr":229,"pos":7508,"col":0,"last_line":235},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 before_request is always the first function that is executed and acts as middleware","is_multi":false,"pos":{"len":85,"line_nr":237,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) before_request() Result","name":"before_request","parent_name":"Context","return_type":"Result","pos":{"len":48,"line_nr":238,"pos":7848,"col":0,"last_line":240},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 returns a HTTP 404 response","is_multi":false,"pos":{"len":29,"line_nr":242,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) not_found() Result","name":"not_found","parent_name":"Context","return_type":"Result","pos":{"len":43,"line_nr":243,"pos":7950,"col":0,"last_line":246},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Gets a cookie by a key","is_multi":false,"pos":{"len":24,"line_nr":248,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (ctx &Context) get_cookie(key string) ?string","name":"get_cookie","parent_name":"Context","return_type":"?string","pos":{"len":52,"line_nr":249,"pos":8124,"col":0,"last_line":255},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Sets a cookie","is_multi":false,"pos":{"len":15,"line_nr":257,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) set_cookie(cookie http.Cookie)","name":"set_cookie","parent_name":"Context","return_type":"void","pos":{"len":55,"line_nr":258,"pos":8284,"col":0,"last_line":265},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_content_type sets the Content-Type header to `mime`","is_multi":false,"pos":{"len":57,"line_nr":267,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) set_content_type(mime string)","name":"set_content_type","parent_name":"Context","return_type":"void","pos":{"len":54,"line_nr":268,"pos":8593,"col":0,"last_line":270},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 takeover_conn prevents vweb from automatically sending a response and closing","is_multi":false,"pos":{"len":79,"line_nr":272,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the connection. You are responsible for closing the connection.","is_multi":false,"pos":{"len":65,"line_nr":273,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 In takeover mode if you call a Context method the response will be directly","is_multi":false,"pos":{"len":77,"line_nr":274,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 send over the connetion and you can send multiple responses.","is_multi":false,"pos":{"len":62,"line_nr":275,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function is usefull when you want to keep the connection alive and/or","is_multi":false,"pos":{"len":76,"line_nr":276,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 send multiple responses. Like with the SSE.","is_multi":false,"pos":{"len":45,"line_nr":277,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (mut ctx Context) takeover_conn()","name":"takeover_conn","parent_name":"Context","return_type":"void","pos":{"len":40,"line_nr":278,"pos":9094,"col":0,"last_line":280},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 user_agent returns the user-agent header for the current client","is_multi":false,"pos":{"len":65,"line_nr":282,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (ctx &Context) user_agent() string","name":"user_agent","parent_name":"Context","return_type":"string","pos":{"len":41,"line_nr":283,"pos":9228,"col":0,"last_line":285},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the ip address from the current user","is_multi":false,"pos":{"len":46,"line_nr":287,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"fn (ctx &Context) ip() string","name":"ip","parent_name":"Context","return_type":"string","pos":{"len":33,"line_nr":288,"pos":9373,"col":0,"last_line":301},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\context.v","content":"struct Context {\nmut:\n\t// vweb wil try to infer the content type base on file extension,\n\t// and if `content_type` is not empty the `Content-Type` header will always be\n\t// set to this value\n\tcontent_type string\n\t// done is set to true when a response can be sent over `conn`\n\tdone bool\n\t// if true the response should not be sent and the connection should be closed\n\t// manually.\n\ttakeover bool\n\t// how the http response should be handled by vweb's backend\n\treturn_type ContextReturnType = .normal\n\treturn_file string\npub:\n\t// TODO: move this to `handle_request`\n\t// time.ticks() from start of vweb connection handle.\n\t// You can use it to determine how much time is spent on your request.\n\tpage_gen_start i64\n\treq            http.Request\npub mut:\n\tcustom_mime_types map[string]string\n\t// TCP connection to client. Only for advanced usage!\n\tconn &net.TcpConn = unsafe { nil }\n\t// Map containing query params for the route.\n\t// http://localhost:3000/index?q=vpm&order_by=desc => { 'q': 'vpm', 'order_by': 'desc' }\n\tquery map[string]string\n\t// Multipart-form fields.\n\tform map[string]string\n\t// Files from multipart-form.\n\tfiles map[string][]http.FileData\n\tres   http.Response\n\t// use form_error to pass errors from the context to your frontend\n\tform_error                  string\n\tlivereload_poll_interval_ms int = 250\n}","name":"Context","parent_name":"","return_type":"","pos":{"len":18,"line_nr":22,"pos":581,"col":0,"last_line":57},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\controller.v","content":"struct ControllerPath {\npub:\n\tpath    string\n\thandler ControllerHandler = unsafe { nil }\npub mut:\n\thost string\n}","name":"ControllerPath","parent_name":"","return_type":"","pos":{"len":25,"line_nr":6,"pos":116,"col":0,"last_line":12},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 register_controller adds a new Controller to your app","is_multi":false,"pos":{"len":55,"line_nr":23,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\controller.v","content":"fn (mut c Controller) register_controller[A, X](path string, mut global_app A) !","name":"register_controller","parent_name":"Controller","return_type":"!","pos":{"len":84,"line_nr":24,"pos":424,"col":0,"last_line":26},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 register_controller adds a new Controller to your app","is_multi":false,"pos":{"len":55,"line_nr":60,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\controller.v","content":"fn (mut c Controller) register_host_controller[A, X](host string, path string, mut global_app A) !","name":"register_host_controller","parent_name":"Controller","return_type":"!","pos":{"len":102,"line_nr":61,"pos":1763,"col":0,"last_line":63},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\controller.v","content":"struct Controller {\npub mut:\n\tcontrollers []&ControllerPath\n}","name":"Controller","parent_name":"","return_type":"","pos":{"len":21,"line_nr":18,"pos":300,"col":0,"last_line":21},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 controller generates a new Controller for the main app","is_multi":false,"pos":{"len":56,"line_nr":28,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\controller.v","content":"fn controller[A, X](path string, mut global_app A) !&ControllerPath","name":"controller","parent_name":"","return_type":"ControllerPath","pos":{"len":71,"line_nr":29,"pos":630,"col":0,"last_line":58},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 controller_host generates a controller which only handles incoming requests from the `host` domain","is_multi":false,"pos":{"len":100,"line_nr":65,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\controller.v","content":"fn controller_host[A, X](host string, path string, mut global_app A) &ControllerPath","name":"controller_host","parent_name":"","return_type":"ControllerPath","pos":{"len":88,"line_nr":66,"pos":2042,"col":0,"last_line":70},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\middleware.v","content":"type MiddlewareHandler[T] = fn (mut T) bool","name":"MiddlewareHandler","parent_name":"","return_type":"","pos":{"len":26,"line_nr":4,"pos":35,"col":0,"last_line":4},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\middleware.v","content":"struct Middleware[T] {\nmut:\n\tglobal_handlers       []voidptr\n\tglobal_handlers_after []voidptr\n\troute_handlers        []RouteMiddleware\n\troute_handlers_after  []RouteMiddleware\n}","name":"Middleware","parent_name":"","return_type":"","pos":{"len":21,"line_nr":21,"pos":451,"col":0,"last_line":27},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\middleware.v","content":"struct MiddlewareOptions[T] {\n\thandler fn (mut ctx T) bool @[required]\n\tafter   bool\n}","name":"MiddlewareOptions","parent_name":"","return_type":"","pos":{"len":28,"line_nr":30,"pos":644,"col":0,"last_line":33},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 string representation of Middleware","is_multi":false,"pos":{"len":37,"line_nr":35,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\middleware.v","content":"fn (m &Middleware[T]) str() string","name":"str","parent_name":"Middleware[T]","return_type":"string","pos":{"len":38,"line_nr":36,"pos":775,"col":0,"last_line":43},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 use registers a global middleware handler","is_multi":false,"pos":{"len":43,"line_nr":45,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\middleware.v","content":"fn (mut m Middleware[T]) use(options MiddlewareOptions[T])","name":"use","parent_name":"Middleware[T]","return_type":"void","pos":{"len":62,"line_nr":46,"pos":1136,"col":0,"last_line":52},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 route_use registers a middlware handler for a specific route(s)","is_multi":false,"pos":{"len":65,"line_nr":54,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\middleware.v","content":"fn (mut m Middleware[T]) route_use(route string, options MiddlewareOptions[T])","name":"route_use","parent_name":"Middleware[T]","return_type":"void","pos":{"len":82,"line_nr":55,"pos":1406,"col":0,"last_line":66},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Middleware[T]","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 encode_gzip adds gzip encoding to the HTTP Response body.","is_multi":false,"pos":{"len":59,"line_nr":117,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This middleware does not encode files, if you return `ctx.file()`.","is_multi":false,"pos":{"len":68,"line_nr":118,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Register this middleware as last!","is_multi":false,"pos":{"len":35,"line_nr":119,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: app.use(vweb.encode_gzip[Context]())","is_multi":false,"pos":{"len":47,"line_nr":120,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\middleware.v","content":"fn encode_gzip[T]() MiddlewareOptions[T]","name":"encode_gzip","parent_name":"","return_type":"MiddlewareOptions[T]","pos":{"len":44,"line_nr":121,"pos":3120,"col":0,"last_line":151},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 decode_gzip decodes the body of a gzip'ed HTTP request.","is_multi":false,"pos":{"len":57,"line_nr":153,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Register this middleware before you do anything with the request body!","is_multi":false,"pos":{"len":72,"line_nr":154,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: app.use(vweb.decode_gzip[Context]())","is_multi":false,"pos":{"len":47,"line_nr":155,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\middleware.v","content":"fn decode_gzip[T]() MiddlewareOptions[T]","name":"decode_gzip","parent_name":"","return_type":"MiddlewareOptions[T]","pos":{"len":44,"line_nr":156,"pos":4333,"col":0,"last_line":170},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\static_handler.v","content":"interface StaticApp {\nmut:\n\tstatic_files      map[string]string\n\tstatic_mime_types map[string]string\n\tstatic_hosts      map[string]string\n}","name":"StaticApp","parent_name":"","return_type":"","pos":{"len":143,"line_nr":4,"pos":24,"col":0,"last_line":9},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 StaticHandler provides methods to handle static files in your vweb App","is_multi":false,"pos":{"len":72,"line_nr":11,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 handle_static is used to mark a folder (relative to the current working folder)","is_multi":false,"pos":{"len":81,"line_nr":36,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 as one that contains only static resources (css files, images etc).","is_multi":false,"pos":{"len":69,"line_nr":37,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If `root` is set the mount path for the dir will be in '/'","is_multi":false,"pos":{"len":60,"line_nr":38,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Usage:","is_multi":false,"pos":{"len":8,"line_nr":39,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```v","is_multi":false,"pos":{"len":6,"line_nr":40,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 os.chdir( os.executable() )?","is_multi":false,"pos":{"len":30,"line_nr":41,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 app.handle_static('assets', true)","is_multi":false,"pos":{"len":35,"line_nr":42,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```","is_multi":false,"pos":{"len":5,"line_nr":43,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\static_handler.v","content":"fn (mut sh StaticHandler) handle_static(directory_path string, root bool) !bool","name":"handle_static","parent_name":"StaticHandler","return_type":"!bool","pos":{"len":83,"line_nr":44,"pos":1377,"col":0,"last_line":46},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 host_handle_static is used to mark a folder (relative to the current working folder)","is_multi":false,"pos":{"len":86,"line_nr":48,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 as one that contains only static resources (css files, images etc).","is_multi":false,"pos":{"len":69,"line_nr":49,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If `root` is set the mount path for the dir will be in '/'","is_multi":false,"pos":{"len":60,"line_nr":50,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Usage:","is_multi":false,"pos":{"len":8,"line_nr":51,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```v","is_multi":false,"pos":{"len":6,"line_nr":52,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 os.chdir( os.executable() )?","is_multi":false,"pos":{"len":30,"line_nr":53,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 app.host_handle_static('localhost', 'assets', true)","is_multi":false,"pos":{"len":53,"line_nr":54,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```","is_multi":false,"pos":{"len":5,"line_nr":55,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\static_handler.v","content":"fn (mut sh StaticHandler) host_handle_static(host string, directory_path string, root bool) !bool","name":"host_handle_static","parent_name":"StaticHandler","return_type":"!bool","pos":{"len":101,"line_nr":56,"pos":1856,"col":0,"last_line":68},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 mount_static_folder_at - makes all static files in `directory_path` and inside it, available at http://server/mount_path","is_multi":false,"pos":{"len":122,"line_nr":70,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 For example: suppose you have called .mount_static_folder_at('/var/share/myassets', '/assets'),","is_multi":false,"pos":{"len":97,"line_nr":71,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and you have a file /var/share/myassets/main.css .","is_multi":false,"pos":{"len":52,"line_nr":72,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 => That file will be available at URL: http://server/assets/main.css .","is_multi":false,"pos":{"len":72,"line_nr":73,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\static_handler.v","content":"fn (mut sh StaticHandler) mount_static_folder_at(directory_path string, mount_path string) !bool","name":"mount_static_folder_at","parent_name":"StaticHandler","return_type":"!bool","pos":{"len":100,"line_nr":74,"pos":2805,"col":0,"last_line":76},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 host_mount_static_folder_at - makes all static files in `directory_path` and inside it, available at http://host/mount_path","is_multi":false,"pos":{"len":125,"line_nr":78,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 For example: suppose you have called .host_mount_static_folder_at('localhost', '/var/share/myassets', '/assets'),","is_multi":false,"pos":{"len":115,"line_nr":79,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and you have a file /var/share/myassets/main.css .","is_multi":false,"pos":{"len":52,"line_nr":80,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 => That file will be available at URL: http://localhost/assets/main.css .","is_multi":false,"pos":{"len":75,"line_nr":81,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\static_handler.v","content":"fn (mut sh StaticHandler) host_mount_static_folder_at(host string, directory_path string, mount_path string) !bool","name":"host_mount_static_folder_at","parent_name":"StaticHandler","return_type":"!bool","pos":{"len":118,"line_nr":82,"pos":3358,"col":0,"last_line":94},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Serves a file static","is_multi":false,"pos":{"len":22,"line_nr":96,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `url` is the access path on the site, `file_path` is the real path to the file, `mime_type` is the file type","is_multi":false,"pos":{"len":110,"line_nr":97,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\static_handler.v","content":"fn (mut sh StaticHandler) serve_static(url string, file_path string) !","name":"serve_static","parent_name":"StaticHandler","return_type":"!","pos":{"len":74,"line_nr":98,"pos":4111,"col":0,"last_line":100},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Serves a file static","is_multi":false,"pos":{"len":22,"line_nr":102,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `url` is the access path on the site, `file_path` is the real path to the file","is_multi":false,"pos":{"len":80,"line_nr":103,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `host` is the host to serve the file from","is_multi":false,"pos":{"len":43,"line_nr":104,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\static_handler.v","content":"fn (mut sh StaticHandler) host_serve_static(host string, url string, file_path string) !","name":"host_serve_static","parent_name":"StaticHandler","return_type":"!","pos":{"len":92,"line_nr":105,"pos":4385,"col":0,"last_line":114},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\static_handler.v","content":"struct StaticHandler {\npub mut:\n\tstatic_files      map[string]string\n\tstatic_mime_types map[string]string\n\tstatic_hosts      map[string]string\n}","name":"StaticHandler","parent_name":"","return_type":"","pos":{"len":24,"line_nr":12,"pos":243,"col":0,"last_line":17},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 A type which doesn't get filtered inside templates","is_multi":false,"pos":{"len":52,"line_nr":15,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"type RawHtml = string","name":"RawHtml","parent_name":"","return_type":"","pos":{"len":16,"line_nr":16,"pos":262,"col":0,"last_line":16},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 A dummy structure that returns from routes to indicate that you actually sent something to a user","is_multi":false,"pos":{"len":99,"line_nr":18,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"struct Result {}","name":"Result","parent_name":"","return_type":"","pos":{"len":17,"line_nr":20,"pos":400,"col":0,"last_line":20},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 no_result does nothing, but returns `vweb.Result`. Only use it when you are sure","is_multi":false,"pos":{"len":82,"line_nr":22,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 a response will be send over the connection, or in combination with `Context.takeover_conn`","is_multi":false,"pos":{"len":93,"line_nr":23,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"fn no_result() Result","name":"no_result","parent_name":"","return_type":"Result","pos":{"len":25,"line_nr":24,"pos":601,"col":0,"last_line":26},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const methods_with_form = [http.Method.post, .put, .patch]","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":28,"pos":649,"col":0,"last_line":28},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const headers_close = http.new_custom_header_from_map({\n\t'Server':                           'VWeb'\n\thttp.CommonHeader.connection.str(): 'close'\n}) or { panic('should never fail') }","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":30,"pos":713,"col":0,"last_line":33},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const http_302 = http.new_response(\n\tstatus: .found\n\tbody: '302 Found'\n\theader: headers_close\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":35,"pos":900,"col":0,"last_line":39},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const http_400 = http.new_response(\n\tstatus: .bad_request\n\tbody: '400 Bad Request'\n\theader: http.new_header(\n\t\tkey: .content_type\n\t\tvalue: 'text/plain'\n\t).join(headers_close)\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":41,"pos":1001,"col":0,"last_line":48},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const http_404 = http.new_response(\n\tstatus: .not_found\n\tbody: '404 Not Found'\n\theader: http.new_header(\n\t\tkey: .content_type\n\t\tvalue: 'text/plain'\n\t).join(headers_close)\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":50,"pos":1183,"col":0,"last_line":57},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const http_408 = http.new_response(\n\tstatus: .request_timeout\n\tbody: '408 Request Timeout'\n\theader: http.new_header(\n\t\tkey: .content_type\n\t\tvalue: 'text/plain'\n\t).join(headers_close)\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":59,"pos":1361,"col":0,"last_line":66},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const http_413 = http.new_response(\n\tstatus: .request_entity_too_large\n\tbody: '413 Request entity is too large'\n\theader: http.new_header(\n\t\tkey: .content_type\n\t\tvalue: 'text/plain'\n\t).join(headers_close)\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":68,"pos":1551,"col":0,"last_line":75},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const http_500 = http.new_response(\n\tstatus: .internal_server_error\n\tbody: '500 Internal Server Error'\n\theader: http.new_header(\n\t\tkey: .content_type\n\t\tvalue: 'text/plain'\n\t).join(headers_close)\n)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":77,"pos":1762,"col":0,"last_line":84},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const mime_types = {\n\t'.aac':    'audio/aac'\n\t'.abw':    'application/x-abiword'\n\t'.arc':    'application/x-freearc'\n\t'.avi':    'video/x-msvideo'\n\t'.azw':    'application/vnd.amazon.ebook'\n\t'.bin':    'application/octet-stream'\n\t'.bmp':    'image/bmp'\n\t'.bz':     'application/x-bzip'\n\t'.bz2':    'application/x-bzip2'\n\t'.cda':    'application/x-cdf'\n\t'.csh':    'application/x-csh'\n\t'.css':    'text/css'\n\t'.csv':    'text/csv'\n\t'.doc':    'application/msword'\n\t'.docx':   'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n\t'.eot':    'application/vnd.ms-fontobject'\n\t'.epub':   'application/epub+zip'\n\t'.gz':     'application/gzip'\n\t'.gif':    'image/gif'\n\t'.htm':    'text/html'\n\t'.html':   'text/html'\n\t'.ico':    'image/vnd.microsoft.icon'\n\t'.ics':    'text/calendar'\n\t'.jar':    'application/java-archive'\n\t'.jpeg':   'image/jpeg'\n\t'.jpg':    'image/jpeg'\n\t'.js':     'text/javascript'\n\t'.json':   'application/json'\n\t'.jsonld': 'application/ld+json'\n\t'.mid':    'audio/midi audio/x-midi'\n\t'.midi':   'audio/midi audio/x-midi'\n\t'.mjs':    'text/javascript'\n\t'.mp3':    'audio/mpeg'\n\t'.mp4':    'video/mp4'\n\t'.mpeg':   'video/mpeg'\n\t'.mpkg':   'application/vnd.apple.installer+xml'\n\t'.odp':    'application/vnd.oasis.opendocument.presentation'\n\t'.ods':    'application/vnd.oasis.opendocument.spreadsheet'\n\t'.odt':    'application/vnd.oasis.opendocument.text'\n\t'.oga':    'audio/ogg'\n\t'.ogv':    'video/ogg'\n\t'.ogx':    'application/ogg'\n\t'.opus':   'audio/opus'\n\t'.otf':    'font/otf'\n\t'.png':    'image/png'\n\t'.pdf':    'application/pdf'\n\t'.php':    'application/x-httpd-php'\n\t'.ppt':    'application/vnd.ms-powerpoint'\n\t'.pptx':   'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n\t'.rar':    'application/vnd.rar'\n\t'.rtf':    'application/rtf'\n\t'.sh':     'application/x-sh'\n\t'.svg':    'image/svg+xml'\n\t'.swf':    'application/x-shockwave-flash'\n\t'.tar':    'application/x-tar'\n\t'.tif':    'image/tiff'\n\t'.tiff':   'image/tiff'\n\t'.ts':     'video/mp2t'\n\t'.ttf':    'font/ttf'\n\t'.txt':    'text/plain'\n\t'.vsd':    'application/vnd.visio'\n\t'.wasm':   'application/wasm'\n\t'.wav':    'audio/wav'\n\t'.weba':   'audio/webm'\n\t'.webm':   'video/webm'\n\t'.webp':   'image/webp'\n\t'.woff':   'font/woff'\n\t'.woff2':  'font/woff2'\n\t'.xhtml':  'application/xhtml+xml'\n\t'.xls':    'application/vnd.ms-excel'\n\t'.xlsx':   'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t'.xml':    'application/xml'\n\t'.xul':    'application/vnd.mozilla.xul+xml'\n\t'.zip':    'application/zip'\n\t'.3gp':    'video/3gpp'\n\t'.3g2':    'video/3gpp2'\n\t'.7z':     'application/x-7z-compressed'\n}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":86,"pos":1964,"col":0,"last_line":164},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const max_http_post_size = 1024 * 1024","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":166,"pos":4601,"col":0,"last_line":166},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"const default_port = 8080","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":168,"pos":4645,"col":0,"last_line":168},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 run - start a new VWeb server, listening to all available addresses, at the specified `port`","is_multi":false,"pos":{"len":94,"line_nr":204,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"fn run[A, X](mut global_app A, port int)","name":"run","parent_name":"","return_type":"void","pos":{"len":44,"line_nr":205,"pos":5627,"col":0,"last_line":207},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"struct RunParams {\n\t// use `family: .ip, host: 'localhost'` when you want it to bind only to 127.0.0.1\n\tfamily               net.AddrFamily = .ip6\n\thost                 string\n\tport                 int  = 8080\n\tshow_startup_message bool = true\n\ttimeout_in_seconds   int  = 30\n}","name":"RunParams","parent_name":"","return_type":"","pos":{"len":20,"line_nr":210,"pos":5777,"col":0,"last_line":217},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 close the open file and reset the struct to its default values","is_multi":false,"pos":{"len":64,"line_nr":227,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"fn (mut fr FileResponse) done()","name":"done","parent_name":"FileResponse","return_type":"void","pos":{"len":35,"line_nr":228,"pos":6209,"col":0,"last_line":233},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"FileResponse","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 free the current string and reset the struct to its default values","is_multi":false,"pos":{"len":68,"line_nr":242,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"fn (mut sr StringResponse) done()","name":"done","parent_name":"StringResponse","return_type":"void","pos":{"len":37,"line_nr":244,"pos":6464,"col":0,"last_line":248},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"StringResponse","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 reset request parameters for `fd`:","is_multi":false,"pos":{"len":36,"line_nr":267,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 reset content-length index and the http request","is_multi":false,"pos":{"len":49,"line_nr":268,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"fn (mut params RequestParams) request_done(fd int)","name":"request_done","parent_name":"RequestParams","return_type":"void","pos":{"len":54,"line_nr":269,"pos":7128,"col":0,"last_line":272},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"RequestParams","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 run_at - start a new VWeb server, listening only on a specific address `host`, at the specified `port`","is_multi":false,"pos":{"len":104,"line_nr":274,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: vweb.run_at(new_app(), vweb.RunParams{ host: 'localhost' port: 8099 family: .ip }) or { panic(err) }","is_multi":false,"pos":{"len":111,"line_nr":275,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\vweb.v","content":"fn run_at[A, X](mut global_app A, params RunParams) !","name":"run_at","parent_name":"","return_type":"!","pos":{"len":57,"line_nr":277,"pos":7511,"col":0,"last_line":318},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:44"}