{"module_name":"eventbus","description":"# Event Bus\n\nA module to provide eventing capabilities using pub/sub.\n\n## API\n\n1. `new[T]()` - create a new `EventBus` 2. `EventBus.new[T]()` - create a new `EventBus`\n\n### Structs:\n\n**EventBus:**\n\n1. `publish(name T, sender voidptr, args voidptr)` - publish an event with provided Params & name 2. `clear_all()` - clear all subscribers 3. `has_subscriber(name T)` - check if a subscriber to an event exists\n\n**Subscriber:**\n\n1. `subscribe(name T, handler EventHandlerFn)` - subscribe to an event 2. `subscribe_once(name T, handler EventHandlerFn)` - subscribe only once to an event 3. `subscribe_method(name T, handler EventHandlerFn, receiver voidptr)` - subscribe to an event and also set the `receiver` as a parameter. Since it's not yet possible to send methods as parameters, this is a workaround. 4. `is_subscribed(name T)` - check if we are subscribed to an event 5. `unsubscribe(name T)` - unsubscribe from an event\n\n**Event Handler Signature:**\n\nThe function given to `subscribe`, `subscribe_method` and `subscribe_once` must match this:\n\n\n```v oksyntax\nfn cb(receiver voidptr, args voidptr, sender voidptr) {\n}\n\n// Since V can map structs to voidptr, this also works\nstruct ClickEvent {\nx int\ny int\n}\n\n// Example case where publisher sends ClickEvent as args.\nfn on_press(receiver voidptr, e &ClickEvent, sender voidptr) {\nprintln(e.x)\n// your code here...\n}\n```\n\n## Usage\n\nFor **usage across modules**\n[check the example](https://github.com/vlang/v/tree/master/examples/eventbus).\n\n> **Note**\n> As a general rule, you will need to **subscribe before publishing**.\n\n**main.v**\n\n```v oksyntax\nmodule main\n\nimport eventbus\n\n// initialize it globally\nconst eb = eventbus.new[string]()\n\nfn main() {\n// get a mutable reference to the subscriber\nmut sub := eb.subscriber\n// subscribe to the 'error' event\nsub.subscribe('error', on_error)\n// start the work\ndo_work()\n}\n\n// the event handler\nfn on_error(receiver voidptr, e &Error, work &Work) {\nprintln('error occurred on ${work.hours}. Error: ${e.message}')\n}\n```\n\n**work.v**\n\n```v oksyntax\nmodule main\n\nimport eventbus\n\nconst eb = eventbus.new[string]()\n\nstruct Work {\nhours int\n}\n\nstruct AnError {\nmessage string\n}\n\nfn do_work() {\nwork := Work{20}\n// get a mutable Params instance & put some data into it\nerror := &AnError{'Error: no internet connection.'}\n// publish the event\neb.publish('error', work, error)\n}\n```\n\n### Notes:\n\n1. Each `EventBus` instance has it's own registry (i.e. there is no global event registry\nso you can't just subscribe to an event wherever you are.\n2. Each `EventBus` has a `Subscriber` instance which will need to be either exposed or you can make\nsmall public helper functions specific to your module like (`onPress`, `onError`) and etc.\n3. The `eventbus` module has some helpers to ease getting/setting of Params\n(since V doesn't support empty interfaces yet or reflection) so use them (see usage above).\n\n**The rationale behind separating Subscriber & Publisher:**\n\nThis is mainly for security because if publisher & subscriber are both passed around,\na client can easily publish events acting as the server.\nSo a client should only be able to use the Subscriber methods.\n","contents":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"type EventHandlerFn = fn (receiver voidptr, args voidptr, sender voidptr)","name":"EventHandlerFn","parent_name":"","return_type":"","pos":{"len":23,"line_nr":2,"pos":17,"col":0,"last_line":2},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"struct Publisher[T] {\nmut:\n\tregistry &Registry[T] = unsafe { nil }\n}","name":"Publisher","parent_name":"","return_type":"","pos":{"len":20,"line_nr":4,"pos":96,"col":0,"last_line":7},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"struct Subscriber[T] {\nmut:\n\tregistry &Registry[T] = unsafe { nil }\n}","name":"Subscriber","parent_name":"","return_type":"","pos":{"len":21,"line_nr":9,"pos":170,"col":0,"last_line":12},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"struct EventBus[T] {\npub mut:\n\tregistry   &Registry[T]   = unsafe { nil }\n\tpublisher  &Publisher[T]  = unsafe { nil }\n\tsubscriber &Subscriber[T] = unsafe { nil }\n}","name":"EventBus","parent_name":"","return_type":"","pos":{"len":19,"line_nr":26,"pos":439,"col":0,"last_line":31},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 EventBus.new[T] create a new eventbus with event type T.","is_multi":false,"pos":{"len":58,"line_nr":33,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn EventBus.new[T]() &EventBus[T]","name":"EventBus.new","parent_name":"","return_type":"EventBus[T]","pos":{"len":37,"line_nr":34,"pos":668,"col":0,"last_line":39},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new[T] create a new eventbus with event type T.","is_multi":false,"pos":{"len":49,"line_nr":41,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn new[T]() &EventBus[T]","name":"new","parent_name":"","return_type":"EventBus[T]","pos":{"len":28,"line_nr":42,"pos":887,"col":0,"last_line":47},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 publish publishes an event with provided Params & name.","is_multi":false,"pos":{"len":57,"line_nr":49,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (eb &EventBus[T]) publish(name T, sender voidptr, args voidptr)","name":"publish","parent_name":"EventBus[T]","return_type":"void","pos":{"len":70,"line_nr":50,"pos":1105,"col":0,"last_line":53},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 clear_all clears all subscribers.","is_multi":false,"pos":{"len":35,"line_nr":55,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (eb &EventBus[T]) clear_all()","name":"clear_all","parent_name":"EventBus[T]","return_type":"void","pos":{"len":36,"line_nr":56,"pos":1288,"col":0,"last_line":59},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 has_subscriber check if a subscriber to an event exists.","is_multi":false,"pos":{"len":58,"line_nr":61,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (eb &EventBus[T]) has_subscriber(name T) bool","name":"has_subscriber","parent_name":"EventBus[T]","return_type":"bool","pos":{"len":52,"line_nr":62,"pos":1444,"col":0,"last_line":64},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"EventBus[T]","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 subscribe subscribe to an event `name`.","is_multi":false,"pos":{"len":41,"line_nr":96,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (mut s Subscriber[T]) subscribe(name T, handler EventHandlerFn)","name":"subscribe","parent_name":"Subscriber[T]","return_type":"void","pos":{"len":70,"line_nr":97,"pos":2596,"col":0,"last_line":102},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 subscribe_method subscribe to an event `name` and also set the `receiver` as a parameter.","is_multi":false,"pos":{"len":91,"line_nr":104,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (mut s Subscriber[T]) subscribe_method(name T, handler EventHandlerFn, receiver voidptr)","name":"subscribe_method","parent_name":"Subscriber[T]","return_type":"void","pos":{"len":95,"line_nr":105,"pos":2839,"col":0,"last_line":111},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 unsubscribe_method unsubscribe a receiver for only one method.","is_multi":false,"pos":{"len":64,"line_nr":113,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (mut s Subscriber[T]) unsubscribe_method(name T, receiver voidptr)","name":"unsubscribe_method","parent_name":"Subscriber[T]","return_type":"void","pos":{"len":73,"line_nr":114,"pos":3101,"col":0,"last_line":116},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 unsubscribe_receiver unsubscribes a receiver from all events.","is_multi":false,"pos":{"len":63,"line_nr":118,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (mut s Subscriber[T]) unsubscribe_receiver(receiver voidptr)","name":"unsubscribe_receiver","parent_name":"Subscriber[T]","return_type":"void","pos":{"len":67,"line_nr":119,"pos":3338,"col":0,"last_line":121},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 subscribe_once subscribe only once to an event `name`.","is_multi":false,"pos":{"len":56,"line_nr":123,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (mut s Subscriber[T]) subscribe_once(name T, handler EventHandlerFn)","name":"subscribe_once","parent_name":"Subscriber[T]","return_type":"void","pos":{"len":75,"line_nr":124,"pos":3540,"col":0,"last_line":130},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 is_subscribed check if we are subscribed to an event `name`.","is_multi":false,"pos":{"len":62,"line_nr":132,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (s &Subscriber[T]) is_subscribed(name T) bool","name":"is_subscribed","parent_name":"Subscriber[T]","return_type":"bool","pos":{"len":52,"line_nr":133,"pos":3772,"col":0,"last_line":135},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 is_subscribed_method checks whether a receiver was already subscribed for any events.","is_multi":false,"pos":{"len":87,"line_nr":137,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (s &Subscriber[T]) is_subscribed_method(name T, receiver voidptr) bool","name":"is_subscribed_method","parent_name":"Subscriber[T]","return_type":"bool","pos":{"len":77,"line_nr":138,"pos":3961,"col":0,"last_line":140},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 unsubscribe unsubscribe from an event `name`.","is_multi":false,"pos":{"len":47,"line_nr":142,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\eventbus\\eventbus.v","content":"fn (mut s Subscriber[T]) unsubscribe(name T, handler EventHandlerFn)","name":"unsubscribe","parent_name":"Subscriber[T]","return_type":"void","pos":{"len":72,"line_nr":143,"pos":4167,"col":0,"last_line":146},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Subscriber[T]","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:33"}