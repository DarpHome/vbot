{"module_name":"crypto.ed25519.internal.edwards25519","description":"README\n-------\n\nThis module provides arithmetic primitives operations that are useful to implement cryptographic schemes over curve edwards25519, includes: 1.  Arithmetic functions for point addition, doubling, negation, scalar multiplication with an arbitrary point, with the base point, etc. 2.  Arithmetic functions dealing with scalars modulo the prime order L of the base point.\n\nThis modules was port of Golang `edwards25519` library from [edwards25519](https://github.com/FiloSottile/edwards25519) to the V language.\n\n\nAbout Edwards25519\n------------------\n\nTwisted Edwards curves are a family of elliptic curves allowing complete addition formulas without any special case and no point at infinity. Curve edwards25519 is based on prime 2^255 - 19 for efficient implementation. Equation and parameters are given in RFC 7748.","contents":[{"attributes":{},"comments":[{"text":"\u0001 Element represents an element of the edwards25519 GF(2^255-19). Note that this","is_multi":false,"pos":{"len":80,"line_nr":12,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 is not a cryptographically secure group, and should only be used to interact","is_multi":false,"pos":{"len":78,"line_nr":13,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 with edwards25519.Point coordinates.","is_multi":false,"pos":{"len":38,"line_nr":14,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":15,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This type works similarly to math/big.Int, and all arguments and receivers","is_multi":false,"pos":{"len":76,"line_nr":16,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 are allowed to alias.","is_multi":false,"pos":{"len":23,"line_nr":17,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":18,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The zero value is a valid zero element.","is_multi":false,"pos":{"len":41,"line_nr":19,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 zero sets v = 0, and returns v.","is_multi":false,"pos":{"len":33,"line_nr":329,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) zero() Element","name":"zero","parent_name":"Element","return_type":"Element","pos":{"len":37,"line_nr":330,"pos":10103,"col":0,"last_line":333},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 one sets v = 1, and returns v.","is_multi":false,"pos":{"len":32,"line_nr":335,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) one() Element","name":"one","parent_name":"Element","return_type":"Element","pos":{"len":36,"line_nr":336,"pos":10216,"col":0,"last_line":339},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reduce reduces v modulo 2^255 - 19 and returns it.","is_multi":false,"pos":{"len":52,"line_nr":341,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) reduce() Element","name":"reduce","parent_name":"Element","return_type":"Element","pos":{"len":39,"line_nr":342,"pos":10347,"col":0,"last_line":372},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 add sets v = a + b, and returns v.","is_multi":false,"pos":{"len":36,"line_nr":374,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) add(a Element, b Element) Element","name":"add","parent_name":"Element","return_type":"Element","pos":{"len":56,"line_nr":375,"pos":11363,"col":0,"last_line":386},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 subtract sets v = a - b, and returns v.","is_multi":false,"pos":{"len":41,"line_nr":388,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) subtract(a Element, b Element) Element","name":"subtract","parent_name":"Element","return_type":"Element","pos":{"len":61,"line_nr":389,"pos":11841,"col":0,"last_line":398},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 negate sets v = -a, and returns v.","is_multi":false,"pos":{"len":36,"line_nr":400,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) negate(a Element) Element","name":"negate","parent_name":"Element","return_type":"Element","pos":{"len":48,"line_nr":401,"pos":12316,"col":0,"last_line":403},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 invert sets v = 1/z mod p, and returns v.","is_multi":false,"pos":{"len":43,"line_nr":405,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":406,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If z == 0, invert returns v = 0.","is_multi":false,"pos":{"len":34,"line_nr":407,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) invert(z Element) Element","name":"invert","parent_name":"Element","return_type":"Element","pos":{"len":48,"line_nr":408,"pos":12498,"col":0,"last_line":478},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 square sets v = x * x, and returns v.","is_multi":false,"pos":{"len":39,"line_nr":480,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) square(x Element) Element","name":"square","parent_name":"Element","return_type":"Element","pos":{"len":48,"line_nr":481,"pos":14253,"col":0,"last_line":484},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 multiply sets v = x * y, and returns v.","is_multi":false,"pos":{"len":41,"line_nr":486,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) multiply(x Element, y Element) Element","name":"multiply","parent_name":"Element","return_type":"Element","pos":{"len":61,"line_nr":487,"pos":14386,"col":0,"last_line":490},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 pow_22523 set v = x^((p-5)/8), and returns v. (p-5)/8 is 2^252-3.","is_multi":false,"pos":{"len":67,"line_nr":500,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) pow_22523(x Element) Element","name":"pow_22523","parent_name":"Element","return_type":"Element","pos":{"len":51,"line_nr":501,"pos":14764,"col":0,"last_line":549},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sqrt_ratio sets r to the non-negative square root of the ratio of u and v.","is_multi":false,"pos":{"len":76,"line_nr":551,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":552,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If u/v is square, sqrt_ratio returns r and 1. If u/v is not square, sqrt_ratio","is_multi":false,"pos":{"len":80,"line_nr":553,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 sets r according to Section 4.3 of draft-irtf-cfrg-ristretto255-decaf448-00,","is_multi":false,"pos":{"len":78,"line_nr":554,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and returns r and 0.","is_multi":false,"pos":{"len":22,"line_nr":555,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut r Element) sqrt_ratio(u Element, v Element) (Element, int)","name":"sqrt_ratio","parent_name":"Element","return_type":"(Element, int)","pos":{"len":70,"line_nr":556,"pos":16295,"col":0,"last_line":578},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 selected sets v to a if cond == 1, and to b if cond == 0.","is_multi":false,"pos":{"len":59,"line_nr":587,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) selected(a Element, b Element, cond int) Element","name":"selected","parent_name":"Element","return_type":"Element","pos":{"len":71,"line_nr":588,"pos":17414,"col":0,"last_line":597},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 is_negative returns 1 if v is negative, and 0 otherwise.","is_multi":false,"pos":{"len":58,"line_nr":599,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) is_negative() int","name":"is_negative","parent_name":"Element","return_type":"int","pos":{"len":40,"line_nr":600,"pos":17771,"col":0,"last_line":602},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 absolute sets v to |u|, and returns v.","is_multi":false,"pos":{"len":40,"line_nr":604,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) absolute(u Element) Element","name":"absolute","parent_name":"Element","return_type":"Element","pos":{"len":50,"line_nr":605,"pos":17889,"col":0,"last_line":609},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set sets v = a, and returns v.","is_multi":false,"pos":{"len":32,"line_nr":611,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) set(a Element) Element","name":"set","parent_name":"Element","return_type":"Element","pos":{"len":45,"line_nr":612,"pos":18067,"col":0,"last_line":615},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_bytes sets v to x, where x is a 32-byte little-endian encoding. If x is","is_multi":false,"pos":{"len":77,"line_nr":617,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 not of the right length, SetUniformBytes returns an error, and the","is_multi":false,"pos":{"len":68,"line_nr":618,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 receiver is unchanged.","is_multi":false,"pos":{"len":24,"line_nr":619,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":620,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Consistent with RFC 7748, the most significant bit (the high bit of the","is_multi":false,"pos":{"len":73,"line_nr":621,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 last byte) is ignored, and non-canonical values (2^255-19 through 2^255-1)","is_multi":false,"pos":{"len":76,"line_nr":622,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 are accepted. Note that this is laxer than specified by RFC 8032.","is_multi":false,"pos":{"len":67,"line_nr":623,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) set_bytes(x []u8) !Element","name":"set_bytes","parent_name":"Element","return_type":"!Element","pos":{"len":49,"line_nr":624,"pos":18535,"col":0,"last_line":647},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bytes returns the canonical 32-byte little-endian encoding of v.","is_multi":false,"pos":{"len":66,"line_nr":649,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) bytes() []u8","name":"bytes","parent_name":"Element","return_type":"[]u8","pos":{"len":35,"line_nr":650,"pos":19560,"col":0,"last_line":655},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 equal returns 1 if v and u are equal, and 0 otherwise.","is_multi":false,"pos":{"len":56,"line_nr":679,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) equal(ue Element) int","name":"equal","parent_name":"Element","return_type":"int","pos":{"len":44,"line_nr":680,"pos":20217,"col":0,"last_line":685},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 swap swaps v and u if cond == 1 or leaves them unchanged if cond == 0, and returns v.","is_multi":false,"pos":{"len":87,"line_nr":687,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) swap(mut u Element, cond int)","name":"swap","parent_name":"Element","return_type":"void","pos":{"len":52,"line_nr":688,"pos":20448,"col":0,"last_line":706},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 mult_32 sets v = x * y, and returns v.","is_multi":false,"pos":{"len":40,"line_nr":708,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"fn (mut v Element) mult_32(x Element, y u32) Element","name":"mult_32","parent_name":"Element","return_type":"Element","pos":{"len":56,"line_nr":709,"pos":20819,"col":0,"last_line":723},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\element.v","content":"struct Element {\nmut:\n\t// An element t represents the integer\n\t//     t.l0 + t.l1*2^51 + t.l2*2^102 + t.l3*2^153 + t.l4*2^204\n\t//\n\t// Between operations, all limbs are expected to be lower than 2^52.\n\tl0 u64\n\tl1 u64\n\tl2 u64\n\tl3 u64\n\tl4 u64\n}","name":"Element","parent_name":"","return_type":"","pos":{"len":18,"line_nr":20,"pos":534,"col":0,"last_line":31},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Point represents a point on the edwards25519 curve.","is_multi":false,"pos":{"len":53,"line_nr":61,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":62,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This type works similarly to math/big.Int, and all arguments and receivers","is_multi":false,"pos":{"len":76,"line_nr":63,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 are allowed to alias.","is_multi":false,"pos":{"len":23,"line_nr":64,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":65,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The zero value is NOT valid, and it may be used only as a receiver.","is_multi":false,"pos":{"len":69,"line_nr":66,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 (Re)addition and subtraction.","is_multi":false,"pos":{"len":31,"line_nr":295,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 add sets v = p + q, and returns v.","is_multi":false,"pos":{"len":36,"line_nr":297,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"fn (mut v Point) add(p Point, q Point) Point","name":"add","parent_name":"Point","return_type":"Point","pos":{"len":48,"line_nr":298,"pos":7237,"col":0,"last_line":306},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Encoding.","is_multi":false,"pos":{"len":11,"line_nr":197,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 bytes returns the canonical 32-byte encoding of v, according to RFC 8032,","is_multi":false,"pos":{"len":75,"line_nr":199,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Section 5.1.2.","is_multi":false,"pos":{"len":16,"line_nr":200,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"fn (mut v Point) bytes() []u8","name":"bytes","parent_name":"Point","return_type":"[]u8","pos":{"len":33,"line_nr":201,"pos":5201,"col":0,"last_line":206},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bytes_montgomery converts v to a point on the birationally-equivalent","is_multi":false,"pos":{"len":71,"line_nr":81,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Curve25519 Montgomery curve, and returns its canonical 32 bytes encoding","is_multi":false,"pos":{"len":74,"line_nr":82,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 according to RFC 7748.","is_multi":false,"pos":{"len":24,"line_nr":83,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":84,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that bytes_montgomery only encodes the u-coordinate, so v and -v encode","is_multi":false,"pos":{"len":78,"line_nr":85,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 to the same value. If v is the identity point, bytes_montgomery returns 32","is_multi":false,"pos":{"len":76,"line_nr":86,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 zero bytes, analogously to the X25519 function.","is_multi":false,"pos":{"len":49,"line_nr":87,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\extra.v","content":"fn (mut v Point) bytes_montgomery() []u8","name":"bytes_montgomery","parent_name":"Point","return_type":"[]u8","pos":{"len":44,"line_nr":88,"pos":2538,"col":0,"last_line":93},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 equal returns 1 if v is equivalent to u, and 0 otherwise.","is_multi":false,"pos":{"len":59,"line_nr":453,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"fn (mut v Point) equal(u Point) int","name":"equal","parent_name":"Point","return_type":"int","pos":{"len":39,"line_nr":454,"pos":10427,"col":0,"last_line":468},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 mult_by_cofactor sets v = 8 * p, and returns v.","is_multi":false,"pos":{"len":49,"line_nr":116,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\extra.v","content":"fn (mut v Point) mult_by_cofactor(p Point) Point","name":"mult_by_cofactor","parent_name":"Point","return_type":"Point","pos":{"len":52,"line_nr":117,"pos":3339,"col":0,"last_line":128},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 multi_scalar_mult sets v = sum(scalars[i] * points[i]), and returns v.","is_multi":false,"pos":{"len":72,"line_nr":236,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":237,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Execution time depends only on the lengths of the two slices, which must match.","is_multi":false,"pos":{"len":81,"line_nr":238,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\extra.v","content":"fn (mut v Point) multi_scalar_mult(scalars []Scalar, points []Point) Point","name":"multi_scalar_mult","parent_name":"Point","return_type":"Point","pos":{"len":78,"line_nr":239,"pos":6559,"col":0,"last_line":291},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Negation.","is_multi":false,"pos":{"len":11,"line_nr":441,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 negate sets v = -p, and returns v.","is_multi":false,"pos":{"len":36,"line_nr":443,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"fn (mut v Point) negate(p Point) Point","name":"negate","parent_name":"Point","return_type":"Point","pos":{"len":42,"line_nr":444,"pos":10224,"col":0,"last_line":451},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 scalar_base_mult sets v = x * B, where B is the canonical generator, and","is_multi":false,"pos":{"len":74,"line_nr":41,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 returns v.","is_multi":false,"pos":{"len":12,"line_nr":42,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":43,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The scalar multiplication is done in constant time.","is_multi":false,"pos":{"len":53,"line_nr":44,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalarmult.v","content":"fn (mut v Point) scalar_base_mult(mut x Scalar) Point","name":"scalar_base_mult","parent_name":"Point","return_type":"Point","pos":{"len":57,"line_nr":45,"pos":1042,"col":0,"last_line":92},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 scalar_mult sets v = x * q, and returns v.","is_multi":false,"pos":{"len":44,"line_nr":94,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":95,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The scalar multiplication is done in constant time.","is_multi":false,"pos":{"len":53,"line_nr":96,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalarmult.v","content":"fn (mut v Point) scalar_mult(mut x Scalar, q Point) Point","name":"scalar_mult","parent_name":"Point","return_type":"Point","pos":{"len":61,"line_nr":97,"pos":2696,"col":0,"last_line":135},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set sets v = u, and returns v.","is_multi":false,"pos":{"len":32,"line_nr":164,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"fn (mut v Point) set(u Point) Point","name":"set","parent_name":"Point","return_type":"Point","pos":{"len":39,"line_nr":165,"pos":4485,"col":0,"last_line":168},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_bytes sets v = x, where x is a 32-byte encoding of v. If x does not","is_multi":false,"pos":{"len":73,"line_nr":110,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 represent a valid point on the curve, set_bytes returns an error and","is_multi":false,"pos":{"len":70,"line_nr":111,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the receiver is unchanged. Otherwise, set_bytes returns v.","is_multi":false,"pos":{"len":60,"line_nr":112,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":113,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that set_bytes accepts all non-canonical encodings of valid points.","is_multi":false,"pos":{"len":74,"line_nr":114,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 That is, it follows decoding rules that match most implementations in","is_multi":false,"pos":{"len":71,"line_nr":115,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the ecosystem rather than RFC 8032.","is_multi":false,"pos":{"len":37,"line_nr":116,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"fn (mut v Point) set_bytes(x []u8) !Point","name":"set_bytes","parent_name":"Point","return_type":"!Point","pos":{"len":45,"line_nr":117,"pos":3098,"col":0,"last_line":162},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 subtract sets v = p - q, and returns v.","is_multi":false,"pos":{"len":41,"line_nr":308,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"fn (mut v Point) subtract(p Point, q Point) Point","name":"subtract","parent_name":"Point","return_type":"Point","pos":{"len":53,"line_nr":309,"pos":7498,"col":0,"last_line":316},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 vartime_double_scalar_base_mult sets v = a * A + b * B, where B is the canonical","is_multi":false,"pos":{"len":82,"line_nr":151,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 generator, and returns v.","is_multi":false,"pos":{"len":27,"line_nr":152,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":153,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Execution time depends on the inputs.","is_multi":false,"pos":{"len":39,"line_nr":154,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalarmult.v","content":"fn (mut v Point) vartime_double_scalar_base_mult(xa Scalar, aa Point, xb Scalar) Point","name":"vartime_double_scalar_base_mult","parent_name":"Point","return_type":"Point","pos":{"len":90,"line_nr":155,"pos":4552,"col":0,"last_line":228},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 vartime_multiscalar_mult sets v = sum(scalars[i] * points[i]), and returns v.","is_multi":false,"pos":{"len":79,"line_nr":293,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":294,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Execution time depends on the inputs.","is_multi":false,"pos":{"len":39,"line_nr":295,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\extra.v","content":"fn (mut v Point) vartime_multiscalar_mult(scalars []Scalar, points []Point) Point","name":"vartime_multiscalar_mult","parent_name":"Point","return_type":"Point","pos":{"len":85,"line_nr":296,"pos":8668,"col":0,"last_line":351},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"struct Point {\nmut:\n\t// The point is internally represented in extended coordinates (x, y, z, T)\n\t// where x = x/z, y = y/z, and xy = T/z per https://eprint.iacr.org/2008/522.\n\tx Element\n\ty Element\n\tz Element\n\tt Element\n\t// Make the type not comparable (i.e. used with == or as a map key), as\n\t// equivalent points can be represented by different values.\n\t// _ incomparable\n}","name":"Point","parent_name":"","return_type":"","pos":{"len":16,"line_nr":67,"pos":1868,"col":0,"last_line":78},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 add sets s = x + y mod l, and returns s.","is_multi":false,"pos":{"len":42,"line_nr":43,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) add(x Scalar, y Scalar) Scalar","name":"add","parent_name":"Scalar","return_type":"Scalar","pos":{"len":52,"line_nr":44,"pos":1099,"col":0,"last_line":48},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bytes returns the canonical 32-byte little-endian encoding of s.","is_multi":false,"pos":{"len":66,"line_nr":173,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) bytes() []u8","name":"bytes","parent_name":"Scalar","return_type":"[]u8","pos":{"len":34,"line_nr":174,"pos":5170,"col":0,"last_line":178},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 equal returns 1 if s and t are equal, and 0 otherwise.","is_multi":false,"pos":{"len":56,"line_nr":180,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (s Scalar) equal(t Scalar) int","name":"equal","parent_name":"Scalar","return_type":"int","pos":{"len":37,"line_nr":181,"pos":5330,"col":0,"last_line":183},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 invert sets s to the inverse of a nonzero scalar v, and returns s.","is_multi":false,"pos":{"len":68,"line_nr":130,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":131,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If t is zero, invert returns zero.","is_multi":false,"pos":{"len":36,"line_nr":132,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\extra.v","content":"fn (mut s Scalar) invert(t Scalar) Scalar","name":"invert","parent_name":"Scalar","return_type":"Scalar","pos":{"len":45,"line_nr":133,"pos":3724,"col":0,"last_line":234},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 multiply sets s = x * y mod l, and returns s.","is_multi":false,"pos":{"len":47,"line_nr":70,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) multiply(x Scalar, y Scalar) Scalar","name":"multiply","parent_name":"Scalar","return_type":"Scalar","pos":{"len":57,"line_nr":71,"pos":1890,"col":0,"last_line":75},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 multiply_add sets s = x * y + z mod l, and returns s.","is_multi":false,"pos":{"len":55,"line_nr":50,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) multiply_add(x Scalar, y Scalar, z Scalar) Scalar","name":"multiply_add","parent_name":"Scalar","return_type":"Scalar","pos":{"len":71,"line_nr":51,"pos":1302,"col":0,"last_line":54},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 negate sets s = -x mod l, and returns s.","is_multi":false,"pos":{"len":42,"line_nr":63,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) negate(x Scalar) Scalar","name":"negate","parent_name":"Scalar","return_type":"Scalar","pos":{"len":45,"line_nr":64,"pos":1676,"col":0,"last_line":68},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 non_adjacent_form computes a width-w non-adjacent form for this scalar.","is_multi":false,"pos":{"len":73,"line_nr":974,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":975,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 w must be between 2 and 8, or non_adjacent_form will panic.","is_multi":false,"pos":{"len":61,"line_nr":976,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) non_adjacent_form(w u32) []i8","name":"non_adjacent_form","parent_name":"Scalar","return_type":"[]i8","pos":{"len":51,"line_nr":977,"pos":24744,"col":0,"last_line":1039},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set sets s = x, and returns s.","is_multi":false,"pos":{"len":32,"line_nr":77,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) set(x Scalar) Scalar","name":"set","parent_name":"Scalar","return_type":"Scalar","pos":{"len":42,"line_nr":78,"pos":2076,"col":0,"last_line":81},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_bytes_with_clamping applies the buffer pruning described in RFC 8032,","is_multi":false,"pos":{"len":75,"line_nr":141,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Section 5.1.5 (also known as clamping) and sets s to the result. The input","is_multi":false,"pos":{"len":76,"line_nr":142,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 must be 32 bytes, and it is not modified. If x is not of the right length,","is_multi":false,"pos":{"len":76,"line_nr":143,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `set_bytes_with_clamping` returns an error, and the receiver is unchanged.","is_multi":false,"pos":{"len":76,"line_nr":144,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":145,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that since Scalar values are always reduced modulo the prime order of","is_multi":false,"pos":{"len":76,"line_nr":146,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the curve, the resulting value will not preserve any of the cofactor-clearing","is_multi":false,"pos":{"len":79,"line_nr":147,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 properties that clamping is meant to provide. It will however work as","is_multi":false,"pos":{"len":71,"line_nr":148,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 expected as long as it is applied to points on the prime order subgroup, like","is_multi":false,"pos":{"len":79,"line_nr":149,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 in Ed25519. In fact, it is lost to history why RFC 8032 adopted the","is_multi":false,"pos":{"len":69,"line_nr":150,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 irrelevant RFC 7748 clamping, but it is now required for compatibility.","is_multi":false,"pos":{"len":73,"line_nr":151,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) set_bytes_with_clamping(x []u8) !Scalar","name":"set_bytes_with_clamping","parent_name":"Scalar","return_type":"!Scalar","pos":{"len":61,"line_nr":152,"pos":4414,"col":0,"last_line":171},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_canonical_bytes sets s = x, where x is a 32-byte little-endian encoding of","is_multi":false,"pos":{"len":80,"line_nr":99,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 s, and returns s. If x is not a canonical encoding of s, set_canonical_bytes","is_multi":false,"pos":{"len":78,"line_nr":100,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 returns an error, and the receiver is unchanged.","is_multi":false,"pos":{"len":50,"line_nr":101,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) set_canonical_bytes(x []u8) !Scalar","name":"set_canonical_bytes","parent_name":"Scalar","return_type":"!Scalar","pos":{"len":57,"line_nr":102,"pos":2878,"col":0,"last_line":118},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_uniform_bytes sets s to an uniformly distributed value given 64 uniformly","is_multi":false,"pos":{"len":79,"line_nr":83,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 distributed random bytes. If x is not of the right length, set_uniform_bytes","is_multi":false,"pos":{"len":78,"line_nr":84,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 returns an error, and the receiver is unchanged.","is_multi":false,"pos":{"len":50,"line_nr":85,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) set_uniform_bytes(x []u8) !Scalar","name":"set_uniform_bytes","parent_name":"Scalar","return_type":"!Scalar","pos":{"len":55,"line_nr":86,"pos":2354,"col":0,"last_line":97},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 subtract sets s = x - y mod l, and returns s.","is_multi":false,"pos":{"len":47,"line_nr":56,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn (mut s Scalar) subtract(x Scalar, y Scalar) Scalar","name":"subtract","parent_name":"Scalar","return_type":"Scalar","pos":{"len":57,"line_nr":57,"pos":1474,"col":0,"last_line":61},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Scalar","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_identity_point returns a new Point set to the identity.","is_multi":false,"pos":{"len":61,"line_nr":170,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"fn new_identity_point() Point","name":"new_identity_point","parent_name":"","return_type":"Point","pos":{"len":33,"line_nr":171,"pos":4610,"col":0,"last_line":174},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_generator_point returns a new Point set to the canonical generator.","is_multi":false,"pos":{"len":73,"line_nr":176,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\point.v","content":"fn new_generator_point() Point","name":"new_generator_point","parent_name":"","return_type":"Point","pos":{"len":34,"line_nr":177,"pos":4779,"col":0,"last_line":180},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"const sc_zero = Scalar{\n\ts: [u8(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t0, 0, 0, 0]!\n}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":23,"pos":521,"col":0,"last_line":26},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"const sc_one = Scalar{\n\ts: [u8(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t0, 0, 0, 0]!\n}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":28,"pos":660,"col":0,"last_line":31},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"const sc_minus_one = Scalar{\n\ts: [u8(236), 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0,\n\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]!\n}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":33,"pos":798,"col":0,"last_line":36},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_scalar return new zero scalar","is_multi":false,"pos":{"len":35,"line_nr":38,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\crypto\\ed25519\\internal\\edwards25519\\scalar.v","content":"fn new_scalar() Scalar","name":"new_scalar","parent_name":"","return_type":"Scalar","pos":{"len":26,"line_nr":39,"pos":1006,"col":0,"last_line":41},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:31"}