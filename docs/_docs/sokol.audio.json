{"module_name":"sokol.audio","description":"","contents":[{"attributes":{},"comments":[{"text":"\u0001 callback function for `stream_cb` in [[C.saudio_desc](#C.saudio_desc)] when calling [audio.setup()](#setup)","is_multi":false,"pos":{"len":109,"line_nr":16,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":17,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 sokol callback functions run in a separate thread","is_multi":false,"pos":{"len":51,"line_nr":18,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":19,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function will be called with a reference to the C buffer and the maximum number of frames and channels","is_multi":false,"pos":{"len":109,"line_nr":20,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the audio backend is expecting in its buffer.","is_multi":false,"pos":{"len":47,"line_nr":21,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":22,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Terms:","is_multi":false,"pos":{"len":8,"line_nr":23,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - *sample* - a 32-bit floating point number from `-1.0` to `+1.0` representing the waveform amplitude at that instant","is_multi":false,"pos":{"len":119,"line_nr":24,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - *frame* - one sample for each channel at that instant","is_multi":false,"pos":{"len":57,"line_nr":25,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":26,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 To determine the number of samples expected, do `num_frames * num_channels`.","is_multi":false,"pos":{"len":78,"line_nr":27,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Then, write up to that many `f32` samples into `buffer` using unsafe operations.","is_multi":false,"pos":{"len":82,"line_nr":28,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":29,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Do not write more data to the buffer than it is requesting, but you may write less. The buffer is initialized with","is_multi":false,"pos":{"len":116,"line_nr":30,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 zeroes, so unwritten data will result in audio silence.","is_multi":false,"pos":{"len":57,"line_nr":31,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: unsafe { C.memcpy(buffer, &samples, samples.len * int(sizeof(f32))) }","is_multi":false,"pos":{"len":80,"line_nr":32,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: unsafe { mut b := buffer; for i, sample in samples { b[i] = sample } }","is_multi":false,"pos":{"len":81,"line_nr":33,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn (x FNStreamingCB) str() string","name":"str","parent_name":"FNStreamingCB","return_type":"string","pos":{"len":37,"line_nr":49,"pos":2352,"col":0,"last_line":51},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"type FNStreamingCB = fn (buffer &f32, num_frames int, num_channels int)","name":"FNStreamingCB","parent_name":"","return_type":"","pos":{"len":22,"line_nr":34,"pos":1394,"col":0,"last_line":34},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 callback function for `stream_userdata_cb` to use in `C.saudio_desc` when calling [audio.setup()](#setup)","is_multi":false,"pos":{"len":107,"line_nr":36,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":37,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 sokol callback functions run in a separate thread","is_multi":false,"pos":{"len":51,"line_nr":38,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":39,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function operates the same way as [[FNStreamingCB](#FNStreamingCB)] but it passes customizable `user_data` to the","is_multi":false,"pos":{"len":120,"line_nr":40,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 callback. This is the method to use if your audio data is stored in a struct or array. Identify the","is_multi":false,"pos":{"len":101,"line_nr":41,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `user_data` when you call `audio.setup()` and that object will be passed to the callback as the last arg.","is_multi":false,"pos":{"len":107,"line_nr":42,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: mut soundbuffer := []f32","is_multi":false,"pos":{"len":35,"line_nr":43,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: soundbuffer << previously_parsed_wavfile_bytes","is_multi":false,"pos":{"len":57,"line_nr":44,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: audio.setup(stream_userdata_cb: mycallback, user_data: soundbuffer)","is_multi":false,"pos":{"len":78,"line_nr":45,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: fn mycallback(buffer &f32, num_frames int, num_channels int, mut sb []f32) { ... }","is_multi":false,"pos":{"len":93,"line_nr":46,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn (x FnStreamingCBWithUserData) str() string","name":"str","parent_name":"FnStreamingCBWithUserData","return_type":"string","pos":{"len":49,"line_nr":53,"pos":2437,"col":0,"last_line":55},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"type FnStreamingCBWithUserData = fn (buffer &f32, num_frames int, num_channels int, user_data voidptr)","name":"FnStreamingCBWithUserData","parent_name":"","return_type":"","pos":{"len":34,"line_nr":47,"pos":2244,"col":0,"last_line":47},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"struct C.saudio_allocator {\npub mut:\n\talloc_fn  memory.FnAllocatorAlloc\n\tfree_fn   memory.FnAllocatorFree\n\tuser_data voidptr\n}","name":"C.saudio_allocator","parent_name":"","return_type":"","pos":{"len":29,"line_nr":58,"pos":2557,"col":0,"last_line":63},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"struct C.saudio_logger {\npub mut:\n\tfunc      memory.FnLogCb\n\tuser_data voidptr\n}","name":"C.saudio_logger","parent_name":"","return_type":"","pos":{"len":26,"line_nr":66,"pos":2700,"col":0,"last_line":70},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 only one of `stream_cb` or `stream_userdata_cb` should be used","is_multi":false,"pos":{"len":64,"line_nr":72,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":73,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 default values (internal to sokol C library):","is_multi":false,"pos":{"len":47,"line_nr":74,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":75,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 | variable      | default  | note |","is_multi":false,"pos":{"len":37,"line_nr":76,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 | :-----------  | -------: | :--------- |","is_multi":false,"pos":{"len":43,"line_nr":77,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 | sample_rate   | 44100    | higher sample rates take more memory but are higher quality |","is_multi":false,"pos":{"len":92,"line_nr":78,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 | num_channels  | 1        | for stereo sound, this should be 2 |","is_multi":false,"pos":{"len":67,"line_nr":79,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 | buffer_frames | 2048     | buffer size in frames, larger is more latency, smaller means higher CPU |","is_multi":false,"pos":{"len":104,"line_nr":80,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 | packet_frames | 128      | push model only, number of frames that will be pushed in each packet |","is_multi":false,"pos":{"len":101,"line_nr":81,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 | num_packets   | 64       | for push model only, number of packets in the backend ringbuffer |","is_multi":false,"pos":{"len":97,"line_nr":82,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"struct C.saudio_desc {\n\tsample_rate        int\n\tnum_channels       int\n\tbuffer_frames      int\n\tpacket_frames      int\n\tnum_packets        int\n\tstream_cb          FNStreamingCB\n\tstream_userdata_cb FnStreamingCBWithUserData\npub mut:\n\tuser_data voidptr\n\tallocator C.saudio_allocator\n\tlogger    C.saudio_logger\n}","name":"C.saudio_desc","parent_name":"","return_type":"","pos":{"len":24,"line_nr":84,"pos":3473,"col":0,"last_line":96},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 setup - setup sokol-audio","is_multi":false,"pos":{"len":27,"line_nr":120,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn setup(desc &C.saudio_desc)","name":"setup","parent_name":"","return_type":"void","pos":{"len":33,"line_nr":121,"pos":4180,"col":0,"last_line":135},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 shutdown - shutdown sokol-audio","is_multi":false,"pos":{"len":33,"line_nr":137,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn shutdown()","name":"shutdown","parent_name":"","return_type":"void","pos":{"len":17,"line_nr":138,"pos":4613,"col":0,"last_line":140},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 is_valid - true after setup if audio backend was successfully initialized","is_multi":false,"pos":{"len":75,"line_nr":142,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn is_valid() bool","name":"is_valid","parent_name":"","return_type":"bool","pos":{"len":22,"line_nr":143,"pos":4734,"col":0,"last_line":145},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 userdata - return the saudio_desc.user_data pointer","is_multi":false,"pos":{"len":53,"line_nr":147,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn user_data() voidptr","name":"user_data","parent_name":"","return_type":"voidptr","pos":{"len":26,"line_nr":148,"pos":4844,"col":0,"last_line":150},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 query - return a copy of the original saudio_desc struct","is_multi":false,"pos":{"len":58,"line_nr":152,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn query() C.saudio_desc","name":"query","parent_name":"","return_type":"C.saudio_desc","pos":{"len":28,"line_nr":153,"pos":4964,"col":0,"last_line":155},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sample_rate - return the actual sample rate","is_multi":false,"pos":{"len":45,"line_nr":157,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn sample_rate() int","name":"sample_rate","parent_name":"","return_type":"int","pos":{"len":24,"line_nr":158,"pos":5075,"col":0,"last_line":160},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 buffer_frames - return the actual backend buffer size in number of frames","is_multi":false,"pos":{"len":75,"line_nr":162,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn buffer_frames() int","name":"buffer_frames","parent_name":"","return_type":"int","pos":{"len":26,"line_nr":163,"pos":5213,"col":0,"last_line":165},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 channels - return the actual number of channels","is_multi":false,"pos":{"len":49,"line_nr":167,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn channels() int","name":"channels","parent_name":"","return_type":"int","pos":{"len":21,"line_nr":168,"pos":5329,"col":0,"last_line":170},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 suspended returns true if audio context is currently suspended","is_multi":false,"pos":{"len":64,"line_nr":172,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 (only in WebAudio backend, all other backends return false)","is_multi":false,"pos":{"len":61,"line_nr":173,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn suspended() bool","name":"suspended","parent_name":"","return_type":"bool","pos":{"len":23,"line_nr":174,"pos":5513,"col":0,"last_line":176},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 expect - get current number of frames to fill packet queue; use in combination with audio.push","is_multi":false,"pos":{"len":96,"line_nr":178,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn expect() int","name":"expect","parent_name":"","return_type":"int","pos":{"len":19,"line_nr":179,"pos":5669,"col":0,"last_line":181},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 push - push sample frames from main thread, returns number of frames actually pushed","is_multi":false,"pos":{"len":86,"line_nr":183,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn push(frames &f32, num_frames int) int","name":"push","parent_name":"","return_type":"int","pos":{"len":44,"line_nr":184,"pos":5808,"col":0,"last_line":186},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 fclamp - helper function to 'clamp' a number to a certain range","is_multi":false,"pos":{"len":65,"line_nr":188,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: realsample := audio.fclamp(sample, -1.0, 1.0)","is_multi":false,"pos":{"len":56,"line_nr":189,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn fclamp(x f32, flo f32, fhi f32) f32","name":"fclamp","parent_name":"","return_type":"f32","pos":{"len":42,"line_nr":191,"pos":6035,"col":0,"last_line":199},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 min - helper function to return the smaller of two numbers","is_multi":false,"pos":{"len":60,"line_nr":201,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":202,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NOTE: math.min returns `f32` values, this returns `int` values","is_multi":false,"pos":{"len":64,"line_nr":203,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: smaller := audio.min(1, 5) // smaller == 1","is_multi":false,"pos":{"len":53,"line_nr":204,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn min(x int, y int) int","name":"min","parent_name":"","return_type":"int","pos":{"len":28,"line_nr":205,"pos":6339,"col":0,"last_line":210},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 max - helper function to return the larger of two numbers","is_multi":false,"pos":{"len":59,"line_nr":212,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":213,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NOTE: math.max returns `f32` values, this returns `int` values","is_multi":false,"pos":{"len":64,"line_nr":214,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: larger := audio.max(1, 5) // larger == 5","is_multi":false,"pos":{"len":51,"line_nr":215,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sokol\\audio\\audio.c.v","content":"fn max(x int, y int) int","name":"max","parent_name":"","return_type":"int","pos":{"len":28,"line_nr":216,"pos":6592,"col":0,"last_line":221},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:37"}