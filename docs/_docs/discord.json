{"module_name":"discord","contents":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"enum ApplicationFlags {\n\treserved_0\n\treserved_1\n\treserved_2\n\treserved_3\n\treserved_4\n\treserved_5\n\t// Indicates if an app uses the Auto Moderation API\n\tapplication_auto_moderation_rule_create_badge\n\treserved_7\n\treserved_8\n\treserved_9\n\treserved_10\n\treserved_11\n\t// Intent required for bots in **100 or more servers** to receive `presence_update` events\n\tgateway_presence\n\t// Intent required for bots in under 100 to receive `presence_update` events, found on the **Bot** page in your app's settings\n\tgateway_presence_limited\n\t// Intent required for bots in **100 or more servers** to receive member-related events like `guild_member_add`. See the list of member-related events under `GUILD_MEMBERS`\n\tgateway_guild_members\n\t// Intent required for bots in under 100 servers to receive member-related events like `guild_member_add`, found on the **Bot** page in your app's settings. See the list of member-related events under GUILD_MEMBERS\n\tgateway_guild_members_limited\n\t// Indicates unusual growth of an app that prevents verification\n\tverification_pending_guild_limit\n\t// Indicates if an app is embedded within the Discord client (currently unavailable publicly)\n\tembedded\n\t// Intent required for bots in **100 or more servers** to receive message content\n\tgateway_message_content\n\t// Intent required for bots in under 100 servers to receive message content, found on the **Bot** page in your app's settings\n\tgateway_message_content_limited\n\treserved_20\n\treserved_21\n\treserved_22\n\t// Indicates if an app has registered global application commands\n\tapplication_command_badge\n}","name":"ApplicationFlags","parent_name":"","return_type":"","pos":{"len":25,"line_nr":6,"pos":60,"col":0,"last_line":41},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"struct PartialApplication {\npub:\n\t// ID of the app\n\tid Snowflake\n\t// Name of the app\n\tname ?string\n\t// Icon hash of the app\n\ticon ?string\n\t// Description of the app\n\tdescription ?string\n\t// When `false`, only the app owner can add the app to guilds\n\tbot_public ?bool\n\t// When `true`, the app's bot will only join upon completion of the full OAuth2 code grant flow\n\tbot_require_code_grant ?bool\n\t// URL of the app's Terms of Service\n\tterms_of_service_url ?string\n\t// URL of the app's Privacy Policy\n\tprivacy_policy_url ?string\n\t// Key for verification in interactions and the GameSDK's GetTicket\n\tverify_key ?[]u8\n\t// App's public flags\n\tflags ApplicationFlags\n\t// List of tags describing the content and functionality of the app. Max of 5 tags.\n\ttags ?[]string\n}","name":"PartialApplication","parent_name":"","return_type":"","pos":{"len":29,"line_nr":43,"pos":1639,"col":0,"last_line":67},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"fn PartialApplication.parse(j json2.Any) !PartialApplication","name":"PartialApplication.parse","parent_name":"","return_type":"!PartialApplication","pos":{"len":64,"line_nr":69,"pos":2407,"col":0,"last_line":130},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"enum MembershipState {\n\tinvited  = 1\n\taccepted\n}","name":"MembershipState","parent_name":"","return_type":"","pos":{"len":24,"line_nr":132,"pos":3658,"col":0,"last_line":135},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"type TeamMemberRole = string","name":"TeamMemberRole","parent_name":"","return_type":"","pos":{"len":23,"line_nr":137,"pos":3712,"col":0,"last_line":137},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"const team_member_role_read_only = TeamMemberRole('read_only')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":141,"pos":3872,"col":0,"last_line":141},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"const default_cdn_url = 'https://cdn.discordapp.com'","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":4,"pos":35,"col":0,"last_line":4},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"const cdn = new_cdn()","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":158,"pos":5988,"col":0,"last_line":158},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"const team_member_role_admin = TeamMemberRole('admin')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":139,"pos":3746,"col":0,"last_line":139},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"const team_member_role_developer = TeamMemberRole('developer')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":140,"pos":3805,"col":0,"last_line":140},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"const sentinel_permission_overwrites = []PermissionOverwrite{}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":91,"pos":2303,"col":0,"last_line":91},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"const sentinel_sort_order_type = unsafe { SortOrderType(sentinel_int) }","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":283,"pos":6654,"col":0,"last_line":283},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"const sentinel_default_reaction = DefaultReaction{\n\temoji_id: sentinel_snowflake\n}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":491,"pos":11459,"col":0,"last_line":493},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"const sentinel_forum_tags = []ForumTag{}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":1498,"pos":48755,"col":0,"last_line":1498},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"const default_user_agent = 'DiscordBot (https://github.com/DarpHome/discord.v, 1.10.0) V ${@VHASH}'","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":15,"pos":212,"col":0,"last_line":15},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ASCII-encoded 'darp'","is_multi":false,"pos":{"len":22,"line_nr":5,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_int = 1886544228","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":6,"pos":65,"col":0,"last_line":6},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_time = time.Time{\n\tunix: 0\n}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":7,"pos":101,"col":0,"last_line":9},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Compare using `target.str == sentinel_string.str`","is_multi":false,"pos":{"len":51,"line_nr":11,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_string = 'darp'","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":12,"pos":203,"col":0,"last_line":12},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 compare using math.is_nan(target)","is_multi":false,"pos":{"len":35,"line_nr":14,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_number = math.nan()","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":15,"pos":276,"col":0,"last_line":15},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_snowflake = Snowflake(0)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":17,"pos":316,"col":0,"last_line":17},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_snowflakes = []Snowflake{}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":18,"pos":360,"col":0,"last_line":18},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_permissions = unsafe { Permissions(max_u64) }","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":19,"pos":406,"col":0,"last_line":19},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_image = Image(NoneImage{})","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":20,"pos":471,"col":0,"last_line":20},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_duration = time.infinite","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":21,"pos":517,"col":0,"last_line":21},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"const sentinel_bool = unsafe { bool(126) }","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":22,"pos":561,"col":0,"last_line":22},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"const snowflake_epoch = u64(1420070400000)","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":5,"pos":44,"col":0,"last_line":5},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Indonesian (Bahasa Indonesia)","is_multi":false,"pos":{"len":31,"line_nr":74,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_id = Locale('id')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":75,"pos":1862,"col":0,"last_line":75},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Danish (Dansk)","is_multi":false,"pos":{"len":16,"line_nr":77,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_da = Locale('da')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":78,"pos":1916,"col":0,"last_line":78},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 German (Deutsch)","is_multi":false,"pos":{"len":18,"line_nr":80,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_de = Locale('de')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":81,"pos":1972,"col":0,"last_line":81},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 English, UK (English, UK)","is_multi":false,"pos":{"len":27,"line_nr":83,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_en_gb = Locale('en-GB')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":84,"pos":2037,"col":0,"last_line":84},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 English, US (English, US)","is_multi":false,"pos":{"len":27,"line_nr":86,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_en_us = Locale('en-US')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":87,"pos":2108,"col":0,"last_line":87},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Spanish (Español)","is_multi":false,"pos":{"len":20,"line_nr":89,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_es_es = Locale('es-ES')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":90,"pos":2172,"col":0,"last_line":90},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Spanish, LATAM (Español, LATAM)","is_multi":false,"pos":{"len":34,"line_nr":92,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_es_419 = Locale('es-419')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":93,"pos":2250,"col":0,"last_line":93},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 French (Français)","is_multi":false,"pos":{"len":20,"line_nr":95,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_fr = Locale('fr')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":96,"pos":2316,"col":0,"last_line":96},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Croatian (Hrvatski)","is_multi":false,"pos":{"len":21,"line_nr":98,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_hr = Locale('hr')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":99,"pos":2375,"col":0,"last_line":99},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Italian (Italiano)","is_multi":false,"pos":{"len":20,"line_nr":101,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_it = Locale('it')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":102,"pos":2433,"col":0,"last_line":102},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Lithuanian (Lietuviškai)","is_multi":false,"pos":{"len":27,"line_nr":104,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_lt = Locale('lt')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":105,"pos":2498,"col":0,"last_line":105},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Hungarian (Magyar)","is_multi":false,"pos":{"len":20,"line_nr":107,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_hu = Locale('hu')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":108,"pos":2556,"col":0,"last_line":108},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Dutch (Nederlands)","is_multi":false,"pos":{"len":20,"line_nr":110,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_nl = Locale('nl')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":111,"pos":2614,"col":0,"last_line":111},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Norweigan (Norsk)","is_multi":false,"pos":{"len":19,"line_nr":113,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_no = Locale('no')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":114,"pos":2671,"col":0,"last_line":114},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Polish (Polski)","is_multi":false,"pos":{"len":17,"line_nr":116,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_pl = Locale('pl')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":117,"pos":2726,"col":0,"last_line":117},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Portuguese, Brazilian (Português do Brasil)","is_multi":false,"pos":{"len":46,"line_nr":119,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_pt_br = Locale('pt-BR')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":120,"pos":2810,"col":0,"last_line":120},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Romanian, Romania (Română)","is_multi":false,"pos":{"len":30,"line_nr":122,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_ro = Locale('ro')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":123,"pos":2884,"col":0,"last_line":123},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Finnish (Suomi)","is_multi":false,"pos":{"len":17,"line_nr":125,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_fi = Locale('fi')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":126,"pos":2939,"col":0,"last_line":126},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Swedish (Svenska)","is_multi":false,"pos":{"len":19,"line_nr":128,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_sv_se = Locale('sv-SE')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":129,"pos":2996,"col":0,"last_line":129},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Vietnamese (Tiếng Việt)","is_multi":false,"pos":{"len":29,"line_nr":131,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_vi = Locale('vi')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":132,"pos":3069,"col":0,"last_line":132},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Turkish (Türkçe)","is_multi":false,"pos":{"len":20,"line_nr":134,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_tr = Locale('tr')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":135,"pos":3127,"col":0,"last_line":135},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Czech (Čeština)","is_multi":false,"pos":{"len":19,"line_nr":137,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_cs = Locale('cs')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":138,"pos":3184,"col":0,"last_line":138},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Greek (Ελληνικά)","is_multi":false,"pos":{"len":26,"line_nr":140,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_el = Locale('el')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":141,"pos":3248,"col":0,"last_line":141},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Bulgarian (български)","is_multi":false,"pos":{"len":32,"line_nr":143,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_bg = Locale('bg')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":144,"pos":3318,"col":0,"last_line":144},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Russian (Pусский)","is_multi":false,"pos":{"len":25,"line_nr":146,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_ru = Locale('ru')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":147,"pos":3381,"col":0,"last_line":147},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Ukrainian (Українська)","is_multi":false,"pos":{"len":34,"line_nr":149,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_uk = Locale('uk')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":150,"pos":3453,"col":0,"last_line":150},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Hindi (हिन्दी)","is_multi":false,"pos":{"len":28,"line_nr":152,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_hi = Locale('hi')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":153,"pos":3519,"col":0,"last_line":153},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Thai (ไทย)","is_multi":false,"pos":{"len":18,"line_nr":155,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_th = Locale('th')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":156,"pos":3575,"col":0,"last_line":156},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Chinese, China (中文)","is_multi":false,"pos":{"len":25,"line_nr":158,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_zh_cn = Locale('zh-CN')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":159,"pos":3638,"col":0,"last_line":159},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Japanese (日本語)","is_multi":false,"pos":{"len":22,"line_nr":161,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_ja = Locale('ja')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":162,"pos":3704,"col":0,"last_line":162},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Chinese, Taiwan (繁體中文)","is_multi":false,"pos":{"len":32,"line_nr":164,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_zh_tw = Locale('zh-TW')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":165,"pos":3774,"col":0,"last_line":165},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Korean (한국어)","is_multi":false,"pos":{"len":20,"line_nr":167,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"const locale_ko = Locale('ko')","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":168,"pos":3838,"col":0,"last_line":168},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"struct TeamMember {\npub:\n\t// User's membership state on the team\n\tmembership_state MembershipState\n\t// ID of the parent team of which they are a member\n\tteam_id Snowflake\n\t// Avatar, discriminator, ID, and username of the user\n\tuser PartialUser\n\t// Role of the team member\n\trole TeamMemberRole\n}","name":"TeamMember","parent_name":"","return_type":"","pos":{"len":21,"line_nr":143,"pos":3940,"col":0,"last_line":153},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"fn TeamMember.parse(j json2.Any) !TeamMember","name":"TeamMember.parse","parent_name":"","return_type":"!TeamMember","pos":{"len":48,"line_nr":155,"pos":4241,"col":0,"last_line":169},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"struct Team {\npub:\n\t// Hash of the image of the team's icon\n\ticon ?string\n\t// Unique ID of the team\n\tid Snowflake\n\t// Members of the team\n\tmembers []TeamMember\n\t// Name of the team\n\tname string\n\t// User ID of the current team owner\n\towner_user_id Snowflake\n}","name":"Team","parent_name":"","return_type":"","pos":{"len":15,"line_nr":171,"pos":4664,"col":0,"last_line":183},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"fn Team.parse(j json2.Any) !Team","name":"Team.parse","parent_name":"","return_type":"!Team","pos":{"len":36,"line_nr":185,"pos":4928,"col":0,"last_line":207},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"fn (ip InstallParams) build() json2.Any","name":"build","parent_name":"InstallParams","return_type":"x.json2.Any","pos":{"len":43,"line_nr":231,"pos":5984,"col":0,"last_line":236},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"struct InstallParams {\npub:\n\t// Scopes to add the application to the server with\n\tscopes []string\n\t// Permissions to request for the bot role\n\tpermissions Permissions\n}","name":"InstallParams","parent_name":"","return_type":"","pos":{"len":24,"line_nr":209,"pos":5469,"col":0,"last_line":215},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"fn InstallParams.parse(j json2.Any) !InstallParams","name":"InstallParams.parse","parent_name":"","return_type":"!InstallParams","pos":{"len":54,"line_nr":217,"pos":5643,"col":0,"last_line":229},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"struct Application {\npub:\n\t// ID of the app\n\tid Snowflake\n\t// Name of the app\n\tname string\n\t// Icon hash of the app\n\ticon ?string\n\t// Description of the app\n\tdescription string\n\t// List of RPC origin URLs, if RPC is enabled\n\trpc_origins ?[]string\n\t// When `false`, only the app owner can add the app to guilds\n\tbot_public bool\n\t// When `true`, the app's bot will only join upon completion of the full OAuth2 code grant flow\n\tbot_require_code_grant bool\n\t// Partial user object for the bot user associated with the app\n\tbot ?User\n\t// URL of the app's Terms of Service\n\tterms_of_service_url ?string\n\t// URL of the app's Privacy Policy\n\tprivacy_policy_url ?string\n\t// Partial user object for the owner of the app\n\towner ?User\n\t// Key for verification in interactions and the GameSDK's GetTicket\n\tverify_key []u8\n\t// If the app belongs to a team, this will be a list of the members of that team\n\tteam ?Team\n\t// Guild associated with the app. For example, a developer support server.\n\tguild_id ?Snowflake\n\t// Partial object of the associated guild\n\tguild ?PartialGuild\n\t// If this app is a game sold on Discord, this field will be the id of the \"Game SKU\" that is created, if exists\n\tprimary_sku_id ?Snowflake\n\t// If this app is a game sold on Discord, this field will be the URL slug that links to the store page\n\tslug ?string\n\t// App's default rich presence invite cover image hash\n\tcover_image ?string\n\t// App's public flags\n\tflags ?ApplicationFlags\n\t// Approximate count of guilds the app has been added to\n\tapproximate_guild_count ?int\n\t// Array of redirect URIs for the app\n\tredirect_uris ?[]string\n\t// Interactions endpoint URL for the app\n\tinteractions_endpoint_url ?string\n\t// Role connection verification URL for the app\n\trole_connections_verification_url ?string\n\t// List of tags describing the content and functionality of the app. Max of 5 tags.\n\ttags ?[]string\n\t// Settings for the app's default in-app authorization link, if enabled\n\tinstall_params ?InstallParams\n\t// Default custom authorization URL for the app, if enabled\n\tcustom_install_url ?string\n}","name":"Application","parent_name":"","return_type":"","pos":{"len":22,"line_nr":238,"pos":6149,"col":0,"last_line":292},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"fn Application.parse(j json2.Any) !Application","name":"Application.parse","parent_name":"","return_type":"!Application","pos":{"len":50,"line_nr":294,"pos":8219,"col":0,"last_line":420},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 Adds a user to the guild, provided you have a valid oauth2 access token for the user with the `guilds.join` scope. Returns a 201 Created with the guild member as the body, or 204 No Content if the user is already a member of the guild. Fires a Guild Member Add Gateway event.","is_multi":false,"pos":{"len":277,"line_nr":1525,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 For guilds with Membership Screening enabled, this endpoint will default to adding new members as pending in the guild member object. Members that are pending will have to complete membership screening before they become full members that can talk.","is_multi":false,"pos":{"len":250,"line_nr":1526,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) add_guild_member(guild_id Snowflake, user_id Snowflake, params AddGuildMemberParams) !GuildMember","name":"add_guild_member","parent_name":"REST","return_type":"!GuildMember","pos":{"len":117,"line_nr":1527,"pos":42380,"col":0,"last_line":1535},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Adds a role to a guild member. Requires the `.manage_roles` permission. Returns a 204 empty response on success. Fires a Guild Member Update Gateway event.","is_multi":false,"pos":{"len":157,"line_nr":1648,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) add_guild_member_role(guild_id Snowflake, user_id Snowflake, role_id Snowflake, params ReasonParam) !","name":"add_guild_member_role","parent_name":"REST","return_type":"!","pos":{"len":121,"line_nr":1649,"pos":46509,"col":0,"last_line":1653},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Adds another member to a thread. Requires the ability to send messages in the thread. Also requires the thread is not archived. Returns nothing if the member is successfully added or was already a member of the thread. Fires a Thread Members Update Gateway event.","is_multi":false,"pos":{"len":265,"line_nr":1335,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) add_thread_member(channel_id Snowflake, user_id Snowflake) !","name":"add_thread_member","parent_name":"REST","return_type":"!","pos":{"len":80,"line_nr":1336,"pos":41847,"col":0,"last_line":1338},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Begin a prune operation. Requires the `.kick_members` permission. Returns an object with one pruned key indicating the number of members that were removed in the prune operation. For large guilds it's recommended to set the compute_prune_count option to false, forcing pruned to null. Fires multiple Guild Member Remove Gateway events.","is_multi":false,"pos":{"len":337,"line_nr":2020,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) begin_guild_prune(guild_id Snowflake, params BeginGuildPruneParams) !int","name":"begin_guild_prune","parent_name":"REST","return_type":"!int","pos":{"len":92,"line_nr":2021,"pos":59222,"col":0,"last_line":2031},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Takes a list of application commands, overwriting the existing global command list for this application. Returns 200 and a list of application command objects. Commands that do not already exist will count toward daily application command create limits.","is_multi":false,"pos":{"len":255,"line_nr":523,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) bulk_overwrite_global_application_commands(application_id Snowflake, commands []CreateApplicationCommandParams) ![]ApplicationCommand","name":"bulk_overwrite_global_application_commands","parent_name":"REST","return_type":"![]ApplicationCommand","pos":{"len":153,"line_nr":524,"pos":16757,"col":0,"last_line":530},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Takes a list of application commands, overwriting the existing command list for this application for the targeted guild. Returns 200 and a list of application command objects.","is_multi":false,"pos":{"len":177,"line_nr":556,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) bulk_overwrite_guild_application_commands(application_id Snowflake, guild_id Snowflake, commands []CreateApplicationCommandParams) ![]ApplicationCommand","name":"bulk_overwrite_guild_application_commands","parent_name":"REST","return_type":"![]ApplicationCommand","pos":{"len":172,"line_nr":557,"pos":19548,"col":0,"last_line":563},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new rule. Returns an auto moderation rule on success. Fires an Auto Moderation Rule Create Gateway event.","is_multi":false,"pos":{"len":116,"line_nr":323,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (rest &REST) create_auto_moderation_rule(guild_id Snowflake, params CreateAutoModerationRuleParams) !AutoModerationRule","name":"create_auto_moderation_rule","parent_name":"REST","return_type":"!AutoModerationRule","pos":{"len":126,"line_nr":324,"pos":9617,"col":0,"last_line":329},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new DM channel with a user. Returns a [DM channel](#Channel) object (if one already exists, it will be returned instead).","is_multi":false,"pos":{"len":132,"line_nr":269,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > You should not use this endpoint to DM everyone in a server about something. DMs should generally be initiated by a user action. If you open a significant amount of DMs too quickly, your bot may be rate limited or blocked from opening new ones.","is_multi":false,"pos":{"len":248,"line_nr":270,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) create_dm(recipient_id Snowflake) !Channel","name":"create_dm","parent_name":"REST","return_type":"!Channel","pos":{"len":62,"line_nr":271,"pos":6863,"col":0,"last_line":277},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a followup message for an Interaction. Functions the same as [`Client.execute_webhook`](#Client.execute_webhook), but `wait` is always `true`. The `thread_id`, `avatar_url`, and `username` parameters are not supported when using this endpoint for interaction followups.","is_multi":false,"pos":{"len":278,"line_nr":641,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `flags` can be set to `.ephemeral` to mark the message as ephemeral, except when it is the first followup message to a deferred Interactions Response. In that case, the `flags` field will be ignored, and the ephemerality of the message will be determined by the `flags` value in your original ACK.","is_multi":false,"pos":{"len":299,"line_nr":642,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (rest &REST) create_followup_message(application_id Snowflake, interaction_token string, params ExecuteWebhookParams) !Message","name":"create_followup_message","parent_name":"REST","return_type":"!Message","pos":{"len":133,"line_nr":643,"pos":17461,"col":0,"last_line":655},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new global command. Returns 201 if a command with the same name does not already exist, or a 200 if it does (in which case the previous command will be overwritten). Both responses include an application command object.","is_multi":false,"pos":{"len":230,"line_nr":445,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) create_global_application_command(application_id Snowflake, params CreateApplicationCommandParams) !ApplicationCommand","name":"create_global_application_command","parent_name":"REST","return_type":"!ApplicationCommand","pos":{"len":138,"line_nr":446,"pos":13088,"col":0,"last_line":450},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new group DM channel with multiple users. Returns a [DM channel](#Channel) object. This endpoint was intended to be used with the now-deprecated GameBridge SDK. Fires a Channel Create Gateway event.","is_multi":false,"pos":{"len":209,"line_nr":298,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) create_group_dm(params CreateGroupDMParams) !Channel","name":"create_group_dm","parent_name":"REST","return_type":"!Channel","pos":{"len":72,"line_nr":299,"pos":7873,"col":0,"last_line":303},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) create_guild(params CreateGuildParams) !Guild","name":"create_guild","parent_name":"REST","return_type":"!Guild","pos":{"len":65,"line_nr":1132,"pos":29077,"col":0,"last_line":1134},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new guild command. New guild commands will be available in the guild immediately. Returns 201 if a command with the same name does not already exist, or a 200 if it does (in which case the previous command will be overwritten). Both responses include an application command object.","is_multi":false,"pos":{"len":292,"line_nr":532,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) create_guild_application_command(application_id Snowflake, guild_id Snowflake, params CreateApplicationCommandParams) !ApplicationCommand","name":"create_guild_application_command","parent_name":"REST","return_type":"!ApplicationCommand","pos":{"len":157,"line_nr":533,"pos":17479,"col":0,"last_line":537},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a guild ban, and optionally delete previous messages sent by the banned user. Requires the `.ban_members` permission. Returns a 204 empty response on success. Fires a Guild Ban Add Gateway event.","is_multi":false,"pos":{"len":204,"line_nr":1751,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) create_guild_ban(guild_id Snowflake, user_id Snowflake, params CreateGuildBanParams) !","name":"create_guild_ban","parent_name":"REST","return_type":"!","pos":{"len":106,"line_nr":1752,"pos":50184,"col":0,"last_line":1757},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new channel object for the guild. Requires the `.manage_channels` permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting `.manage_roles` permission in channels is only possible for guild administrators. Returns the new [channel](#Channel) object on success. Fires a Channel Create Gateway event.","is_multi":false,"pos":{"len":371,"line_nr":1671,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) create_guild_channel(guild_id Snowflake, params CreateGuildChannelParams) !Channel","name":"create_guild_channel","parent_name":"REST","return_type":"!Channel","pos":{"len":102,"line_nr":1672,"pos":54920,"col":0,"last_line":1677},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new emoji for the guild. Requires the `.create_guild_expressions` permission. Returns the new [emoji](#Emoji) object on success. Fires a Guild Emojis Update Gateway event.","is_multi":false,"pos":{"len":182,"line_nr":234,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn (rest &REST) create_guild_emoji(guild_id Snowflake, params CreateGuildEmojiParams) !Emoji","name":"create_guild_emoji","parent_name":"REST","return_type":"!Emoji","pos":{"len":96,"line_nr":235,"pos":5475,"col":0,"last_line":240},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new guild based on a template. Returns a [guild](#Guild) object on success. Fires a [Guild Create](#GuildCreateEvent) Gateway event.","is_multi":false,"pos":{"len":143,"line_nr":89,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > i This endpoint can be used only by bots in less than 10 guilds.","is_multi":false,"pos":{"len":68,"line_nr":90,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (rest &REST) create_guild_from_guild_template(template_code string, params CreateGuildFromGuildTemplateParams) !Guild","name":"create_guild_from_guild_template","parent_name":"REST","return_type":"!Guild","pos":{"len":124,"line_nr":91,"pos":2616,"col":0,"last_line":95},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new role for the guild. Requires the `.manage_roles` permission. Returns the new [role](#Role) object on success. Fires a Guild Role Create Gateway event. All JSON params are optional.","is_multi":false,"pos":{"len":195,"line_nr":1829,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) create_guild_role(guild_id Snowflake, params CreateGuildRoleParams) !Role","name":"create_guild_role","parent_name":"REST","return_type":"!Role","pos":{"len":93,"line_nr":1830,"pos":52771,"col":0,"last_line":1835},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a guild scheduled event in the guild. Returns a [guild scheduled event](#GuildScheduledEvent) object on success. Fires a Guild Scheduled Event Create Gateway event.","is_multi":false,"pos":{"len":173,"line_nr":234,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > i A guild can have a maximum of 100 events with `.scheduled` or `.active` status at any time.","is_multi":false,"pos":{"len":97,"line_nr":235,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (rest &REST) create_guild_scheduled_event(guild_id Snowflake, params CreateGuildScheduledEventParams) !GuildScheduledEvent","name":"create_guild_scheduled_event","parent_name":"REST","return_type":"!GuildScheduledEvent","pos":{"len":129,"line_nr":236,"pos":6865,"col":0,"last_line":241},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new sticker for the guild. Requires the `.create_guild_expressions` permission. Returns the new [sticker](#Sticker) object on success. Fires a Guild Stickers Update Gateway event.","is_multi":false,"pos":{"len":190,"line_nr":216,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Every guilds has five free sticker slots by default, and each Boost level will grant access to more slots.","is_multi":false,"pos":{"len":108,"line_nr":217,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > i Lottie stickers can only be uploaded on guilds that have either the `VERIFIED` and/or the `PARTNERED` [guild feature](#GuildFeature).","is_multi":false,"pos":{"len":139,"line_nr":218,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn (rest &REST) create_guild_sticker(guild_id Snowflake, params CreateGuildStickerParams) !Sticker","name":"create_guild_sticker","parent_name":"REST","return_type":"!Sticker","pos":{"len":102,"line_nr":219,"pos":6059,"col":0,"last_line":228},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Creates a template for the guild. Requires the `.manage_guild` permission. Returns the created [guild template](#GuildTemplate) object on success.","is_multi":false,"pos":{"len":148,"line_nr":128,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (rest &REST) create_guild_template(guild_id Snowflake, params CreateGuildTemplateParams) !GuildTemplate","name":"create_guild_template","parent_name":"REST","return_type":"!GuildTemplate","pos":{"len":110,"line_nr":129,"pos":3948,"col":0,"last_line":133},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a response to an Interaction from the gateway. Body is an [interaction response](#IInteractionResponse). Returns 204 No Content.","is_multi":false,"pos":{"len":137,"line_nr":606,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This endpoint also supports file attachments similar to the webhook endpoints. Refer to Uploading Files for details on uploading files and multipart/form-data requests.","is_multi":false,"pos":{"len":170,"line_nr":607,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (rest &REST) create_interaction_response(interaction_id Snowflake, interaction_token string, response IInteractionResponse) !","name":"create_interaction_response","parent_name":"REST","return_type":"!","pos":{"len":132,"line_nr":608,"pos":15203,"col":0,"last_line":624},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a new invite object for the channel. Only usable for guild channels. Requires the `.create_instant_invite` permission. All JSON parameters for this route are optional. Returns an invite object. Fires an Invite Create Gateway event.","is_multi":false,"pos":{"len":240,"line_nr":1165,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) create_invite(channel_id Snowflake, params CreateInviteParams) !Invite","name":"create_invite","parent_name":"REST","return_type":"!Invite","pos":{"len":90,"line_nr":1166,"pos":34564,"col":0,"last_line":1170},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) create_message(channel_id Snowflake, params CreateMessageParams) !Message","name":"create_message","parent_name":"REST","return_type":"!Message","pos":{"len":93,"line_nr":1356,"pos":31394,"col":0,"last_line":1370},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Create a reaction for the message. This endpoint requires the `.read_message_history` permission to be present on the current user. Additionally, if nobody else has reacted to the message using this emoji, this endpoint requires the `.add_reactions` permission to be present on the current user. Fires a Message Reaction Add Gateway event.","is_multi":false,"pos":{"len":341,"line_nr":1393,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) create_reaction(channel_id Snowflake, message_id Snowflake, params ReactionParams) !","name":"create_reaction","parent_name":"REST","return_type":"!","pos":{"len":104,"line_nr":1394,"pos":33282,"col":0,"last_line":1396},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Creates a new Stage instance associated to a Stage channel. Returns that [Stage instance](#StageInstance). Fires a Stage Instance Create Gateway event.","is_multi":false,"pos":{"len":153,"line_nr":82,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Requires the user to be a moderator of the Stage channel.","is_multi":false,"pos":{"len":59,"line_nr":83,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"fn (rest &REST) create_stage_instance(params CreateStageInstanceParams) !StageInstance","name":"create_stage_instance","parent_name":"REST","return_type":"!StageInstance","pos":{"len":90,"line_nr":84,"pos":2477,"col":0,"last_line":89},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Creates a test entitlement to a given SKU for a given guild or user. Discord will act as though that user or guild has entitlement to your premium offering.","is_multi":false,"pos":{"len":158,"line_nr":160,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 After creating a test entitlement, you'll need to reload your Discord client. After doing so, you'll see that your server or user now has premium access.","is_multi":false,"pos":{"len":155,"line_nr":161,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"fn (rest &REST) create_test_entitlement(application_id Snowflake, params CreateTestEntitlementParams) !Entitlement","name":"create_test_entitlement","parent_name":"REST","return_type":"!Entitlement","pos":{"len":118,"line_nr":162,"pos":4476,"col":0,"last_line":166},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Creates a new webhook and returns a [webhook](#Webhook) object on success. Requires the `.manage_webhooks` permission. Fires a Webhooks Update Gateway event.","is_multi":false,"pos":{"len":159,"line_nr":139,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 An error will be returned if a webhook name (`name`) is not valid. A webhook name is valid if:","is_multi":false,"pos":{"len":96,"line_nr":140,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - It does not contain the substrings `clyde` or `discord` (case-insensitive)","is_multi":false,"pos":{"len":78,"line_nr":141,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - It follows the nickname guidelines in the [Usernames and Nicknames](https://discord.com/developers/docs/resources/user#usernames-and-nicknames) documentation, with an exception that webhook names can be up to 80 characters","is_multi":false,"pos":{"len":226,"line_nr":142,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) create_webhook(channel_id Snowflake, params CreateWebhookParams) !Webhook","name":"create_webhook","parent_name":"REST","return_type":"!Webhook","pos":{"len":93,"line_nr":143,"pos":3823,"col":0,"last_line":148},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Crosspost a message in an Announcement Channel to following channels. This endpoint requires the SEND_MESSAGES permission, if the current user sent the message, or additionally the `.manage_messages` permission, for all other messages, to be present for the current user.","is_multi":false,"pos":{"len":273,"line_nr":1372,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Returns a [`message`](#Message) object. Fires a Message Update Gateway event.","is_multi":false,"pos":{"len":79,"line_nr":1373,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) crosspost_message(channel_id Snowflake, message_id Snowflake) !Message","name":"crosspost_message","parent_name":"REST","return_type":"!Message","pos":{"len":90,"line_nr":1374,"pos":32361,"col":0,"last_line":1376},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes all reactions on a message. This endpoint requires the `.manage_messages` permission to be present on the current user. Fires a Message Reaction Remove All Gateway event.","is_multi":false,"pos":{"len":180,"line_nr":1436,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) delete_all_reactions(channel_id Snowflake, message_id Snowflake) !","name":"delete_all_reactions","parent_name":"REST","return_type":"!","pos":{"len":86,"line_nr":1437,"pos":35535,"col":0,"last_line":1439},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes all the reactions for a given emoji on a message. This endpoint requires the `.manage_messages` permission to be present on the current user. Fires a Message Reaction Remove Emoji Gateway event.","is_multi":false,"pos":{"len":204,"line_nr":1441,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) delete_all_reactions_for_emoji(channel_id Snowflake, message_id Snowflake, params ReactionParams) !","name":"delete_all_reactions_for_emoji","parent_name":"REST","return_type":"!","pos":{"len":119,"line_nr":1442,"pos":35969,"col":0,"last_line":1444},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a rule. Returns a 204 on success. Fires an Auto Moderation Rule Delete Gateway event.","is_multi":false,"pos":{"len":94,"line_nr":390,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (rest &REST) delete_auto_moderation_rule(guild_id Snowflake, auto_moderation_rule_id Snowflake, params ReasonParam) !","name":"delete_auto_moderation_rule","parent_name":"REST","return_type":"!","pos":{"len":124,"line_nr":391,"pos":11977,"col":0,"last_line":395},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a channel, or close a private message. Requires the `MANAGE_CHANNELS` permission for the guild, or `MANAGE_THREADS` if","is_multi":false,"pos":{"len":127,"line_nr":1061,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the channel is a thread. Deleting a category does not delete its child channels; they will have their parent_id removed and a","is_multi":false,"pos":{"len":127,"line_nr":1062,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Channel Update Gateway event will fire for each of them. Returns a channel object on success. Fires a Channel Delete Gateway","is_multi":false,"pos":{"len":126,"line_nr":1063,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 event (or Thread Delete if the channel was a thread).","is_multi":false,"pos":{"len":55,"line_nr":1064,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) delete_channel(channel_id Snowflake, params ReasonParam) !Channel","name":"delete_channel","parent_name":"REST","return_type":"!Channel","pos":{"len":85,"line_nr":1065,"pos":30618,"col":0,"last_line":1069},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a channel permission overwrite for a user or role in a channel. Only usable for guild channels. Requires the `.manage_roles` permission. Fires a Channel Update Gateway event. For more information about permissions, see [Permissions](#Permissions).","is_multi":false,"pos":{"len":256,"line_nr":1172,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) delete_channel_permission(channel_id Snowflake, overwrite_id Snowflake, params ReasonParam) !","name":"delete_channel_permission","parent_name":"REST","return_type":"!","pos":{"len":113,"line_nr":1173,"pos":35073,"col":0,"last_line":1177},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes a followup message for an Interaction. Returns `204 No Content` on success","is_multi":false,"pos":{"len":84,"line_nr":667,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (rest &REST) delete_followup_message(application_id Snowflake, interaction_token string, message_id Snowflake) !","name":"delete_followup_message","parent_name":"REST","return_type":"!","pos":{"len":119,"line_nr":668,"pos":18657,"col":0,"last_line":670},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes a global command. Returns 204 No Content on success.","is_multi":false,"pos":{"len":62,"line_nr":518,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) delete_global_application_command(application_id Snowflake, command_id Snowflake) !","name":"delete_global_application_command","parent_name":"REST","return_type":"!","pos":{"len":103,"line_nr":519,"pos":16257,"col":0,"last_line":521},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a guild permanently. User must be owner. Fires a Guild Delete Gateway event.","is_multi":false,"pos":{"len":85,"line_nr":1396,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) delete_guild(guild_id Snowflake) !","name":"delete_guild","parent_name":"REST","return_type":"!","pos":{"len":54,"line_nr":1397,"pos":37831,"col":0,"last_line":1399},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a guild command. Returns 204 No Content on success.","is_multi":false,"pos":{"len":60,"line_nr":551,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) delete_guild_application_command(application_id Snowflake, guild_id Snowflake, command_id Snowflake) !","name":"delete_guild_application_command","parent_name":"REST","return_type":"!","pos":{"len":122,"line_nr":552,"pos":19062,"col":0,"last_line":554},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete the given emoji. For emojis created by the current user, requires either the `.create_guild_expressions` or `.manage_guild_expressions` permission. For other emojis, requires the `.manage_guild_expressions` permission. Returns 204 No Content on success. Fires a Guild Emojis Update Gateway event.","is_multi":false,"pos":{"len":305,"line_nr":275,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn (rest &REST) delete_guild_emoji(guild_id Snowflake, emoji_id Snowflake, params ReasonParam) !","name":"delete_guild_emoji","parent_name":"REST","return_type":"!","pos":{"len":100,"line_nr":276,"pos":7186,"col":0,"last_line":280},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete the attached integration object for the guild. Deletes any associated webhooks and kicks the associated bot if there is one. Requires the `.manage_guild` permission. Returns a 204 empty response on success. Fires Guild Integrations Update and Integration Delete Gateway events.","is_multi":false,"pos":{"len":286,"line_nr":2374,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) delete_guild_integration(guild_id Snowflake, integration_id Snowflake) !","name":"delete_guild_integration","parent_name":"REST","return_type":"!","pos":{"len":92,"line_nr":2375,"pos":68326,"col":0,"last_line":2377},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a guild role. Requires the `.manage_roles` permission. Returns a 204 empty response on success. Fires a Guild Role Delete Gateway event.","is_multi":false,"pos":{"len":145,"line_nr":1962,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) delete_guild_role(guild_id Snowflake, role_id Snowflake, params ReasonParam) !","name":"delete_guild_role","parent_name":"REST","return_type":"!","pos":{"len":98,"line_nr":1963,"pos":56873,"col":0,"last_line":1967},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a guild scheduled event. Returns a 204 on success. Fires a Guild Scheduled Event Delete Gateway event.","is_multi":false,"pos":{"len":111,"line_nr":336,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (rest &REST) delete_guild_scheduled_event(guild_id Snowflake, guild_scheduled_event_id Snowflake, params ReasonParam) !","name":"delete_guild_scheduled_event","parent_name":"REST","return_type":"!","pos":{"len":126,"line_nr":337,"pos":10737,"col":0,"last_line":341},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete the given sticker. For stickers created by the current user, requires either the `.create_guild_expressions` or `.manage_guild_expressions` permission. For other stickers, requires the `.manage_guild_expressions` permission. Returns 204 No Content on success. Fires a Guild Stickers Update Gateway event.","is_multi":false,"pos":{"len":313,"line_nr":268,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn (rest &REST) delete_guild_sticker(guild_id Snowflake, sticker_id Snowflake, params ReasonParam) !","name":"delete_guild_sticker","parent_name":"REST","return_type":"!","pos":{"len":104,"line_nr":269,"pos":8134,"col":0,"last_line":273},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes the template. Requires the `.manage_guild` permission. Returns the deleted [guild template](#GuildTemplate) object on success.","is_multi":false,"pos":{"len":136,"line_nr":171,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (rest &REST) delete_guild_template(guild_id Snowflake, template_code string) !GuildTemplate","name":"delete_guild_template","parent_name":"REST","return_type":"!GuildTemplate","pos":{"len":98,"line_nr":172,"pos":5783,"col":0,"last_line":174},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete an invite. Requires the `.manage_channels` permission on the channel this invite belongs to, or `.manage_guild` to remove any invite across the guild. Returns an [`Invite`](#Invite) object on success. Fires an Invite Delete Gateway event.","is_multi":false,"pos":{"len":247,"line_nr":175,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\invite.v","content":"fn (rest &REST) delete_invite(code string, params ReasonParam) !Invite","name":"delete_invite","parent_name":"REST","return_type":"!Invite","pos":{"len":74,"line_nr":176,"pos":4996,"col":0,"last_line":180},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the `.manage_messages` permission. Fires a Message Delete Gateway event.","is_multi":false,"pos":{"len":217,"line_nr":1510,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) delete_message(channel_id Snowflake, message_id Snowflake, params ReasonParam) !","name":"delete_message","parent_name":"REST","return_type":"!","pos":{"len":100,"line_nr":1511,"pos":39403,"col":0,"last_line":1515},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete multiple messages in a single request. This endpoint can only be used on guild channels and requires the `.manage_messages` permission. Fires a Message Delete Bulk Gateway event.","is_multi":false,"pos":{"len":187,"line_nr":1517,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Any message IDs given that do not exist or are invalid will count towards the minimum and maximum message count (currently 2 and 100 respectively).","is_multi":false,"pos":{"len":149,"line_nr":1518,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > ! This endpoint will not delete messages older than 2 weeks, and will fail with a 400 BAD REQUEST if any message provided is older than that or if any duplicate message IDs are provided.","is_multi":false,"pos":{"len":190,"line_nr":1519,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) delete_messages(channel_id Snowflake, message_ids []Snowflake, params ReasonParam) !","name":"delete_messages","parent_name":"REST","return_type":"!","pos":{"len":104,"line_nr":1520,"pos":40194,"col":0,"last_line":1527},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes the initial Interaction response. Returns 204 No Content on success.","is_multi":false,"pos":{"len":78,"line_nr":636,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (rest &REST) delete_original_interaction_response(application_id Snowflake, interaction_token string) !","name":"delete_original_interaction_response","parent_name":"REST","return_type":"!","pos":{"len":110,"line_nr":637,"pos":16693,"col":0,"last_line":639},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a reaction the current user has made for the message. Fires a Message Reaction Remove Gateway event.","is_multi":false,"pos":{"len":109,"line_nr":1398,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) delete_own_reaction(channel_id Snowflake, message_id Snowflake, params ReactionParams) !","name":"delete_own_reaction","parent_name":"REST","return_type":"!","pos":{"len":108,"line_nr":1399,"pos":33658,"col":0,"last_line":1401},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes the Stage instance. Returns `204 No Content`. Fires a Stage Instance Delete Gateway event.","is_multi":false,"pos":{"len":100,"line_nr":126,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Requires the user to be a moderator of the Stage channel.","is_multi":false,"pos":{"len":59,"line_nr":127,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"fn (rest &REST) delete_stage_instance(channel_id Snowflake, params ReasonParam) !","name":"delete_stage_instance","parent_name":"REST","return_type":"!","pos":{"len":85,"line_nr":128,"pos":4148,"col":0,"last_line":132},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes a currently-active test entitlement. Discord will act as though that user or guild no longer has entitlement to your premium offering.","is_multi":false,"pos":{"len":144,"line_nr":168,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"fn (rest &REST) delete_test_entitlement(application_id Snowflake, entitlement_id Snowflake) !","name":"delete_test_entitlement","parent_name":"REST","return_type":"!","pos":{"len":97,"line_nr":169,"pos":4919,"col":0,"last_line":171},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes another user's reaction. This endpoint requires the `.manage_messages` permission to be present on the current user. Fires a Message Reaction Remove Gateway event.","is_multi":false,"pos":{"len":173,"line_nr":1403,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) delete_user_reaction(channel_id Snowflake, message_id Snowflake, user_id Snowflake, params ReactionParams) !","name":"delete_user_reaction","parent_name":"REST","return_type":"!","pos":{"len":128,"line_nr":1404,"pos":34105,"col":0,"last_line":1406},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Delete a webhook permanently. Requires the `.manage_webhooks` permission. Returns a 204 No Content response on success. Fires a Webhooks Update Gateway event.","is_multi":false,"pos":{"len":160,"line_nr":238,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) delete_webhook(webhook_id Snowflake, params ReasonParam) !","name":"delete_webhook","parent_name":"REST","return_type":"!","pos":{"len":78,"line_nr":239,"pos":7966,"col":0,"last_line":241},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Deletes a message that was created by the webhook. Returns a 204 No Content response on success.","is_multi":false,"pos":{"len":98,"line_nr":505,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) delete_webhook_message(webhook_id Snowflake, webhook_token string, message_id ?Snowflake, params DeleteWebhookMessageParams) !","name":"delete_webhook_message","parent_name":"REST","return_type":"!","pos":{"len":146,"line_nr":506,"pos":18237,"col":0,"last_line":512},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Same as [static `REST.delete_webhook_with_token`](#REST.delete_webhook_with_token)","is_multi":false,"pos":{"len":84,"line_nr":251,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) delete_webhook_with_token(webhook_id Snowflake, webhook_token string, params ReasonParam) !","name":"delete_webhook_with_token","parent_name":"REST","return_type":"!","pos":{"len":111,"line_nr":253,"pos":8605,"col":0,"last_line":255},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Edits command permissions for a specific command for your application in a guild and returns a guild application command permissions object. Fires an Application Command Permissions Update Gateway event.","is_multi":false,"pos":{"len":205,"line_nr":662,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":663,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 You can add up to 100 permission overwrites for a command.","is_multi":false,"pos":{"len":60,"line_nr":664,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) edit_application_command_permissions(application_id Snowflake, guild_id Snowflake, command_id Snowflake, params EditApplicationCommandPermissionsParams) !GuildApplicationCommandPermissions","name":"edit_application_command_permissions","parent_name":"REST","return_type":"!GuildApplicationCommandPermissions","pos":{"len":208,"line_nr":665,"pos":23760,"col":0,"last_line":670},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify an existing rule. Returns an auto moderation rule on success. Fires an Auto Moderation Rule Update Gateway event.","is_multi":false,"pos":{"len":122,"line_nr":382,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (rest &REST) edit_auto_moderation_rule(guild_id Snowflake, auto_moderation_rule_id Snowflake, params EditAutoModerationRuleParams) !AutoModerationRule","name":"edit_auto_moderation_rule","parent_name":"REST","return_type":"!AutoModerationRule","pos":{"len":157,"line_nr":383,"pos":11463,"col":0,"last_line":388},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Update a channel's settings. Returns a channel on success, and a 400 BAD REQUEST on invalid parameters. All JSON parameters are optional.","is_multi":false,"pos":{"len":139,"line_nr":1038,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) edit_channel(channel_id Snowflake, params EditChannelParams) !Channel","name":"edit_channel","parent_name":"REST","return_type":"!Channel","pos":{"len":89,"line_nr":1039,"pos":29004,"col":0,"last_line":1044},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Edit the channel permission overwrites for a user or role in a channel. Only usable for guild channels. Requires the `.manage_roles` permission. Only permissions your bot has in the guild or parent channel (if applicable) can be allowed/denied (unless your bot has a `.manage_roles` overwrite in the channel). Fires a Channel Update Gateway event. For more information about permissions, see [Permissions](#Permissions).","is_multi":false,"pos":{"len":422,"line_nr":1104,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) edit_channel_permissions(channel_id Snowflake, overwrite_id Snowflake, params EditChannelPermissionsParams) !","name":"edit_channel_permissions","parent_name":"REST","return_type":"!","pos":{"len":129,"line_nr":1105,"pos":32040,"col":0,"last_line":1110},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Updates the current user's voice state. Returns 204 No Content on success. Fires a Voice State Update Gateway event.","is_multi":false,"pos":{"len":118,"line_nr":2812,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 # Caveats","is_multi":false,"pos":{"len":11,"line_nr":2813,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 There are currently several caveats for this endpoint:","is_multi":false,"pos":{"len":56,"line_nr":2814,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `channel_id` must currently point to a stage channel.","is_multi":false,"pos":{"len":57,"line_nr":2815,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - current user must already have joined `channel_id`.","is_multi":false,"pos":{"len":55,"line_nr":2816,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - You must have the `.mute_members` permission to unsuppress yourself. You can always suppress yourself.","is_multi":false,"pos":{"len":106,"line_nr":2817,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - You must have the `.request_to_speak` permission to request to speak. You can always clear your own request to speak.","is_multi":false,"pos":{"len":121,"line_nr":2818,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - You are able to set `request_to_speak_timestamp` to any present or future time.","is_multi":false,"pos":{"len":83,"line_nr":2819,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_current_user_voice_state(guild_id Snowflake, params EditCurrentUserVoiceStateParams) !","name":"edit_current_user_voice_state","parent_name":"REST","return_type":"!","pos":{"len":111,"line_nr":2820,"pos":82102,"col":0,"last_line":2824},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Edits a followup message for an Interaction. Functions the same as [`Client.edit_webhook_message`](#Client.edit_webhook_message).","is_multi":false,"pos":{"len":131,"line_nr":662,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (rest &REST) edit_followup_message(application_id Snowflake, interaction_token string, message_id Snowflake, params EditWebhookMessageParams) !Message","name":"edit_followup_message","parent_name":"REST","return_type":"!Message","pos":{"len":157,"line_nr":663,"pos":18318,"col":0,"last_line":665},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Edit a global command. Returns application command object. All fields are optional, but any fields provided will entirely overwrite the existing values of those fields.","is_multi":false,"pos":{"len":170,"line_nr":511,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) edit_global_application_command(application_id Snowflake, command_id Snowflake, params EditApplicationCommandParams) !ApplicationCommand","name":"edit_global_application_command","parent_name":"REST","return_type":"!ApplicationCommand","pos":{"len":156,"line_nr":512,"pos":15814,"col":0,"last_line":516},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Update a group DM channel's settings. Returns a channel on success, and a 400 BAD REQUEST on invalid parameters. All JSON parameters are optional.","is_multi":false,"pos":{"len":148,"line_nr":1046,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) edit_group_dm_channel(channel_id Snowflake, params EditGroupDMChannelParams) !Channel","name":"edit_group_dm_channel","parent_name":"REST","return_type":"!Channel","pos":{"len":105,"line_nr":1047,"pos":29422,"col":0,"last_line":1049},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify a guild's settings. Requires the `.manage_guild` permission. Returns the updated [guild](#Guild) object on success. Fires a Guild Update Gateway event.","is_multi":false,"pos":{"len":160,"line_nr":1387,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > ! Attempting to add or remove the COMMUNITY guild feature requires the ADMINISTRATOR permission.","is_multi":false,"pos":{"len":100,"line_nr":1388,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_guild(guild_id Snowflake, params EditGuildParams) !Guild","name":"edit_guild","parent_name":"REST","return_type":"!Guild","pos":{"len":81,"line_nr":1389,"pos":37490,"col":0,"last_line":1394},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Edit a guild command. Updates for guild commands will be available immediately. Returns application command object. All fields are optional, but any fields provided will entirely overwrite the existing values of those fields.","is_multi":false,"pos":{"len":227,"line_nr":544,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) edit_guild_application_command(application_id Snowflake, guild_id Snowflake, command_id Snowflake, params EditApplicationCommandParams) !ApplicationCommand","name":"edit_guild_application_command","parent_name":"REST","return_type":"!ApplicationCommand","pos":{"len":175,"line_nr":545,"pos":18557,"col":0,"last_line":549},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Update a guild channel's settings. Returns a channel on success, and a 400 BAD REQUEST on invalid parameters. All JSON parameters are optional.","is_multi":false,"pos":{"len":145,"line_nr":1051,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) edit_guild_channel(channel_id Snowflake, params EditGuildChannelParams) !Channel","name":"edit_guild_channel","parent_name":"REST","return_type":"!Channel","pos":{"len":100,"line_nr":1052,"pos":29727,"col":0,"last_line":1054},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify the positions of a set of [channel](#Channel) objects for the guild. Requires `.manage_channels` permission. Fires multiple Channel Update Gateway events.","is_multi":false,"pos":{"len":163,"line_nr":1449,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_guild_channel_positions(guild_id Snowflake, params []EditGuildChannelPositionsParams) !","name":"edit_guild_channel_positions","parent_name":"REST","return_type":"!","pos":{"len":112,"line_nr":1450,"pos":39456,"col":0,"last_line":1454},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify the given emoji. For emojis created by the current user, requires either the `.create_guild_expressions` or `.manage_guild_expressions` permission. For other emojis, requires the `.manage_guild_expressions` permission. Returns the updated [emoji](#Emoji) object on success. Fires a Guild Emojis Update Gateway event.","is_multi":false,"pos":{"len":325,"line_nr":267,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn (rest &REST) edit_guild_emoji(guild_id Snowflake, emoji_id Snowflake, params EditGuildEmojiParams) !Emoji","name":"edit_guild_emoji","parent_name":"REST","return_type":"!Emoji","pos":{"len":112,"line_nr":268,"pos":6549,"col":0,"last_line":273},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify attributes of a guild member. Returns a 200 OK with the guild member as the body. Fires a Guild Member Update Gateway event. If the channel_id is set to null, this will force the target user to be disconnected from voice.","is_multi":false,"pos":{"len":230,"line_nr":1612,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_guild_member(guild_id Snowflake, user_id Snowflake, params EditGuildMemberParams) !GuildMember","name":"edit_guild_member","parent_name":"REST","return_type":"!GuildMember","pos":{"len":119,"line_nr":1613,"pos":45205,"col":0,"last_line":1618},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify a guild's MFA level. Requires guild ownership. Returns the updated level on success. Fires a Guild Update Gateway event.","is_multi":false,"pos":{"len":129,"line_nr":1951,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_guild_mfa_level(guild_id Snowflake, level MFALevel, params ReasonParam) !MFALevel","name":"edit_guild_mfa_level","parent_name":"REST","return_type":"!MFALevel","pos":{"len":106,"line_nr":1952,"pos":56422,"col":0,"last_line":1960},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modifies the onboarding configuration of the guild. Returns a 200 with the Onboarding object for the guild. Requires the `.manage_guild` and `.manage_roles` permissions.","is_multi":false,"pos":{"len":171,"line_nr":2774,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > i Onboarding enforces constraints when enabled. These constraints are that there must be at least 7 Default Channels and at least 5 of them must allow sending messages to the @everyone role. The mode field modifies what is considered when enforcing these constraints.","is_multi":false,"pos":{"len":271,"line_nr":2775,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_guild_onboarding(guild_id Snowflake, params EditGuildOnboardingParams) !GuildOnboarding","name":"edit_guild_onboarding","parent_name":"REST","return_type":"!GuildOnboarding","pos":{"len":112,"line_nr":2776,"pos":80368,"col":0,"last_line":2781},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify a guild role. Requires the `.manage_roles` permission. Returns the updated role on success. Fires a Guild Role Update Gateway event.","is_multi":false,"pos":{"len":141,"line_nr":1943,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_guild_role(guild_id Snowflake, role_id Snowflake, params EditGuildRoleParams) !Role","name":"edit_guild_role","parent_name":"REST","return_type":"!Role","pos":{"len":108,"line_nr":1944,"pos":55968,"col":0,"last_line":1949},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify the positions of a set of role objects for the guild. Requires the `.manage_roles` permission. Returns a list of all of the guild's role objects on success. Fires multiple Guild Role Update Gateway events.","is_multi":false,"pos":{"len":214,"line_nr":1859,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_guild_role_positions(guild_id Snowflake, params []EditGuildRolePositionsParams, params2 ReasonParam) ![]Role","name":"edit_guild_role_positions","parent_name":"REST","return_type":"![]Role","pos":{"len":133,"line_nr":1860,"pos":53666,"col":0,"last_line":1867},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify a guild scheduled event. Returns the modified [guild scheduled event](#GuildScheduledEvent) object on success. Fires a Guild Scheduled Event Update Gateway event.","is_multi":false,"pos":{"len":171,"line_nr":326,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > i To start or end an event, use this function to modify the event's status field.","is_multi":false,"pos":{"len":85,"line_nr":327,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > i This endpoint silently discards `entity_metadata` for non-`.external` events.","is_multi":false,"pos":{"len":83,"line_nr":328,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (rest &REST) edit_guild_scheduled_event(guild_id Snowflake, guild_scheduled_event_id Snowflake, params EditGuildScheduledEventParams) !GuildScheduledEvent","name":"edit_guild_scheduled_event","parent_name":"REST","return_type":"!GuildScheduledEvent","pos":{"len":161,"line_nr":329,"pos":10205,"col":0,"last_line":334},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify the given sticker. For stickers created by the current user, requires either the `.create_guild_expressions` or `.manage_guild_expressions` permission. For other stickers, requires the `.manage_guild_expressions` permission. Returns the updated [sticker](#Sticker) object on success. Fires a Guild Stickers Update Gateway event.","is_multi":false,"pos":{"len":337,"line_nr":260,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn (rest &REST) edit_guild_sticker(guild_id Snowflake, sticker_id Snowflake, params EditGuildStickerParams) !Sticker","name":"edit_guild_sticker","parent_name":"REST","return_type":"!Sticker","pos":{"len":120,"line_nr":261,"pos":7476,"col":0,"last_line":266},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modifies the template's metadata. Requires the `.manage_guild` permission. Returns the [guild template](#GuildTemplate) object on success.","is_multi":false,"pos":{"len":140,"line_nr":164,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (rest &REST) edit_guild_template(guild_id Snowflake, template_code string, params EditGuildTemplateParams) !GuildTemplate","name":"edit_guild_template","parent_name":"REST","return_type":"!GuildTemplate","pos":{"len":128,"line_nr":165,"pos":5313,"col":0,"last_line":169},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify a guild widget settings object for the guild. All attributes may be passed in with JSON and modified. Requires the `.manage_guild` permission. Returns the updated guild widget settings object. Fires a Guild Update Gateway event.","is_multi":false,"pos":{"len":237,"line_nr":2436,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_guild_widget_settings(guild_id Snowflake, params EditGuildWidgetParams) !GuildWidgetSettings","name":"edit_guild_widget_settings","parent_name":"REST","return_type":"!GuildWidgetSettings","pos":{"len":117,"line_nr":2437,"pos":70185,"col":0,"last_line":2442},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Edit a previously sent message. The fields `content`, `embeds`, and `flags` can be edited by the original message author. Other users can only edit `flags` and only if they have the `.manage_messages` permission in the corresponding channel. When specifying flags, ensure to include all previously set flags/bits in addition to ones that you are modifying. Only `flags` documented in the table below may be modified by users (unsupported flag changes are currently ignored without error).","is_multi":false,"pos":{"len":490,"line_nr":1492,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 When the `content` field is edited, the `mentions` array in the message object will be reconstructed from scratch based on the new content. The `allowed_mentions` field of the edit request controls how this happens. If there is no explicit `allowed_mentions` in the edit request, the content will be parsed with default allowances, that is, without regard to whether or not an `allowed_mentions` was present in the request that originally created the message.","is_multi":false,"pos":{"len":461,"line_nr":1493,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Returns a [message](#Message) object. Fires a Message Update Gateway event.","is_multi":false,"pos":{"len":77,"line_nr":1494,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) edit_message(channel_id Snowflake, message_id Snowflake, params EditMessageParams) !Message","name":"edit_message","parent_name":"REST","return_type":"!Message","pos":{"len":111,"line_nr":1495,"pos":38492,"col":0,"last_line":1508},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Edit properties of the app associated with the requesting bot user. Only properties that are passed will be updated. Returns the updated application object on success.","is_multi":false,"pos":{"len":169,"line_nr":498,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"fn (rest &REST) edit_my_application(params EditApplicationParams) !Application","name":"edit_my_application","parent_name":"REST","return_type":"!Application","pos":{"len":82,"line_nr":499,"pos":13447,"col":0,"last_line":503},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modifies the current member in a guild. Returns a 200 with the updated member object on success. Fires a Guild Member Update Gateway event.","is_multi":false,"pos":{"len":141,"line_nr":1640,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_my_guild_member(guild_id Snowflake, params EditCurrentMemberParams) !GuildMember","name":"edit_my_guild_member","parent_name":"REST","return_type":"!GuildMember","pos":{"len":105,"line_nr":1641,"pos":46054,"col":0,"last_line":1646},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify the requester's user account settings. Returns a user object on success. Fires a User Update Gateway event.","is_multi":false,"pos":{"len":116,"line_nr":254,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) edit_my_user(params EditMyUserParams) !User","name":"edit_my_user","parent_name":"REST","return_type":"!User","pos":{"len":63,"line_nr":255,"pos":5752,"col":0,"last_line":257},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Edits the initial Interaction response. Functions the same as [`Client.edit_webhook_message`](#Client.edit_webhook_message).","is_multi":false,"pos":{"len":126,"line_nr":631,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (rest &REST) edit_original_interaction_response(application_id Snowflake, interaction_token string, params EditWebhookMessageParams) !Message","name":"edit_original_interaction_response","parent_name":"REST","return_type":"!Message","pos":{"len":148,"line_nr":632,"pos":16375,"col":0,"last_line":634},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Updates fields of an existing Stage instance. Returns the updated [Stage instance](#StageInstance). Fires a Stage Instance Update Gateway event.","is_multi":false,"pos":{"len":146,"line_nr":117,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Requires the user to be a moderator of the Stage channel.","is_multi":false,"pos":{"len":59,"line_nr":118,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"fn (rest &REST) edit_stage_instance(channel_id Snowflake, params EditStageInstanceParams) !StageInstance","name":"edit_stage_instance","parent_name":"REST","return_type":"!StageInstance","pos":{"len":108,"line_nr":119,"pos":3685,"col":0,"last_line":124},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Update a thread's settings. Returns a channel on success, and a 400 BAD REQUEST on invalid parameters. All JSON parameters are optional.","is_multi":false,"pos":{"len":138,"line_nr":1056,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) edit_thread_channel(channel_id Snowflake, params EditThreadChannelParams) !Channel","name":"edit_thread_channel","parent_name":"REST","return_type":"!Channel","pos":{"len":102,"line_nr":1057,"pos":30020,"col":0,"last_line":1059},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Updates another user's voice state. Fires a Voice State Update Gateway event.","is_multi":false,"pos":{"len":79,"line_nr":2846,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 # Caveats","is_multi":false,"pos":{"len":11,"line_nr":2847,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 There are currently several caveats for this endpoint:","is_multi":false,"pos":{"len":56,"line_nr":2848,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `channel_id` must currently point to a stage channel.","is_multi":false,"pos":{"len":57,"line_nr":2849,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - User must already have joined `channel_id`.","is_multi":false,"pos":{"len":47,"line_nr":2850,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - You must have the `.mute_members` permission. (Since suppression is the only thing that is available currently.)","is_multi":false,"pos":{"len":116,"line_nr":2851,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - When unsuppressed, non-bot users will have their `request_to_speak_timestamp` set to the current time. Bot users will not.","is_multi":false,"pos":{"len":126,"line_nr":2852,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - When suppressed, the user will have their `request_to_speak_timestamp` removed.","is_multi":false,"pos":{"len":83,"line_nr":2853,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) edit_user_voice_state(guild_id Snowflake, user_id Snowflake, params EditUserVoiceStateParams) !","name":"edit_user_voice_state","parent_name":"REST","return_type":"!","pos":{"len":115,"line_nr":2854,"pos":83364,"col":0,"last_line":2858},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Modify a webhook. Requires the `.manage_webhooks` permission. Returns the updated [webhook](#Webhook) object on success. Fires a Webhooks Update Gateway event.","is_multi":false,"pos":{"len":161,"line_nr":208,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) edit_webhook(webhook_id Snowflake, params EditWebhookParams) !Webhook","name":"edit_webhook","parent_name":"REST","return_type":"!Webhook","pos":{"len":89,"line_nr":209,"pos":6307,"col":0,"last_line":214},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Edits a previously-sent webhook message from the same token. Returns a [message](#Message) object on success.","is_multi":false,"pos":{"len":111,"line_nr":465,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 When the `content` field is edited, the `mentions` array in the message object will be reconstructed from scratch based on the new content. The `allowed_mentions` field of the edit request controls how this happens. If there is no explicit `allowed_mentions` in the edit request, the content will be parsed with default allowances, that is, without regard to whether or not an `allowed_mentions` was present in the request that originally created the message.","is_multi":false,"pos":{"len":461,"line_nr":466,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) edit_webhook_message(webhook_id Snowflake, webhook_token string, message_id ?Snowflake, params EditWebhookMessageParams) !Message","name":"edit_webhook_message","parent_name":"REST","return_type":"!Message","pos":{"len":149,"line_nr":467,"pos":16843,"col":0,"last_line":488},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Same as [static `REST.edit_webhook_with_token`](#REST.edit_webhook_with_token)","is_multi":false,"pos":{"len":80,"line_nr":225,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) edit_webhook_with_token(webhook_id Snowflake, webhook_token string, params EditWebhookParams) !Webhook","name":"edit_webhook_with_token","parent_name":"REST","return_type":"!Webhook","pos":{"len":122,"line_nr":227,"pos":7210,"col":0,"last_line":229},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Same as [static `REST.execute_webhook`](#REST.execute_webhook)","is_multi":false,"pos":{"len":64,"line_nr":374,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) execute_webhook(webhook_id Snowflake, webhook_token string, params ExecuteWebhookParams) !&Message","name":"execute_webhook","parent_name":"REST","return_type":"Message","pos":{"len":118,"line_nr":376,"pos":13513,"col":0,"last_line":378},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Fetches permissions for a specific command for your application in a guild. Returns a guild application command permissions object.","is_multi":false,"pos":{"len":133,"line_nr":643,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) fetch_application_command_permissions(application_id Snowflake, guild_id Snowflake, command_id Snowflake) !GuildApplicationCommandPermissions","name":"fetch_application_command_permissions","parent_name":"REST","return_type":"!GuildApplicationCommandPermissions","pos":{"len":161,"line_nr":644,"pos":22735,"col":0,"last_line":647},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of [application role connection metadata](#ApplicationRoleConnectionMetadata) objects for the given application.","is_multi":false,"pos":{"len":129,"line_nr":66,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_role_connection_metadata.v","content":"fn (rest &REST) fetch_application_role_connection_metadata_records(application_id Snowflake) ![]ApplicationRoleConnectionMetadata","name":"fetch_application_role_connection_metadata_records","parent_name":"REST","return_type":"![]ApplicationRoleConnectionMetadata","pos":{"len":133,"line_nr":67,"pos":2571,"col":0,"last_line":72},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Get a single rule. Returns an auto moderation rule object.","is_multi":false,"pos":{"len":60,"line_nr":274,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (rest &REST) fetch_auto_moderation_rule(guild_id Snowflake, auto_moderation_rule_id Snowflake) !AutoModerationRule","name":"fetch_auto_moderation_rule","parent_name":"REST","return_type":"!AutoModerationRule","pos":{"len":121,"line_nr":275,"pos":7862,"col":0,"last_line":277},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Get a channel by ID. Returns a channel object. If the channel is a thread, a thread member object is included in the returned result.","is_multi":false,"pos":{"len":135,"line_nr":805,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) fetch_channel(channel_id Snowflake) !Channel","name":"fetch_channel","parent_name":"REST","return_type":"!Channel","pos":{"len":64,"line_nr":806,"pos":20745,"col":0,"last_line":808},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of channel [webhook](#Webhook) objects. Requires the `.manage_webhooks` permission.","is_multi":false,"pos":{"len":100,"line_nr":150,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) fetch_channel_webhooks(channel_id Snowflake) ![]Webhook","name":"fetch_channel_webhooks","parent_name":"REST","return_type":"![]Webhook","pos":{"len":75,"line_nr":151,"pos":4205,"col":0,"last_line":156},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a followup message for an Interaction. Functions the same as [`Client.fetch_webhook_message`](#Client.fetch_webhook_message).","is_multi":false,"pos":{"len":135,"line_nr":657,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (rest &REST) fetch_followup_message(application_id Snowflake, interaction_token string, message_id Snowflake) !Message","name":"fetch_followup_message","parent_name":"REST","return_type":"!Message","pos":{"len":125,"line_nr":658,"pos":17971,"col":0,"last_line":660},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (rest &REST) fetch_gateway_configuration() !GatewayConfiguration","name":"fetch_gateway_configuration","parent_name":"REST","return_type":"!GatewayConfiguration","pos":{"len":71,"line_nr":547,"pos":14889,"col":0,"last_line":549},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (rest &REST) fetch_gateway_url() !string","name":"fetch_gateway_url","parent_name":"REST","return_type":"!string","pos":{"len":47,"line_nr":490,"pos":13281,"col":0,"last_line":492},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Fetch a global command for your application. Returns an application command object.","is_multi":false,"pos":{"len":85,"line_nr":452,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) fetch_global_application_command(application_id Snowflake, command_id Snowflake) !ApplicationCommand","name":"fetch_global_application_command","parent_name":"REST","return_type":"!ApplicationCommand","pos":{"len":120,"line_nr":453,"pos":13495,"col":0,"last_line":455},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Fetch all of the global commands for your application. Returns an array of application command objects.","is_multi":false,"pos":{"len":105,"line_nr":382,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) fetch_global_application_commands(application_id Snowflake, params FetchGlobalApplicationCommandsParams) ![]ApplicationCommand","name":"fetch_global_application_commands","parent_name":"REST","return_type":"![]ApplicationCommand","pos":{"len":146,"line_nr":383,"pos":10599,"col":0,"last_line":389},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild(guild_id Snowflake) !Guild","name":"fetch_guild","parent_name":"REST","return_type":"!Guild","pos":{"len":58,"line_nr":1136,"pos":29248,"col":0,"last_line":1138},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Fetch a guild command for your application. Returns an application command object.","is_multi":false,"pos":{"len":84,"line_nr":539,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) fetch_guild_application_command(application_id Snowflake, guild_id Snowflake, command_id Snowflake) !ApplicationCommand","name":"fetch_guild_application_command","parent_name":"REST","return_type":"!ApplicationCommand","pos":{"len":139,"line_nr":540,"pos":17949,"col":0,"last_line":542},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Fetches permissions for all commands for your application in a guild. Returns an array of guild application command permissions objects.","is_multi":false,"pos":{"len":138,"line_nr":635,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (rest &REST) fetch_guild_application_command_permissions(application_id Snowflake, guild_id Snowflake) ![]GuildApplicationCommandPermissions","name":"fetch_guild_application_command_permissions","parent_name":"REST","return_type":"![]GuildApplicationCommandPermissions","pos":{"len":147,"line_nr":636,"pos":22126,"col":0,"last_line":641},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns an [audit log](#AuditLog) object for the guild. Requires the `.view_audit_log` permission.","is_multi":false,"pos":{"len":100,"line_nr":418,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The returned list of audit log entries is ordered based on whether you use `before` or `after`. When using `before`, the list is ordered by the audit log entry ID descending (newer entries first). If `after` is used, the list is reversed and appears in ascending order (older entries first). Omitting both `before` and `after` defaults to `before` the current timestamp and will show the most recent entries in descending order by ID, the opposite can be achieved using `after: 0` (showing oldest entries).","is_multi":false,"pos":{"len":508,"line_nr":419,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"fn (rest &REST) fetch_guild_audit_log(guild_id Snowflake, params FetchGuildAuditLogParams) !AuditLog","name":"fetch_guild_audit_log","parent_name":"REST","return_type":"!AuditLog","pos":{"len":104,"line_nr":420,"pos":13873,"col":0,"last_line":424},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a ban object for the given user or a 404 not found if the ban cannot be found. Requires the `.ban_members` permission.","is_multi":false,"pos":{"len":128,"line_nr":1730,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_ban(guild_id Snowflake, user_id Snowflake) !Ban","name":"fetch_guild_ban","parent_name":"REST","return_type":"!Ban","pos":{"len":79,"line_nr":1731,"pos":49314,"col":0,"last_line":1733},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of ban objects for the users banned from this guild. Requires the `.ban_members` permission.","is_multi":false,"pos":{"len":109,"line_nr":1721,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_bans(guild_id Snowflake, params FetchGuildBansParams) ![]Ban","name":"fetch_guild_bans","parent_name":"REST","return_type":"![]Ban","pos":{"len":92,"line_nr":1722,"pos":48855,"col":0,"last_line":1728},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of guild channel objects. Does not include threads.","is_multi":false,"pos":{"len":68,"line_nr":1401,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_channels(guild_id Snowflake) ![]Channel","name":"fetch_guild_channels","parent_name":"REST","return_type":"![]Channel","pos":{"len":71,"line_nr":1402,"pos":38034,"col":0,"last_line":1407},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns an [emoji](#Emoji) object for the given guild and emoji IDs. Includes the user field if the bot has the `.manage_guild_expressions` permission, or if the bot created the emoji and has the the `.create_guild_expressions` permission.","is_multi":false,"pos":{"len":241,"line_nr":206,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn (rest &REST) fetch_guild_emoji(guild_id Snowflake, emoji_id Snowflake) !Emoji","name":"fetch_guild_emoji","parent_name":"REST","return_type":"!Emoji","pos":{"len":84,"line_nr":207,"pos":4587,"col":0,"last_line":209},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of [integration](#Integration) objects for the guild. Requires the `.manage_guild` permission.","is_multi":false,"pos":{"len":111,"line_nr":2365,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > i This endpoint returns a maximum of 50 integrations. If a guild has more integrations, they cannot be accessed.","is_multi":false,"pos":{"len":116,"line_nr":2366,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_integrations(guild_id Snowflake) ![]Integration","name":"fetch_guild_integrations","parent_name":"REST","return_type":"![]Integration","pos":{"len":79,"line_nr":2367,"pos":67743,"col":0,"last_line":2372},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of [invite](#Invite) objects (with [invite metadata](#InviteMetadata)) for the guild. Requires the `.manage_guild` permission.","is_multi":false,"pos":{"len":143,"line_nr":2041,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_invites(guild_id Snowflake) ![]InviteMetadata","name":"fetch_guild_invites","parent_name":"REST","return_type":"![]InviteMetadata","pos":{"len":77,"line_nr":2042,"pos":60169,"col":0,"last_line":2047},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a guild member object for the specified user.","is_multi":false,"pos":{"len":55,"line_nr":1456,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_member(guild_id Snowflake, user_id Snowflake) !GuildMember","name":"fetch_guild_member","parent_name":"REST","return_type":"!GuildMember","pos":{"len":90,"line_nr":1457,"pos":39749,"col":0,"last_line":1459},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of guild member objects that are members of the guild.","is_multi":false,"pos":{"len":71,"line_nr":1481,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > ! This endpoint is restricted according to whether the `.guild_members` [Privileged Intent](#Intents) is enabled for your application.","is_multi":false,"pos":{"len":138,"line_nr":1482,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_members(guild_id Snowflake, params ListGuildMembersParams) ![]GuildMember","name":"fetch_guild_members","parent_name":"REST","return_type":"![]GuildMember","pos":{"len":105,"line_nr":1483,"pos":40687,"col":0,"last_line":1489},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the Onboarding object for the guild.","is_multi":false,"pos":{"len":46,"line_nr":2738,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_onboarding(guild_id Snowflake) !GuildOnboarding","name":"fetch_guild_onboarding","parent_name":"REST","return_type":"!GuildOnboarding","pos":{"len":79,"line_nr":2739,"pos":78898,"col":0,"last_line":2741},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_preview(guild_id Snowflake) !GuildPreview","name":"fetch_guild_preview","parent_name":"REST","return_type":"!GuildPreview","pos":{"len":73,"line_nr":1213,"pos":31265,"col":0,"last_line":1215},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns an object with one pruned key indicating the number of members that would be removed in a prune operation. Requires the `.kick_members` permission.","is_multi":false,"pos":{"len":157,"line_nr":1987,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the include_roles parameter. Any inactive user that has a subset of the provided role(s) will be counted in the prune and users with additional roles will not.","is_multi":false,"pos":{"len":282,"line_nr":1988,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_prune_count(guild_id Snowflake, params FetchGuildPruneCountParams) !int","name":"fetch_guild_prune_count","parent_name":"REST","return_type":"!int","pos":{"len":103,"line_nr":1989,"pos":57995,"col":0,"last_line":1991},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of role objects for the guild.","is_multi":false,"pos":{"len":47,"line_nr":1766,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_roles(guild_id Snowflake) ![]Role","name":"fetch_guild_roles","parent_name":"REST","return_type":"![]Role","pos":{"len":65,"line_nr":1767,"pos":50904,"col":0,"last_line":1772},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Get a guild scheduled event. Returns a guild scheduled event object on success.","is_multi":false,"pos":{"len":81,"line_nr":243,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (rest &REST) fetch_guild_scheduled_event(guild_id Snowflake, guild_scheduled_event_id Snowflake, params FetchScheduledEventsParams) !GuildScheduledEvent","name":"fetch_guild_scheduled_event","parent_name":"REST","return_type":"!GuildScheduledEvent","pos":{"len":159,"line_nr":244,"pos":7280,"col":0,"last_line":248},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Get a list of guild scheduled event users subscribed to a guild scheduled event. Returns a list of [guild scheduled event user](#GuildScheduledEventUser) objects on success. Guild member data, if it exists, is included if the `with_member` parameter is set.","is_multi":false,"pos":{"len":259,"line_nr":402,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (rest &REST) fetch_guild_scheduled_event_users(guild_id Snowflake, guild_scheduled_event_id Snowflake, params FetchGuildScheduledEventUsersParams) ![]GuildScheduledEventUser","name":"fetch_guild_scheduled_event_users","parent_name":"REST","return_type":"![]GuildScheduledEventUser","pos":{"len":180,"line_nr":403,"pos":12851,"col":0,"last_line":409},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a [sticker](#Sticker) object for the given guild and sticker IDs. Includes the `user` field if the bot has the `.create_guild_expressions` or `.manage_guild_expressions` permission.","is_multi":false,"pos":{"len":191,"line_nr":176,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn (rest &REST) fetch_guild_sticker(guild_id Snowflake, sticker_id Snowflake) !Sticker","name":"fetch_guild_sticker","parent_name":"REST","return_type":"!Sticker","pos":{"len":90,"line_nr":177,"pos":4431,"col":0,"last_line":179},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a [guild template](#GuildTemplate) object for the given code.","is_multi":false,"pos":{"len":71,"line_nr":65,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (rest &REST) fetch_guild_template(template_code string) !GuildTemplate","name":"fetch_guild_template","parent_name":"REST","return_type":"!GuildTemplate","pos":{"len":77,"line_nr":66,"pos":1805,"col":0,"last_line":68},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns an array of [guild template](#GuildTemplate) objects. Requires the `.manage_guild` permission.","is_multi":false,"pos":{"len":104,"line_nr":97,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (rest &REST) fetch_guild_templates(guild_id Snowflake) ![]GuildTemplate","name":"fetch_guild_templates","parent_name":"REST","return_type":"![]GuildTemplate","pos":{"len":78,"line_nr":98,"pos":3003,"col":0,"last_line":103},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a partial invite object for guilds with that feature enabled. Requires the `.manage_guild` permission. `code` will be none if a vanity url for the guild is not set.","is_multi":false,"pos":{"len":174,"line_nr":2517,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_vanity_url(guild_id Snowflake) !GuildVanityUrl","name":"fetch_guild_vanity_url","parent_name":"REST","return_type":"!GuildVanityUrl","pos":{"len":78,"line_nr":2518,"pos":72633,"col":0,"last_line":2520},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of [voice region](#VoiceRegion) objects for the guild. Unlike the similar /voice route, this returns VIP servers when the guild is VIP-enabled.","is_multi":false,"pos":{"len":160,"line_nr":2033,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_voice_regions(guild_id Snowflake) ![]VoiceRegion","name":"fetch_guild_voice_regions","parent_name":"REST","return_type":"![]VoiceRegion","pos":{"len":80,"line_nr":2034,"pos":59733,"col":0,"last_line":2039},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of guild [webhook](#Webhook) objects. Requires the `.manage_webhooks` permission.","is_multi":false,"pos":{"len":98,"line_nr":158,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) fetch_guild_webhooks(guild_id Snowflake) ![]Webhook","name":"fetch_guild_webhooks","parent_name":"REST","return_type":"![]Webhook","pos":{"len":71,"line_nr":159,"pos":4587,"col":0,"last_line":164},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the Welcome Screen object for the guild. If the welcome screen is not enabled, the `.manage_guild` permission is required.","is_multi":false,"pos":{"len":132,"line_nr":2522,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_welcome_screen(guild_id Snowflake) !WelcomeScreen","name":"fetch_guild_welcome_screen","parent_name":"REST","return_type":"!WelcomeScreen","pos":{"len":81,"line_nr":2523,"pos":72986,"col":0,"last_line":2525},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the widget for the guild. Fires an Invite Create Gateway event when an invite channel is defined and a new Invite is generated.","is_multi":false,"pos":{"len":137,"line_nr":2487,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_widget(guild_id Snowflake) !GuildWidget","name":"fetch_guild_widget","parent_name":"REST","return_type":"!GuildWidget","pos":{"len":71,"line_nr":2488,"pos":71827,"col":0,"last_line":2490},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a guild widget settings object. Requires the `.manage_guild` permission.","is_multi":false,"pos":{"len":82,"line_nr":2406,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_guild_widget_settings(guild_id Snowflake) !GuildWidgetSettings","name":"fetch_guild_widget_settings","parent_name":"REST","return_type":"!GuildWidgetSettings","pos":{"len":88,"line_nr":2407,"pos":69202,"col":0,"last_line":2409},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns an invite object for the given code.","is_multi":false,"pos":{"len":46,"line_nr":168,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\invite.v","content":"fn (rest &REST) fetch_invite(code string, params FetchInviteParams) !Invite","name":"fetch_invite","parent_name":"REST","return_type":"!Invite","pos":{"len":79,"line_nr":169,"pos":4527,"col":0,"last_line":173},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of invite objects (with invite metadata) for the channel. Only usable for guild channels. Requires the `.manage_channels` permission.","is_multi":false,"pos":{"len":150,"line_nr":1112,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) fetch_invites(channel_id Snowflake) ![]InviteMetadata","name":"fetch_invites","parent_name":"REST","return_type":"![]InviteMetadata","pos":{"len":73,"line_nr":1113,"pos":32504,"col":0,"last_line":1118},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) fetch_message(channel_id Snowflake, message_id Snowflake) !Message","name":"fetch_message","parent_name":"REST","return_type":"!Message","pos":{"len":86,"line_nr":1241,"pos":28224,"col":0,"last_line":1243},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) fetch_messages(channel_id Snowflake, params GetChannelMessagesParams) ![]Message","name":"fetch_messages","parent_name":"REST","return_type":"![]Message","pos":{"len":100,"line_nr":1233,"pos":27871,"col":0,"last_line":1239},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the application object associated with the requesting bot user.","is_multi":false,"pos":{"len":73,"line_nr":422,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"fn (rest &REST) fetch_my_application() !Application","name":"fetch_my_application","parent_name":"REST","return_type":"!Application","pos":{"len":55,"line_nr":423,"pos":10960,"col":0,"last_line":425},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the [application role connection](#ApplicationRoleConnection) for the user. Requires an OAuth2 access token with `role_connections.write` scope for the application specified in the path.","is_multi":false,"pos":{"len":196,"line_nr":563,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) fetch_my_application_role_connection(application_id Snowflake) !ApplicationRoleConnection","name":"fetch_my_application_role_connection","parent_name":"REST","return_type":"!ApplicationRoleConnection","pos":{"len":109,"line_nr":564,"pos":14717,"col":0,"last_line":566},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of [connection](#Connection) objects. Requires the `connections` OAuth2 scope.","is_multi":false,"pos":{"len":95,"line_nr":517,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) fetch_my_connections() ![]Connection","name":"fetch_my_connections","parent_name":"REST","return_type":"![]Connection","pos":{"len":56,"line_nr":518,"pos":13034,"col":0,"last_line":523},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a [guild member](#GuildMember) object for the current user. Requires the `guilds.members.read` OAuth2 scope.","is_multi":false,"pos":{"len":118,"line_nr":259,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) fetch_my_guild_member(guild_id Snowflake) !GuildMember","name":"fetch_my_guild_member","parent_name":"REST","return_type":"!GuildMember","pos":{"len":74,"line_nr":260,"pos":6044,"col":0,"last_line":262},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) fetch_my_guilds(params FetchMyGuildsParams) ![]PartialGuild","name":"fetch_my_guilds","parent_name":"REST","return_type":"![]PartialGuild","pos":{"len":79,"line_nr":454,"pos":10882,"col":0,"last_line":460},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the user object of the requester's account. For OAuth2, this requires the `identify` scope, which will return the object without an email, and optionally the `email` scope, which returns the object _with_ an email.","is_multi":false,"pos":{"len":224,"line_nr":220,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) fetch_my_user() !User","name":"fetch_my_user","parent_name":"REST","return_type":"!User","pos":{"len":41,"line_nr":221,"pos":4754,"col":0,"last_line":223},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the initial Interaction response. Functions the same as [`Clientc.fetch_webhook_message`](#Client.fetch_webhook_message).","is_multi":false,"pos":{"len":131,"line_nr":626,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (rest &REST) fetch_original_interaction_response(application_id Snowflake, interaction_token string) !Message","name":"fetch_original_interaction_response","parent_name":"REST","return_type":"!Message","pos":{"len":116,"line_nr":627,"pos":16048,"col":0,"last_line":629},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns all pinned messages in the channel as an array of message objects.","is_multi":false,"pos":{"len":76,"line_nr":1529,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) fetch_pinned_messagse(channel_id Snowflake) ![]Message","name":"fetch_pinned_messagse","parent_name":"REST","return_type":"![]Message","pos":{"len":74,"line_nr":1530,"pos":40576,"col":0,"last_line":1535},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Get a list of users that reacted with this emoji. Returns an array of [user](#User) objects on success.","is_multi":false,"pos":{"len":105,"line_nr":1427,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) fetch_reactions(channel_id Snowflake, message_id Snowflake, params FetchReactionsParams) ![]User","name":"fetch_reactions","parent_name":"REST","return_type":"![]User","pos":{"len":116,"line_nr":1428,"pos":34922,"col":0,"last_line":1434},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Gets the stage instance associated with the Stage channel, if it exists.","is_multi":false,"pos":{"len":74,"line_nr":91,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"fn (rest &REST) fetch_stage_instance(channel_id Snowflake) !StageInstance","name":"fetch_stage_instance","parent_name":"REST","return_type":"!StageInstance","pos":{"len":77,"line_nr":92,"pos":2794,"col":0,"last_line":94},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a [sticker](#Sticker) object for the given sticker ID.","is_multi":false,"pos":{"len":64,"line_nr":155,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn (rest &REST) fetch_sticker(sticker_id Snowflake) !Sticker","name":"fetch_sticker","parent_name":"REST","return_type":"!Sticker","pos":{"len":64,"line_nr":156,"pos":3271,"col":0,"last_line":158},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a thread member object for the specified user if they are a member of the thread, returns a 404 response otherwise.","is_multi":false,"pos":{"len":125,"line_nr":1365,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 When with_member is set to `true`, the thread member object will include a `member` field containing a guild member object.","is_multi":false,"pos":{"len":125,"line_nr":1366,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) fetch_thread_member(channel_id Snowflake, user_id Snowflake, params FetchThreadMemberParams) !ThreadMember","name":"fetch_thread_member","parent_name":"REST","return_type":"!ThreadMember","pos":{"len":126,"line_nr":1367,"pos":43488,"col":0,"last_line":1371},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a [user](#User) object for a given user ID.","is_multi":false,"pos":{"len":53,"line_nr":225,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) fetch_user(user_id Snowflake) !User","name":"fetch_user","parent_name":"REST","return_type":"!User","pos":{"len":55,"line_nr":226,"pos":4935,"col":0,"last_line":228},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns the new [webhook](#Webhook) object for the given id.","is_multi":false,"pos":{"len":62,"line_nr":166,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) fetch_webhook(webhook_id Snowflake) !Webhook","name":"fetch_webhook","parent_name":"REST","return_type":"!Webhook","pos":{"len":64,"line_nr":167,"pos":4925,"col":0,"last_line":169},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a previously-sent webhook message from the same token. Returns a [message](#Message) object on success.","is_multi":false,"pos":{"len":113,"line_nr":409,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) fetch_webhook_message(webhook_id Snowflake, webhook_token string, message_id ?Snowflake, params FetchWebhookMessageParams) !Message","name":"fetch_webhook_message","parent_name":"REST","return_type":"!Message","pos":{"len":151,"line_nr":410,"pos":14520,"col":0,"last_line":416},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Same as above, except this call does not require authentication and returns no user in the webhook object.","is_multi":false,"pos":{"len":108,"line_nr":171,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (rest &REST) fetch_webhook_with_token(webhook_id Snowflake, webhook_token string) !Webhook","name":"fetch_webhook_with_token","parent_name":"REST","return_type":"!Webhook","pos":{"len":97,"line_nr":172,"pos":5226,"col":0,"last_line":176},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Follow an Announcement Channel to send messages to a target channel. Requires the `.manage_webhooks` permission in the target channel. Fires a Webhooks Update Gateway event for the target channel.","is_multi":false,"pos":{"len":198,"line_nr":1201,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) follow_announcement_channel(channel_id Snowflake, webhook_channel_id Snowflake) !FollowedChannel","name":"follow_announcement_channel","parent_name":"REST","return_type":"!FollowedChannel","pos":{"len":116,"line_nr":1202,"pos":36015,"col":0,"last_line":1208},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Adds a recipient to a Group DM using their access token.","is_multi":false,"pos":{"len":58,"line_nr":1235,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) group_dm_add_recipient(channel_id Snowflake, user_id Snowflake, params GroupDMAddRecipientParams) !","name":"group_dm_add_recipient","parent_name":"REST","return_type":"!","pos":{"len":119,"line_nr":1236,"pos":37330,"col":0,"last_line":1240},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Removes a recipient from a Group DM.","is_multi":false,"pos":{"len":38,"line_nr":1242,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) group_dm_remove_recipient(channel_id Snowflake, user_id Snowflake) !","name":"group_dm_remove_recipient","parent_name":"REST","return_type":"!","pos":{"len":88,"line_nr":1243,"pos":37643,"col":0,"last_line":1245},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Adds the current user to a thread. Also requires the thread is not archived. Fires a Thread Members Update and a Thread Create Gateway event.","is_multi":false,"pos":{"len":143,"line_nr":1330,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) join_thread(channel_id Snowflake) !","name":"join_thread","parent_name":"REST","return_type":"!","pos":{"len":55,"line_nr":1331,"pos":41426,"col":0,"last_line":1333},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Leave a guild. Fires a Guild Delete Gateway event and a Guild Member Remove Gateway event.","is_multi":false,"pos":{"len":92,"line_nr":264,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) leave_guild(guild_id Snowflake) !","name":"leave_guild","parent_name":"REST","return_type":"!","pos":{"len":53,"line_nr":265,"pos":6337,"col":0,"last_line":267},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Removes the current user from a thread. Also requires the thread is not archived. Returns nothing on success. Fires a Thread Members Update Gateway event.","is_multi":false,"pos":{"len":156,"line_nr":1340,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) leave_thread(channel_id Snowflake) !","name":"leave_thread","parent_name":"REST","return_type":"!","pos":{"len":56,"line_nr":1341,"pos":42217,"col":0,"last_line":1343},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns all active threads in the guild, including public and private threads. Threads are ordered by their [`id`](#Snowflake), in descending order.","is_multi":false,"pos":{"len":150,"line_nr":1679,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) list_active_guild_threads(guild_id Snowflake) !ListThreadsResponse","name":"list_active_guild_threads","parent_name":"REST","return_type":"!ListThreadsResponse","pos":{"len":86,"line_nr":1680,"pos":55357,"col":0,"last_line":1682},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Get a list of all rules currently configured for the guild. Returns a list of auto moderation rule objects for the given guild.","is_multi":false,"pos":{"len":129,"line_nr":266,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (rest &REST) list_auto_moderation_rules_for_guild(guild_id Snowflake) ![]AutoModerationRule","name":"list_auto_moderation_rules_for_guild","parent_name":"REST","return_type":"![]AutoModerationRule","pos":{"len":98,"line_nr":267,"pos":7463,"col":0,"last_line":272},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns all entitlements for a given app, active and expired.","is_multi":false,"pos":{"len":63,"line_nr":125,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"fn (rest &REST) list_entitlements(application_id Snowflake, params ListEntitlementParams) ![]Entitlement","name":"list_entitlements","parent_name":"REST","return_type":"![]Entitlement","pos":{"len":108,"line_nr":126,"pos":3151,"col":0,"last_line":132},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of [emoji](#Emoji) objects for the given guild. Includes user fields if the bot has the `.create_guild_expressions` or `.manage_guild_expressions` permission.","is_multi":false,"pos":{"len":175,"line_nr":198,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn (rest &REST) list_guild_emojis(guild_id Snowflake) ![]Emoji","name":"list_guild_emojis","parent_name":"REST","return_type":"![]Emoji","pos":{"len":66,"line_nr":199,"pos":4080,"col":0,"last_line":204},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns an array of [sticker](#Sticker) objects for the given guild. Includes `user` fields if the bot has the `.create_guild_expressions` or `.manage_guild_expressions` permission.","is_multi":false,"pos":{"len":183,"line_nr":168,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn (rest &REST) list_guild_stickers(guild_id Snowflake) ![]Sticker","name":"list_guild_stickers","parent_name":"REST","return_type":"![]Sticker","pos":{"len":70,"line_nr":169,"pos":3964,"col":0,"last_line":174},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns archived threads in the channel that are of type `.private_threads`, and the user has joined. Threads are ordered by their `id`, in descending order. Requires the `.read_message_history` permission.","is_multi":false,"pos":{"len":208,"line_nr":1491,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) list_joined_private_archived_threads(channel_id Snowflake, params ListArchivedThreadsParams) !ListThreadsResponse","name":"list_joined_private_archived_threads","parent_name":"REST","return_type":"!ListThreadsResponse","pos":{"len":133,"line_nr":1492,"pos":48401,"col":0,"last_line":1496},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns archived threads in the channel that are of type `.private_thread`. Threads are ordered by `archive_timestamp`, in descending order. Requires both the `.read_message_history` and `.manage_threads` permissions.","is_multi":false,"pos":{"len":219,"line_nr":1464,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) list_private_archived_threads(channel_id Snowflake, params ListArchivedThreadsParams) !ListThreadsResponse","name":"list_private_archived_threads","parent_name":"REST","return_type":"!ListThreadsResponse","pos":{"len":126,"line_nr":1465,"pos":47360,"col":0,"last_line":1469},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns archived threads in the channel that are public. When called on a `.guild_text` channel, returns threads of type `.public_thread`. When called on a `.guild_announcement` channel returns threads of type `.announcement_thread`. Threads are ordered by `archive_timestamp`, in descending order. Requires the `.read_message_history` permission.","is_multi":false,"pos":{"len":349,"line_nr":1457,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) list_public_archived_threads(channel_id Snowflake, params ListArchivedThreadsParams) !ListThreadsResponse","name":"list_public_archived_threads","parent_name":"REST","return_type":"!ListThreadsResponse","pos":{"len":125,"line_nr":1458,"pos":46804,"col":0,"last_line":1462},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of [guild scheduled event](#GuildScheduledEvent) objects for the given guild.","is_multi":false,"pos":{"len":94,"line_nr":176,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (rest &REST) list_scheduled_events_for_guild(guild_id Snowflake, params FetchScheduledEventsParams) ![]GuildScheduledEvent","name":"list_scheduled_events_for_guild","parent_name":"REST","return_type":"![]GuildScheduledEvent","pos":{"len":129,"line_nr":177,"pos":4616,"col":0,"last_line":183},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sku.v","content":"fn (rest &REST) list_skus(application_id Snowflake) ![]Sku","name":"list_skus","parent_name":"REST","return_type":"![]Sku","pos":{"len":62,"line_nr":62,"pos":1398,"col":0,"last_line":67},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a list of available sticker packs.","is_multi":false,"pos":{"len":44,"line_nr":160,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn (rest &REST) list_sticker_packs() ![]StickerPack","name":"list_sticker_packs","parent_name":"REST","return_type":"![]StickerPack","pos":{"len":55,"line_nr":161,"pos":3508,"col":0,"last_line":166},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns array of thread members objects that are members of the thread.","is_multi":false,"pos":{"len":73,"line_nr":1398,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 When with_member is set to `true`, the results will be paginated and each thread member object will include a `member` field containing a guild member object.","is_multi":false,"pos":{"len":160,"line_nr":1399,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) list_thread_members(channel_id Snowflake, params FetchThreadMemberParams) ![]ThreadMember","name":"list_thread_members","parent_name":"REST","return_type":"![]ThreadMember","pos":{"len":109,"line_nr":1400,"pos":44751,"col":0,"last_line":1406},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns an array of voice region objects that can be used when setting a voice or stage channel's `rtc_region`.","is_multi":false,"pos":{"len":113,"line_nr":114,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\voice.v","content":"fn (rest &REST) list_voice_regions() ![]VoiceRegion","name":"list_voice_regions","parent_name":"REST","return_type":"![]VoiceRegion","pos":{"len":55,"line_nr":115,"pos":2985,"col":0,"last_line":120},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Pin a message in a channel. Requires the `.manage_messages` permission. Fires a Channel Pins Update Gateway event.","is_multi":false,"pos":{"len":116,"line_nr":1537,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) pin_message(channel_id Snowflake, message_id Snowflake, params ReasonParam) !","name":"pin_message","parent_name":"REST","return_type":"!","pos":{"len":97,"line_nr":1538,"pos":40972,"col":0,"last_line":1542},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Remove the ban for a user. Requires the `.ban_members` permissions. Returns a 204 empty response on success. Fires a Guild Ban Remove Gateway event.","is_multi":false,"pos":{"len":150,"line_nr":1759,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) remove_guild_ban(guild_id Snowflake, user_id Snowflake, params ReasonParam) !","name":"remove_guild_ban","parent_name":"REST","return_type":"!","pos":{"len":97,"line_nr":1760,"pos":50610,"col":0,"last_line":1764},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Remove a member from a guild. Requires `.kick_members` permission. Returns a 204 empty response on success. Fires a Guild Member Remove Gateway event.","is_multi":false,"pos":{"len":152,"line_nr":1662,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) remove_guild_member(guild_id Snowflake, user_id Snowflake, params ReasonParam) !","name":"remove_guild_member","parent_name":"REST","return_type":"!","pos":{"len":100,"line_nr":1663,"pos":47457,"col":0,"last_line":1667},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Removes a role from a guild member. Requires the `.manage_roles` permission. Returns a 204 empty response on success. Fires a Guild Member Update Gateway event.","is_multi":false,"pos":{"len":162,"line_nr":1655,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (rest &REST) remove_guild_member_role(guild_id Snowflake, user_id Snowflake, role_id Snowflake, params ReasonParam) !","name":"remove_guild_member_role","parent_name":"REST","return_type":"!","pos":{"len":124,"line_nr":1656,"pos":46985,"col":0,"last_line":1660},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Removes another member from a thread. Requires the `.manage_threads` permission, or the creator of the thread if it is a `.private_thread`. Also requires the thread is not archived. Returns nothing on success. Fires a Thread Members Update Gateway event.","is_multi":false,"pos":{"len":256,"line_nr":1345,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) remove_thread_member(channel_id Snowflake, user_id Snowflake) !","name":"remove_thread_member","parent_name":"REST","return_type":"!","pos":{"len":83,"line_nr":1346,"pos":42633,"col":0,"last_line":1348},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\http.v","content":"fn (rest &REST) request(method http.Method, route string, options RequestOptions) !http.Response","name":"request","parent_name":"REST","return_type":"!net.http.Response","pos":{"len":100,"line_nr":147,"pos":3021,"col":0,"last_line":149},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Creates a new thread from an existing message. Fires a Thread Create and a Message Update Gateway event.","is_multi":false,"pos":{"len":106,"line_nr":1276,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 When called on a `.guild_text` channel, creates a `.public_thread`. When called on a `.guild_announcement` channel, creates a `.announcement_thread`. Does not work on a `.guild_forum` or a `.guild_media` channel. The id of the created thread will be the same as the id of the source message, and as such a message can only have a single thread created from it.","is_multi":false,"pos":{"len":362,"line_nr":1277,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) start_thread_from_message(channel_id Snowflake, message_id Snowflake, params StartThreadFromMessageParams) !Channel","name":"start_thread_from_message","parent_name":"REST","return_type":"!Channel","pos":{"len":135,"line_nr":1278,"pos":39276,"col":0,"last_line":1283},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Creates a new thread in a forum or a media channel, and sends a message within the created thread. Fires a Thread Create and Message Create Gateway event.","is_multi":false,"pos":{"len":156,"line_nr":1631,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - The type of the created thread is `.public_thread`.","is_multi":false,"pos":{"len":55,"line_nr":1632,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - See message formatting for more information on how to properly format messages.","is_multi":false,"pos":{"len":83,"line_nr":1633,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - The current user must have the `.send_messages` permission (`.create_public_threads` is ignored).","is_multi":false,"pos":{"len":101,"line_nr":1634,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - The maximum request size when sending a message is 25 MiB.","is_multi":false,"pos":{"len":62,"line_nr":1635,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - Note that when sending a message, you must provide a value for at least one of `content`, `embeds`, `sticker_ids`, `components, or `files[n]`.","is_multi":false,"pos":{"len":146,"line_nr":1636,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > ! Discord may strip certain characters from message content, like invalid unicode characters or characters which cause unexpected message formatting. If you are passing user-generated strings into message content, consider sanitizing the data to prevent unexpected behavior and using `allowed_mentions` to prevent unexpected mentions.","is_multi":false,"pos":{"len":338,"line_nr":1637,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) start_thread_in_forum_channel(channel_id Snowflake, params StartThreadInForumChannelParams) !Channel","name":"start_thread_in_forum_channel","parent_name":"REST","return_type":"!Channel","pos":{"len":120,"line_nr":1638,"pos":45094,"col":0,"last_line":1654},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Creates a new thread that is not connected to an existing message. Fires a Thread Create Gateway event.","is_multi":false,"pos":{"len":105,"line_nr":1322,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) start_thread_without_message(channel_id Snowflake, params StartThreadWithoutMessageParams) !Channel","name":"start_thread_without_message","parent_name":"REST","return_type":"!Channel","pos":{"len":119,"line_nr":1323,"pos":40976,"col":0,"last_line":1328},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Syncs the template to the guild's current state. Requires the `.manage_guild` permission. Returns the [guild template](#GuildTemplate) object on success.","is_multi":false,"pos":{"len":155,"line_nr":135,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (rest &REST) sync_guild_template(guild_id Snowflake, template_code string) !GuildTemplate","name":"sync_guild_template","parent_name":"REST","return_type":"!GuildTemplate","pos":{"len":96,"line_nr":136,"pos":4381,"col":0,"last_line":138},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Post a typing indicator for the specified channel, which expires after 10 seconds. Fires a Typing Start Gateway event.","is_multi":false,"pos":{"len":120,"line_nr":1210,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Generally bots should not use this route. However, if a bot is responding to a command and expects the computation to take a few seconds, this endpoint may be called to let the user know that the bot is processing their message.","is_multi":false,"pos":{"len":230,"line_nr":1211,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (rest &REST) trigger_typing(channel_id Snowflake) !","name":"trigger_typing","parent_name":"REST","return_type":"!","pos":{"len":58,"line_nr":1212,"pos":36700,"col":0,"last_line":1214},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Unpin a message in a channel. Requires the `.manage_messages` permission. Fires a Channel Pins Update Gateway event.","is_multi":false,"pos":{"len":118,"line_nr":1544,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (rest &REST) unpin_message(channel_id Snowflake, message_id Snowflake, params ReasonParam) !","name":"unpin_message","parent_name":"REST","return_type":"!","pos":{"len":99,"line_nr":1545,"pos":41341,"col":0,"last_line":1549},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Updates and returns a [application role connection metadata](#ApplicationRoleConnectionMetadata) objects for the given application.","is_multi":false,"pos":{"len":133,"line_nr":74,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_role_connection_metadata.v","content":"fn (rest &REST) update_application_role_connection_metadata_records(application_id Snowflake) ![]ApplicationRoleConnectionMetadata","name":"update_application_role_connection_metadata_records","parent_name":"REST","return_type":"![]ApplicationRoleConnectionMetadata","pos":{"len":134,"line_nr":75,"pos":3124,"col":0,"last_line":80},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Updates and returns the [application role connection](#ApplicationRoleConnection) for the user. Requires an OAuth2 access token with `role_connections.write` scope for the application specified in the path.","is_multi":false,"pos":{"len":208,"line_nr":595,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (rest &REST) update_my_application_role_connection(application_id Snowflake, params UpdateMyApplicationRoleConnectionParams) !ApplicationRoleConnection","name":"update_my_application_role_connection","parent_name":"REST","return_type":"!ApplicationRoleConnection","pos":{"len":158,"line_nr":596,"pos":16200,"col":0,"last_line":600},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"struct REST {\npub:\n\ttoken      string\n\tbase_url   string = 'https://discord.com/api/v10'\n\tuser_agent string = discord.default_user_agent\n\thttp       ?HTTPClient\n}","name":"REST","parent_name":"","return_type":"","pos":{"len":15,"line_nr":22,"pos":403,"col":0,"last_line":28},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"fn (params EditApplicationParams) build() json2.Any","name":"build","parent_name":"EditApplicationParams","return_type":"x.json2.Any","pos":{"len":55,"line_nr":450,"pos":11942,"col":0,"last_line":496},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application.v","content":"struct EditApplicationParams {\npub mut:\n\t// Default custom authorization URL for the app, if enabled\n\tcustom_install_url ?string\n\t// Description of the app\n\tdescription ?string\n\t// Role connection verification URL for the app\n\trole_connections_verification_url ?string = discord.sentinel_string\n\t// Settings for the app's default in-app authorization link, if enabled\n\tinstall_params ?InstallParams\n\t// App's public flags\n\tflags ?ApplicationFlags\n\t// Icon for the app\n\ticon ?Image = discord.sentinel_image\n\t// Default rich presence invite cover image for the app\n\tcover_image ?Image = discord.sentinel_image\n\t// Interactions endpoint URL for the app\n\tinteractions_endpoint_url ?string = discord.sentinel_string\n\t// List of tags describing the content and functionality of the app (max of 20 characters per tag). Max of 5 tags.\n\ttags ?[]string\n}","name":"EditApplicationParams","parent_name":"","return_type":"","pos":{"len":32,"line_nr":428,"pos":11124,"col":0,"last_line":448},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"enum ApplicationCommandType {\n\t// Slash commands; a text-based command that shows up when a user types `/`\n\tchat_input = 1\n\t// A UI-based command that shows up when you right click or tap on a user\n\tuser\n\t// A UI-based command that shows up when you right click or tap on a message\n\tmessage\n}","name":"ApplicationCommandType","parent_name":"","return_type":"","pos":{"len":31,"line_nr":6,"pos":62,"col":0,"last_line":13},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 pub type LocaleMapping = map[Locale]string","is_multi":false,"pos":{"len":44,"line_nr":15,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"enum ApplicationCommandOptionType {\n\tsub_command       = 1\n\tsub_command_group\n\tstring\n\t// Any integer between -2^53 and 2^53\n\tinteger\n\tboolean\n\tuser\n\t// Includes all channel types + categories\n\tchannel\n\trole\n\t// Includes users and roles\n\tmentionable\n\t// Any double between -2^53 and 2^53\n\tnumber\n\tattachment\n}","name":"ApplicationCommandOptionType","parent_name":"","return_type":"","pos":{"len":37,"line_nr":17,"pos":407,"col":0,"last_line":33},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"type ApplicationCommandOptionChoiceValue = f64 | int | string","name":"ApplicationCommandOptionChoiceValue","parent_name":"","return_type":"","pos":{"len":44,"line_nr":35,"pos":722,"col":0,"last_line":35},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (acoc ApplicationCommandOptionChoice) build() json2.Any","name":"build","parent_name":"ApplicationCommandOptionChoice","return_type":"x.json2.Any","pos":{"len":62,"line_nr":80,"pos":2040,"col":0,"last_line":92},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"struct ApplicationCommandOptionChoice {\npub:\n\t// 1-100 character choice name\n\tname string @[required]\n\t// Localization dictionary for the `name` field. Values follow the same restrictions as `name`\n\tname_localizations ?map[Locale]string\n\t// Value for the choice, up to 100 characters if string\n\tvalue ApplicationCommandOptionChoiceValue @[required]\n}","name":"ApplicationCommandOptionChoice","parent_name":"","return_type":"","pos":{"len":41,"line_nr":37,"pos":789,"col":0,"last_line":45},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn ApplicationCommandOptionChoice.parse(j json2.Any) !ApplicationCommandOptionChoice","name":"ApplicationCommandOptionChoice.parse","parent_name":"","return_type":"!ApplicationCommandOptionChoice","pos":{"len":88,"line_nr":47,"pos":1145,"col":0,"last_line":78},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (n Number) build() json2.Any","name":"build","parent_name":"Number","return_type":"x.json2.Any","pos":{"len":35,"line_nr":110,"pos":2647,"col":0,"last_line":116},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"type Number = f64 | int","name":"Number","parent_name":"","return_type":"","pos":{"len":15,"line_nr":94,"pos":2362,"col":0,"last_line":94},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn Number.parse(j json2.Any) !Number","name":"Number.parse","parent_name":"","return_type":"!Number","pos":{"len":40,"line_nr":96,"pos":2391,"col":0,"last_line":108},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (aco ApplicationCommandOption) build() json2.Any","name":"build","parent_name":"ApplicationCommandOption","return_type":"x.json2.Any","pos":{"len":55,"line_nr":235,"pos":6277,"col":0,"last_line":275},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"struct ApplicationCommandOption {\npub:\n\t// Type of option\n\ttyp ApplicationCommandOptionType @[required]\n\t// 1-32 character name\n\tname string @[required]\n\t// Localization dictionary for the `name` field. Values follow the same restrictions as `name`\n\tname_localizations ?map[Locale]string\n\t// 1-100 character description\n\tdescription string @[required]\n\t// Localization dictionary for the `description` field. Values follow the same restrictions as `description`\n\tdescription_localizations ?map[Locale]string\n\t// If the parameter is required or optional--default `false`\n\trequired ?bool\n\t// Choices for `.string`, `.integer`, and `.number` types for the user to pick from, max 25\n\tchoices ?[]ApplicationCommandOptionChoice\n\t// If the option is a subcommand or subcommand group type, these nested options will be the parameters\n\toptions ?[]ApplicationCommandOption\n\t// If the option is a channel type, the channels shown will be restricted to these types\n\tchannel_types ?[]ChannelType\n\t// If the option is an `.integer` or `.number` type, the minimum value permitted\n\tmin_value ?Number\n\t// If the option is an `.integer` or `.number` type, the maximum value permitted\n\tmax_value ?Number\n\t// For option type `.string`, the minimum allowed length (minimum of `0`, maximum of `6000`)\n\tmin_length ?int\n\t// For option type `.string`, the maximum allowed length (minimum of `1`, maximum of `6000`)\n\tmax_length ?int\n\t// If autocomplete interactions are enabled for this `.string`, `.integer`, or `.number` type option\n\tautocomplete ?bool\n}","name":"ApplicationCommandOption","parent_name":"","return_type":"","pos":{"len":35,"line_nr":118,"pos":2731,"col":0,"last_line":148},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn ApplicationCommandOption.parse(j json2.Any) !ApplicationCommandOption","name":"ApplicationCommandOption.parse","parent_name":"","return_type":"!ApplicationCommandOption","pos":{"len":76,"line_nr":150,"pos":4267,"col":0,"last_line":233},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"struct ApplicationCommand {\npub:\n\t// Unique ID of command\n\tid Snowflake\n\t// Type of command, defaults to 1\n\ttyp ApplicationCommandType = .chat_input\n\t// ID of the parent application\n\tapplication_id Snowflake\n\t// Guild ID of the command, if not global\n\tguild_id ?Snowflake\n\t// Name of command, 1-32 characters\n\tname string\n\t// Localization dictionary for `name` field. Values follow the same restrictions as `name`\n\tname_localizations ?map[Locale]string\n\t// Description for `.chat_input` commands, 1-100 characters. Empty string for `.user` and `.message` commands\n\tdescription string\n\t// Localization dictionary for `description` field. Values follow the same restrictions as `description`\n\tdescription_localizations ?map[Locale]string\n\t// Parameters for the command, max of 25\n\toptions ?[]ApplicationCommandOption\n\t// Set of permissions represented as a bit set\n\tdefault_member_permissions ?Permissions\n\t// Indicates whether the command is available in DMs with the app, only for globally-scoped commands. By default, commands are visible.\n\tdm_permission ?bool\n\t// Indicates whether the command is age-restricted, defaults to `false`\n\tnsfw ?bool\n}","name":"ApplicationCommand","parent_name":"","return_type":"","pos":{"len":29,"line_nr":277,"pos":7407,"col":0,"last_line":303},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn ApplicationCommand.parse(j json2.Any) !ApplicationCommand","name":"ApplicationCommand.parse","parent_name":"","return_type":"!ApplicationCommand","pos":{"len":64,"line_nr":305,"pos":8561,"col":0,"last_line":366},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (params FetchGlobalApplicationCommandsParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchGlobalApplicationCommandsParams","return_type":"net.urllib.Values","pos":{"len":87,"line_nr":374,"pos":10213,"col":0,"last_line":380},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"struct FetchGlobalApplicationCommandsParams {\npub:\n\twith_localizations ?bool\n}","name":"FetchGlobalApplicationCommandsParams","parent_name":"","return_type":"","pos":{"len":47,"line_nr":369,"pos":10129,"col":0,"last_line":372},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (params CreateApplicationCommandParams) build() json2.Any","name":"build","parent_name":"CreateApplicationCommandParams","return_type":"x.json2.Any","pos":{"len":64,"line_nr":414,"pos":11978,"col":0,"last_line":443},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"struct CreateApplicationCommandParams {\npub:\n\t// Name of command, 1-32 characters\n\tname string\n\t// Localization dictionary for the `name` field. Values follow the same restrictions as `name`\n\tname_localizations ?map[Locale]string\n\t// 1-100 character description for `.chat_input` commands\n\tdescription ?string\n\t// Localization dictionary for the `description` field. Values follow the same restrictions as `description`\n\tdescription_localizations ?map[Locale]string\n\t// the parameters for the command\n\toptions ?[]ApplicationCommandOption\n\t// Set of permissions represented as a bit set\n\tdefault_member_permissions ?Permissions\n\t// Indicates whether the command is available in DMs with the app, only for globally-scoped commands. By default, commands are visible.\n\tdm_permission ?bool\n\t// Type of command, defaults `.chat_input` if not set\n\ttyp ?ApplicationCommandType\n\t// Indicates whether the command is age-restricted\n\tnsfw ?bool\n}","name":"CreateApplicationCommandParams","parent_name":"","return_type":"","pos":{"len":41,"line_nr":392,"pos":11038,"col":0,"last_line":412},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (params EditApplicationCommandParams) build() json2.Any","name":"build","parent_name":"EditApplicationCommandParams","return_type":"x.json2.Any","pos":{"len":62,"line_nr":478,"pos":14671,"col":0,"last_line":509},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"struct EditApplicationCommandParams {\npub:\n\t// Name of command, 1-32 characters\n\tname ?string\n\t// Localization dictionary for the `name` field. Values follow the same restrictions as `name`\n\tname_localizations ?map[Locale]string\n\t// 1-100 character description\n\tdescription ?string\n\t// Localization dictionary for the `description` field. Values follow the same restrictions as `description`\n\tdescription_localizations ?map[Locale]string\n\t// the parameters for the command\n\toptions ?[]ApplicationCommandOption\n\t// Set of permissions represented as a bit set\n\tdefault_member_permissions ?Permissions = discord.sentinel_permissions\n\t// Indicates whether the command is available in DMs with the app, only for globally-scoped commands. By default, commands are visible.\n\tdm_permission ?bool\n\t// Indicates whether the command is age-restricted\n\tnsfw ?bool\n}","name":"EditApplicationCommandParams","parent_name":"","return_type":"","pos":{"len":39,"line_nr":458,"pos":13820,"col":0,"last_line":476},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Application Command Permission Type","is_multi":false,"pos":{"len":37,"line_nr":565,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"enum ApplicationCommandPermissionType {\n\trole    = 1\n\tuser\n\tchannel\n}","name":"ApplicationCommandPermissionType","parent_name":"","return_type":"","pos":{"len":41,"line_nr":566,"pos":20079,"col":0,"last_line":570},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (acp ApplicationCommandPermission) build() json2.Any","name":"build","parent_name":"ApplicationCommandPermission","return_type":"x.json2.Any","pos":{"len":59,"line_nr":582,"pos":20450,"col":0,"last_line":588},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"struct ApplicationCommandPermission {\npub:\n\t// ID of the role, user, or channel. It can also be a permission constant\n\tid Snowflake\n\t// role (`.role`), user (`.user`), or channel (`.channel`)\n\ttyp ApplicationCommandPermissionType\n\t// `true` to allow, `false`, to disallow\n\tpermission bool\n}","name":"ApplicationCommandPermission","parent_name":"","return_type":"","pos":{"len":39,"line_nr":572,"pos":20154,"col":0,"last_line":580},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn ApplicationCommandPermission.parse(j json2.Any) !ApplicationCommandPermission","name":"ApplicationCommandPermission.parse","parent_name":"","return_type":"!ApplicationCommandPermission","pos":{"len":84,"line_nr":590,"pos":20619,"col":0,"last_line":603},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"struct GuildApplicationCommandPermissions {\npub:\n\t// ID of the command or the application ID\n\tid Snowflake\n\t// ID of the application the command belongs to\n\tapplication_id Snowflake\n\t// ID of the guild\n\tguild_id Snowflake\n\t// Permissions for the command in the guild, max of 100\n\tpermissions []ApplicationCommandPermission\n}","name":"GuildApplicationCommandPermissions","parent_name":"","return_type":"","pos":{"len":45,"line_nr":605,"pos":21044,"col":0,"last_line":615},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn GuildApplicationCommandPermissions.parse(j json2.Any) !GuildApplicationCommandPermissions","name":"GuildApplicationCommandPermissions.parse","parent_name":"","return_type":"!GuildApplicationCommandPermissions","pos":{"len":96,"line_nr":617,"pos":21374,"col":0,"last_line":633},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"fn (params EditApplicationCommandPermissionsParams) build() json2.Any","name":"build","parent_name":"EditApplicationCommandPermissionsParams","return_type":"x.json2.Any","pos":{"len":73,"line_nr":656,"pos":23326,"col":0,"last_line":660},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_command.v","content":"struct EditApplicationCommandPermissionsParams {\npub:\n\t// Permissions for the command in the guild\n\tpermissions []ApplicationCommandPermission\n}","name":"EditApplicationCommandPermissionsParams","parent_name":"","return_type":"","pos":{"len":50,"line_nr":650,"pos":23176,"col":0,"last_line":654},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_role_connection_metadata.v","content":"enum ApplicationRoleConnectionMetadataType {\n\t// the metadata value (`integer`) is less than or equal to the guild's configured value (`integer`)\n\tinteger_less_than_or_equal     = 1\n\t// the metadata value (`integer`) is greater than or equal to the guild's configured value (`integer`)\n\tinteger_greater_than_or_equal\n\t// the metadata value (`integer`) is equal to the guild's configured value (`integer`)\n\tinteger_equal\n\t// the metadata value (`integer`) is not equal to the guild's configured value (`integer`)\n\tinteger_not_equal\n\t// the metadata value (`ISO8601 string`) is less than or equal to the guild's configured value (`integer`; `days before current date`)\n\tdatetime_less_than_or_equal\n\t// the metadata value (`ISO8601 string`) is greater than or equal to the guild's configured value (`integer`; `days before current date`)\n\tdatetime_greater_than_or_equal\n\t// the metadata value (`integer`) is equal to the guild's configured value (`integer`; `1`)\n\tboolean_equal\n\t// the metadata value (`integer`) is not equal to the guild's configured value (`integer`; `1`)\n\tboolean_not_equal\n}","name":"ApplicationRoleConnectionMetadataType","parent_name":"","return_type":"","pos":{"len":46,"line_nr":5,"pos":50,"col":0,"last_line":22},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_role_connection_metadata.v","content":"struct ApplicationRoleConnectionMetadata {\npub:\n\t// type of metadata value\n\ttyp ApplicationRoleConnectionMetadataType\n\t// dictionary key for the metadata field (must be `a-z`, `0-9`, or `_` characters; 1-50 characters)\n\tkey string\n\t// name of the metadata field (1-100 characters)\n\tname string\n\t// translations of the name\n\tname_localizations ?map[Locale]string\n\t// description of the metadata field (1-200 characters)\n\tdescription string\n\t// translations of the description\n\tdescription_localizations ?map[Locale]string\n}","name":"ApplicationRoleConnectionMetadata","parent_name":"","return_type":"","pos":{"len":44,"line_nr":24,"pos":1148,"col":0,"last_line":38},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\application_role_connection_metadata.v","content":"fn ApplicationRoleConnectionMetadata.parse(j json2.Any) !ApplicationRoleConnectionMetadata","name":"ApplicationRoleConnectionMetadata.parse","parent_name":"","return_type":"!ApplicationRoleConnectionMetadata","pos":{"len":94,"line_nr":40,"pos":1676,"col":0,"last_line":64},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 The table below lists audit log events and values (the `action_type` field) that your app may receive.","is_multi":false,"pos":{"len":104,"line_nr":5,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The `Object Changed` column notes which object's values may be included in the entry. Though there are exceptions, possible keys in the `changes` array typically correspond to the object's fields. The descriptions and types for those fields can be found in the linked documentation for the object.","is_multi":false,"pos":{"len":299,"line_nr":6,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If no object is noted, there won't be a `changes` array in the entry, though other fields like the `target_id` still exist and many have fields in the options array.","is_multi":false,"pos":{"len":167,"line_nr":7,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"enum AuditLogEvent {\n\t// Server settings were updated\n\tguild_update                                = 1\n\t// Channel was created\n\tchannel_create                              = 10\n\t// Channel settings were updated\n\tchannel_update\n\t// Channel was deleted\n\tchannel_delete\n\t// Permission overwrite was added to a channel\n\tchannel_overwrite_create\n\t// Permission overwrite was updated for a channel\n\tchannel_overwrite_update\n\t// Permission overwrite was deleted from a channel\n\tchannel_overwrite_delete\n\t// Member was removed from server\n\tmember_kick                                 = 20\n\t// Members were pruned from server\n\tmember_prune\n\t// Member was banned from server\n\tmember_ban_add\n\t// Server ban was lifted for a member\n\tmember_ban_remove\n\t// Member was updated in server\n\tmember_update\n\t// Member was added or removed from a role\n\tmember_role_update\n\t// Member was moved to a different voice channel\n\tmember_move\n\t// Member was disconnected from a voice channel\n\tmember_disconnect\n\t// Bot user was added to server\n\tbot_add\n\t// Role was created\n\trole_create                                 = 30\n\t// Role was edited\n\trole_update\n\t// Role was deleted\n\trole_delete\n\t// Server invite was created\n\tinvite_create                               = 40\n\t// Server invite was updated\n\tinvite_update\n\t// Server invite was deleted\n\tinvite_delete\n\t// Webhook was created\n\twebhook_create\n\t// Webhook properties or channel were updated\n\twebhook_update\n\t// Webhook was deleted\n\twebhook_delete\n\t// Emoji was created\n\temoji_create\n\t// Emoji name was updated\n\temoji_update\n\t// Emoji was deleted\n\temoji_delete\n\t// Single message was deleted\n\tmessage_delete                              = 72\n\t// Multiple messages were deleted\n\tmessage_bulk_delete\n\t// Message was pinned to a channel\n\tmessage_pin\n\t// Message was unpinned from a channel\n\tmessage_unpin\n\t// App was added to server\n\tintegration_create                          = 80\n\t// App was updated (as an example, its scopes were updated)\n\tintegration_update\n\t// App was removed from server\n\tintegration_delete\n\t// Stage instance was created (stage channel becomes live)\n\tstage_instance_create\n\t// Stage instance details were updated\n\tstage_instance_update\n\t// Stage instance was deleted (stage channel no longer live)\n\tstage_instance_delete\n\t// Sticker was created\n\tsticker_create                              = 90\n\t// Sticker details were updated\n\tsticker_update\n\t// Sticker was deleted\n\tsticker_delete\n\t// Event was created\n\tguild_scheduled_event_create                = 100\n\t// Event was updated\n\tguild_scheduled_event_update\n\t// Event was cancelled\n\tguild_scheduled_event_delete\n\t// Thread was created in a channel\n\tthread_create                               = 110\n\t// Thread was updated\n\tthread_update\n\t// Thread was deleted\n\tthread_delete\n\t// Permissions were updated for a command\n\tapplication_command_permission_update       = 121\n\t// Auto Moderation rule was created\n\tauto_moderation_rule_create                 = 140\n\t// Auto Moderation rule was updated\n\tauto_moderation_rule_update\n\t// Auto Moderation rule was deleted\n\tauto_moderation_rule_delete\n\t// Message was blocked by Auto Moderation\n\tauto_moderation_block_message\n\t// Message was flagged by Auto Moderation\n\tauto_moderation_flag_to_channel\n\t// Member was timed out by Auto Moderation\n\tauto_moderation_user_communication_disabled\n\t// Creator monetization request was created\n\tcreator_monetization_request_created        = 150\n\t// Creator monetization terms were accepted\n\tcreator_monetization_terms_accepted\n}","name":"AuditLogEvent","parent_name":"","return_type":"","pos":{"len":22,"line_nr":9,"pos":627,"col":0,"last_line":122},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"struct AuditLogChange {\npub:\n\t// New value of the key\n\tnew_value ?json2.Any\n\t// Old value of the key\n\told_value ?json2.Any\n\t// Name of the changed entity, with a few exceptions\n\tkey string\n}","name":"AuditLogChange","parent_name":"","return_type":"","pos":{"len":25,"line_nr":124,"pos":4141,"col":0,"last_line":132},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"fn AuditLogChange.parse(j json2.Any) !AuditLogChange","name":"AuditLogChange.parse","parent_name":"","return_type":"!AuditLogChange","pos":{"len":56,"line_nr":134,"pos":4337,"col":0,"last_line":155},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"struct AuditEntryInfo {\npub:\n\t// ID of the app whose permissions were targeted\n\tapplication_id ?Snowflake\n\t// Name of the Auto Moderation rule that was triggered\n\tauto_moderation_rule_name ?string\n\t// Trigger type of the Auto Moderation rule that was triggered\n\tauto_moderation_rule_trigger_type ?string\n\t// Channel in which the entities were targeted\n\tchannel_id ?Snowflake\n\t// Number of entities that were targeted\n\tcount ?string\n\t// Number of days after which inactive members were kicked\n\tdelete_member_days ?string\n\t// ID of the overwritten entity\n\tid ?Snowflake\n\t// Number of members removed by the prune\n\tmembers_removed ?string\n\t// ID of the message that was targeted\n\tmessage_id ?Snowflake\n\t// Name of the role if type is \"0\" (not present if type is \"1\")\n\trole_name ?string\n\t// Type of overwritten entity - role (\"0\") or member (\"1\")\n\ttyp ?string\n\t// The type of integration which performed the action\n\tintegration_type ?string\n}","name":"AuditEntryInfo","parent_name":"","return_type":"","pos":{"len":25,"line_nr":157,"pos":4745,"col":0,"last_line":183},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"fn AuditEntryInfo.parse(j json2.Any) !AuditEntryInfo","name":"AuditEntryInfo.parse","parent_name":"","return_type":"!AuditEntryInfo","pos":{"len":56,"line_nr":185,"pos":5689,"col":0,"last_line":255},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Each audit log entry represents a single administrative action (or [event](#AuditLogEvent)), indicated by `action_type`. Most entries contain one to many changes in the `changes` array that affected an entity in Discord—whether that's a user, channel, guild, emoji, or something else.","is_multi":false,"pos":{"len":288,"line_nr":257,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The information (and structure) of an entry's changes will be different depending on its type. For example, in `.member_role_update` events there is only one change: a member is either added or removed from a specific role. However, in `.channel_create` events there are many changes, including (but not limited to) the channel's name, type, and permission overwrites added. More details are in the [change](#AuditLogChange) object section.","is_multi":false,"pos":{"len":442,"line_nr":258,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Apps can specify why an administrative action is being taken by passing an `X-Audit-Log-Reason` request header, which will be stored as the audit log entry's `reason` field. The `X-Audit-Log-Reason` header supports 1-512 URL-encoded UTF-8 characters. Reasons are visible to users in the client and to apps when fetching audit log entries with the API.","is_multi":false,"pos":{"len":353,"line_nr":259,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"struct AuditLogEntry {\npub:\n\t// ID of the affected entity (webhook, user, role, etc.)\n\ttarget_id ?string\n\t// Changes made to the `target_id`\n\tchanges ?[]AuditLogChange\n\t// User or app that made the changes\n\tuser_id ?Snowflake\n\t// ID of the entry\n\tid Snowflake\n\t// Type of action that occurred\n\taction_type AuditLogEvent\n\t// Additional info for certain event types\n\toptions ?AuditEntryInfo\n\t// Reason for the change (1-512 characters)\n\treason ?string\n}","name":"AuditLogEntry","parent_name":"","return_type":"","pos":{"len":24,"line_nr":260,"pos":8174,"col":0,"last_line":276},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"fn AuditLogEntry.parse(j json2.Any) !AuditLogEntry","name":"AuditLogEntry.parse","parent_name":"","return_type":"!AuditLogEntry","pos":{"len":54,"line_nr":278,"pos":8631,"col":0,"last_line":319},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 When an administrative action is performed in a guild, an entry is added to its audit log. Viewing audit logs requires the `.view_audit_log` permission and can be fetched by apps using the `GET /guilds/{guild.id}/audit-logs` endpoint, or seen by users in the guild's Server Settings. All audit log entries are stored for 45 days.","is_multi":false,"pos":{"len":331,"line_nr":321,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 When an app is performing an eligible action using the APIs, it can pass an `reason` param to indicate why the action was taken. More information is in the audit log entry section.","is_multi":false,"pos":{"len":182,"line_nr":322,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"struct AuditLog {\npub:\n\t// List of application commands referenced in the audit log\n\tapplication_commands []ApplicationCommand\n\t// List of audit log entries, sorted from most to least recent\n\taudit_log_entries []AuditLogEntry\n\t// List of auto moderation rules referenced in the audit log\n\tauto_moderation_rules []AutoModerationRule\n\t// List of guild scheduled events referenced in the audit log\n\tguild_scheduled_events []GuildScheduledEvent\n\t// List of partial integration objects\n\tintegrations []PartialIntegration\n\t// List of threads referenced in the audit log\n\tthreads []Channel\n\t// List of users referenced in the audit log\n\tusers []User\n\t// List of webhooks referenced in the audit log\n\twebhooks []Webhook\n}","name":"AuditLog","parent_name":"","return_type":"","pos":{"len":19,"line_nr":323,"pos":10088,"col":0,"last_line":341},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"fn AuditLog.parse(j json2.Any) !AuditLog","name":"AuditLog.parse","parent_name":"","return_type":"!AuditLog","pos":{"len":44,"line_nr":343,"pos":10807,"col":0,"last_line":380},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 The following parameters can be used to filter which and how many audit log entries are returned.","is_multi":false,"pos":{"len":99,"line_nr":382,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"fn (params FetchGuildAuditLogParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchGuildAuditLogParams","return_type":"net.urllib.Values","pos":{"len":75,"line_nr":398,"pos":12717,"col":0,"last_line":416},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\audit_log.v","content":"struct FetchGuildAuditLogParams {\npub mut:\n\t// Entries from a specific user ID\n\tuser_id ?Snowflake\n\t// Entries for a specific audit log event\n\taction_type ?AuditLogEvent\n\t// Entries with ID less than a specific audit log entry ID\n\tbefore ?Snowflake\n\t// Entries with ID greater than a specific audit log entry ID\n\tafter ?Snowflake\n\t// Maximum number of entries (between 1-100) to return, defaults to 50\n\tlimit ?int\n}","name":"FetchGuildAuditLogParams","parent_name":"","return_type":"","pos":{"len":35,"line_nr":384,"pos":12296,"col":0,"last_line":396},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Characterizes the type of content which can trigger the rule.","is_multi":false,"pos":{"len":63,"line_nr":6,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"enum TriggerType {\n\t// check if content contains words from a user defined list of keywords\n\tkeyword        = 1\n\t// check if content represents generic spam\n\tspam           = 3\n\t// check if content contains words from internal pre-defined wordsets\n\tkeyword_preset\n\t// check if content contains more unique mentions than allowed\n\tmention_spam\n}","name":"TriggerType","parent_name":"","return_type":"","pos":{"len":20,"line_nr":7,"pos":127,"col":0,"last_line":16},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"enum KeywordPresetType {\n\t// words that may be considered forms of swearing or cursing\n\tprofanity      = 1\n\t// words that refer to sexually explicit behavior or activity\n\tsexual_content\n\t// personal insults or words that may be considered hate speech\n\tslurs\n}","name":"KeywordPresetType","parent_name":"","return_type":"","pos":{"len":26,"line_nr":18,"pos":476,"col":0,"last_line":25},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Indicates in what event context a rule should be checked.","is_multi":false,"pos":{"len":59,"line_nr":27,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"enum EventType {\n\t// when a member sends or edits a message in the guild\n\tmessage_send = 1\n}","name":"EventType","parent_name":"","return_type":"","pos":{"len":18,"line_nr":28,"pos":802,"col":0,"last_line":31},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Additional data used to determine whether a rule should be triggered. Different fields are relevant based on the value of `trigger_type`.","is_multi":false,"pos":{"len":139,"line_nr":33,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (tm TriggerMetadata) build() json2.Any","name":"build","parent_name":"TriggerMetadata","return_type":"x.json2.Any","pos":{"len":45,"line_nr":50,"pos":1692,"col":0,"last_line":71},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"struct TriggerMetadata {\npub:\n\t// substrings which will be searched for in content (Maximum of 1000)\n\tkeyword_filter ?[]string\n\t// regular expression patterns which will be matched against content (Maximum of 10)\n\tregex_patterns ?[]string\n\t// the internally pre-defined wordsets which will be searched for in content\n\tpresets ?[]KeywordPresetType\n\t// substrings which should not trigger the rule (Maximum of 100 or 1000)\n\tallow_list ?[]string\n\t// total number of unique role and user mentions allowed per message (Maximum of 50)\n\tmention_total_limit ?int\n\t// whether to automatically detect mention raids\n\tmention_raid_protection_enabled ?bool\n}","name":"TriggerMetadata","parent_name":"","return_type":"","pos":{"len":26,"line_nr":34,"pos":1041,"col":0,"last_line":48},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn TriggerMetadata.parse(j json2.Any) !TriggerMetadata","name":"TriggerMetadata.parse","parent_name":"","return_type":"!TriggerMetadata","pos":{"len":58,"line_nr":73,"pos":2427,"col":0,"last_line":113},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"enum ActionType {\n\t// blocks a member's message and prevents it from being posted. A custom explanation can be specified and shown to members whenever their message is blocked.\n\tblock_message      = 1\n\t// logs user content to a specified channel\n\tsend_alert_message\n\t// timeout user for a specified duration\n\ttimeout\n}","name":"ActionType","parent_name":"","return_type":"","pos":{"len":19,"line_nr":115,"pos":3388,"col":0,"last_line":122},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (am ActionMetadata) build() json2.Any","name":"build","parent_name":"ActionMetadata","return_type":"x.json2.Any","pos":{"len":44,"line_nr":134,"pos":4002,"col":0,"last_line":146},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"struct ActionMetadata {\npub:\n\t// channel to which user content should be logged\n\tchannel_id ?Snowflake\n\t// timeout duration in seconds\n\tduration_seconds ?time.Duration\n\t// additional explanation that will be shown to members whenever their message is blocked\n\tcustom_message ?string\n}","name":"ActionMetadata","parent_name":"","return_type":"","pos":{"len":25,"line_nr":124,"pos":3712,"col":0,"last_line":132},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn ActionMetadata.parse(j json2.Any) !ActionMetadata","name":"ActionMetadata.parse","parent_name":"","return_type":"!ActionMetadata","pos":{"len":56,"line_nr":148,"pos":4361,"col":0,"last_line":173},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (a Action) build() json2.Any","name":"build","parent_name":"Action","return_type":"x.json2.Any","pos":{"len":35,"line_nr":183,"pos":5061,"col":0,"last_line":191},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"struct Action {\npub:\n\t// the type of action\n\ttyp ActionType\n\t// additional metadata needed during execution for this specific action type\n\tmetadata ?ActionMetadata\n}","name":"Action","parent_name":"","return_type":"","pos":{"len":17,"line_nr":175,"pos":4890,"col":0,"last_line":181},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn Action.parse(j json2.Any) !Action","name":"Action.parse","parent_name":"","return_type":"!Action","pos":{"len":40,"line_nr":193,"pos":5226,"col":0,"last_line":209},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"struct AutoModerationRule {\npub:\n\t// the id of this rule\n\tid Snowflake\n\t// the id of the guild which this rule belongs to\n\tguild_id Snowflake\n\t// the rule name\n\tname string\n\t// the user which first created this rule\n\tcreator_id Snowflake\n\t// the rule event type\n\tevent_type EventType\n\t// the rule trigger type\n\ttrigger_type TriggerType\n\t// the rule trigger metadata\n\ttrigger_metadata TriggerMetadata\n\t// the actions which will execute when the rule is triggered\n\tactions []Action\n\t// whether the rule is enabled\n\tenabled bool\n\t// the role ids that should not be affected by the rule (Maximum of 20)\n\texempt_roles []Snowflake\n\t// the channel ids that should not be affected by the rule (Maximum of 50)\n\texempt_channels []Snowflake\n}","name":"AutoModerationRule","parent_name":"","return_type":"","pos":{"len":29,"line_nr":211,"pos":5567,"col":0,"last_line":235},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn AutoModerationRule.parse(j json2.Any) !AutoModerationRule","name":"AutoModerationRule.parse","parent_name":"","return_type":"!AutoModerationRule","pos":{"len":64,"line_nr":237,"pos":6304,"col":0,"last_line":264},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (params CreateAutoModerationRuleParams) build() json2.Any","name":"build","parent_name":"CreateAutoModerationRuleParams","return_type":"x.json2.Any","pos":{"len":64,"line_nr":301,"pos":8853,"col":0,"last_line":321},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"struct CreateAutoModerationRuleParams {\npub mut:\n\treason ?string\n\t// the rule name\n\tname string @[required]\n\t// the event type\n\tevent_type EventType @[required]\n\t// the trigger type\n\ttrigger_type TriggerType @[required]\n\t// the trigger metadata\n\ttrigger_metadata ?TriggerMetadata\n\t// the actions which will execute when the rule is triggered\n\tactions []Action @[required]\n\t// whether the rule is enabled (False by default)\n\tenabled ?bool\n\t// the role ids that should not be affected by the rule (Maximum of 20)\n\texempt_roles ?[]Snowflake\n\t// the channel ids that should not be affected by the rule (Maximum of 50)\n\texempt_channels ?[]Snowflake\n}","name":"CreateAutoModerationRuleParams","parent_name":"","return_type":"","pos":{"len":41,"line_nr":280,"pos":8202,"col":0,"last_line":299},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"fn (params EditAutoModerationRuleParams) build() json2.Any","name":"build","parent_name":"EditAutoModerationRuleParams","return_type":"x.json2.Any","pos":{"len":62,"line_nr":353,"pos":10565,"col":0,"last_line":380},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\automod.v","content":"struct EditAutoModerationRuleParams {\npub mut:\n\treason ?string\n\t// the rule name\n\tname ?string\n\t// the event type\n\tevent_type ?EventType\n\t// the trigger type\n\ttrigger_type ?TriggerType\n\t// the trigger metadata\n\ttrigger_metadata ?TriggerMetadata\n\t// the actions which will execute when the rule is triggered\n\tactions ?[]Action\n\t// whether the rule is enabled (False by default)\n\tenabled ?bool\n\t// the role ids that should not be affected by the rule (Maximum of 20)\n\texempt_roles ?[]Snowflake\n\t// the channel ids that should not be affected by the rule (Maximum of 50)\n\texempt_channels ?[]Snowflake\n}","name":"EditAutoModerationRuleParams","parent_name":"","return_type":"","pos":{"len":39,"line_nr":332,"pos":9960,"col":0,"last_line":351},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_guild(guild_id Snowflake) ?Guild","name":"get_guild","parent_name":"Cache","return_type":"?Guild","pos":{"len":58,"line_nr":93,"pos":3772,"col":0,"last_line":95},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_role(guild_id Snowflake, role_id Snowflake) ?Role","name":"get_role","parent_name":"Cache","return_type":"?Role","pos":{"len":75,"line_nr":97,"pos":3886,"col":0,"last_line":99},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_emoji(guild_id Snowflake, emoji_id Snowflake) ?Emoji","name":"get_emoji","parent_name":"Cache","return_type":"?Emoji","pos":{"len":78,"line_nr":101,"pos":4044,"col":0,"last_line":103},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_sticker(guild_id Snowflake, sticker_id Snowflake) ?Sticker","name":"get_sticker","parent_name":"Cache","return_type":"?Sticker","pos":{"len":84,"line_nr":105,"pos":4207,"col":0,"last_line":107},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_voice_state(guild_id Snowflake, user_id Snowflake) ?VoiceState","name":"get_voice_state","parent_name":"Cache","return_type":"?VoiceState","pos":{"len":88,"line_nr":109,"pos":4380,"col":0,"last_line":111},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_member(guild_id Snowflake, user_id Snowflake) ?GuildMember","name":"get_member","parent_name":"Cache","return_type":"?GuildMember","pos":{"len":84,"line_nr":113,"pos":4558,"col":0,"last_line":115},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_channel(channel_id Snowflake) ?Channel","name":"get_channel","parent_name":"Cache","return_type":"?Channel","pos":{"len":64,"line_nr":117,"pos":4727,"col":0,"last_line":119},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_message(channel_id Snowflake, message_id Snowflake) ?Message","name":"get_message","parent_name":"Cache","return_type":"?Message","pos":{"len":86,"line_nr":121,"pos":4851,"col":0,"last_line":123},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_thread(guild_id Snowflake, thread_id Snowflake) ?Channel","name":"get_thread","parent_name":"Cache","return_type":"?Channel","pos":{"len":82,"line_nr":125,"pos":5028,"col":0,"last_line":127},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_presence(guild_id Snowflake, user_id Snowflake) ?Presence","name":"get_presence","parent_name":"Cache","return_type":"?Presence","pos":{"len":83,"line_nr":129,"pos":5197,"col":0,"last_line":131},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_stage_instance(guild_id Snowflake, channel_id Snowflake) ?StageInstance","name":"get_stage_instance","parent_name":"Cache","return_type":"?StageInstance","pos":{"len":97,"line_nr":133,"pos":5367,"col":0,"last_line":135},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_guild_scheduled_event(guild_id Snowflake, guild_scheduled_event_id Snowflake) ?GuildScheduledEvent","name":"get_guild_scheduled_event","parent_name":"Cache","return_type":"?GuildScheduledEvent","pos":{"len":124,"line_nr":137,"pos":5560,"col":0,"last_line":141},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_entitlement(owner_id Snowflake, entitlement_id Snowflake) ?Entitlement","name":"get_entitlement","parent_name":"Cache","return_type":"?Entitlement","pos":{"len":96,"line_nr":143,"pos":5804,"col":0,"last_line":145},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn (cache &Cache) get_user(user_id Snowflake) ?User","name":"get_user","parent_name":"Cache","return_type":"?User","pos":{"len":55,"line_nr":147,"pos":5997,"col":0,"last_line":149},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"struct Cache {\npub:\n\tguilds_check    fn (guild_id Snowflake, guild Guild) bool = unsafe { nil }\n\tguilds_max_size ?int = 0\n\n\troles_check     fn (guild_id Snowflake, role_id Snowflake, role Role) bool = unsafe { nil }\n\troles_max_size1 ?int = 0\n\troles_max_size2 ?int = 0\n\n\temojis_check     fn (guild_id Snowflake, emoji_id Snowflake, emoji Emoji) bool = unsafe { nil }\n\temojis_max_size1 ?int = 0\n\temojis_max_size2 ?int = 0\n\n\tstickers_check     fn (guild_id Snowflake, sticker_id Snowflake, sticker Sticker) bool = unsafe { nil }\n\tstickers_max_size1 ?int = 0\n\tstickers_max_size2 ?int = 0\n\n\tauto_moderation_rules_check     fn (guild_id Snowflake, rule_id Snowflake, rule AutoModerationRule) bool = unsafe { nil }\n\tauto_moderation_rules_max_size1 ?int = 0\n\tauto_moderation_rules_max_size2 ?int = 0\n\n\tvoice_states_check     fn (guild_id Snowflake, user_id Snowflake, state VoiceState) bool = unsafe { nil }\n\tvoice_states_max_size1 ?int = 0\n\tvoice_states_max_size2 ?int = 0\n\n\tmembers_check     fn (guild_id Snowflake, user_id Snowflake, member GuildMember) bool = unsafe { nil }\n\tmembers_max_size1 ?int = 0\n\tmembers_max_size2 ?int = 0\n\n\tchannels_check    fn (channel_id Snowflake, channel Channel) bool = unsafe { nil }\n\tchannels_max_size ?int = 0\n\n\tmessages_check     fn (channel_id Snowflake, message_id Snowflake, message Message) bool = unsafe { nil }\n\tmessages_max_size1 ?int = 0\n\tmessages_max_size2 ?int = 0\n\n\tthreads_check     fn (guild_id Snowflake, thread_id Snowflake, thread Channel) bool = unsafe { nil }\n\tthreads_max_size1 ?int = 0\n\tthreads_max_size2 ?int = 0\n\n\tpresences_check     fn (guild_id Snowflake, user_id Snowflake, presence Presence) bool = unsafe { nil }\n\tpresences_max_size1 ?int = 0\n\tpresences_max_size2 ?int = 0\n\n\tstage_instances_check     fn (guild_id Snowflake, instance_id Snowflake, instance StageInstance) bool = unsafe { nil }\n\tstage_instances_max_size1 ?int = 0\n\tstage_instances_max_size2 ?int = 0\n\n\tguild_scheduled_events_check     fn (guild_id Snowflake, event_id Snowflake, event GuildScheduledEvent) bool = unsafe { nil }\n\tguild_scheduled_events_max_size1 ?int = 0\n\tguild_scheduled_events_max_size2 ?int = 0\n\n\tentitlements_check     fn (owner_id Snowflake, entitlement_id Snowflake, entitlement Entitlement) bool = unsafe { nil }\n\tentitlements_max_size1 ?int = 0\n\tentitlements_max_size2 ?int = 0\n\n\tusers_check    fn (user_id Snowflake, user User) bool = unsafe { nil }\n\tusers_max_size ?int\npub mut:\n\t// {guild_id -> guild}\n\tguilds map[Snowflake]Guild\n\t// {guild_id -> {role_id -> role}}\n\troles map[Snowflake]map[Snowflake]Role\n\t// {guild_id -> {emoji_id -> emoji}}\n\temojis map[Snowflake]map[Snowflake]Emoji\n\t// {guild_id -> {sticker_id -> sticker}}\n\tstickers map[Snowflake]map[Snowflake]Sticker\n\t// {guild_id -> {rule_id -> rule}}\n\tauto_moderation_rules map[Snowflake]map[Snowflake]AutoModerationRule\n\t// {guild_id -> {user_id -> state}}\n\tvoice_states map[Snowflake]map[Snowflake]VoiceState\n\t// {guild_id -> {user_id -> member}}\n\tmembers map[Snowflake]map[Snowflake]GuildMember\n\t// {channel_id -> channel}\n\tchannels map[Snowflake]Channel\n\t// {channel_id -> {message_id -> message}}\n\tmessages map[Snowflake]map[Snowflake]Message\n\t// {guild_id -> {channel_id -> thread}}\n\tthreads map[Snowflake]map[Snowflake]Channel\n\t// {guild_id -> {user_id -> presence}}\n\tpresences map[Snowflake]map[Snowflake]Presence\n\t// {guild_id -> {channel_id -> instance}}\n\tstage_instances map[Snowflake]map[Snowflake]StageInstance\n\t// {guild_id -> {guild_scheduled_event_id -> guild_scheduled_event}}\n\tguild_scheduled_events map[Snowflake]map[Snowflake]GuildScheduledEvent\n\t// {owner_id (user_id | guild_id) -> {entitlement_id -> entitlement}}\n\tentitlements map[Snowflake]map[Snowflake]Entitlement\n\t// {user_id -> user}\n\tusers map[Snowflake]User\n}","name":"Cache","parent_name":"","return_type":"","pos":{"len":16,"line_nr":2,"pos":16,"col":0,"last_line":91},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn cache_add1[T](mut m1 map[Snowflake]T, max_size ?int, check fn (id1 Snowflake, o T) bool, id1 Snowflake, o T)","name":"cache_add1","parent_name":"","return_type":"void","pos":{"len":115,"line_nr":151,"pos":6106,"col":0,"last_line":168},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cache.v","content":"fn cache_add2[T](mut m1 map[Snowflake]map[Snowflake]T, max_size1 ?int, max_size2 ?int, check fn (id1 Snowflake, id2 Snowflake, o T) bool, id1 Snowflake, id2 Snowflake, o T)","name":"cache_add2","parent_name":"","return_type":"void","pos":{"len":176,"line_nr":170,"pos":6445,"col":0,"last_line":201},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) custom_emoji(emoji_id Snowflake, params CDNGetParams) string","name":"custom_emoji","parent_name":"CDN","return_type":"string","pos":{"len":75,"line_nr":74,"pos":1148,"col":0,"last_line":76},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) guild_icon(guild_id Snowflake, guild_icon string, params CDNGetParams) string","name":"guild_icon","parent_name":"CDN","return_type":"string","pos":{"len":92,"line_nr":78,"pos":1311,"col":0,"last_line":80},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) guild_splash(guild_id Snowflake, guild_icon string, params CDNGetParams) string","name":"guild_splash","parent_name":"CDN","return_type":"string","pos":{"len":94,"line_nr":82,"pos":1522,"col":0,"last_line":84},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) guild_discovery_splash(guild_id Snowflake, guild_icon string, params CDNGetParams) string","name":"guild_discovery_splash","parent_name":"CDN","return_type":"string","pos":{"len":104,"line_nr":86,"pos":1735,"col":0,"last_line":88},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) guild_banner(guild_id Snowflake, guild_banner string, params CDNGetParams) string","name":"guild_banner","parent_name":"CDN","return_type":"string","pos":{"len":96,"line_nr":90,"pos":1971,"col":0,"last_line":92},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) user_banner(user_id Snowflake, user_banner string, params CDNGetParams) string","name":"user_banner","parent_name":"CDN","return_type":"string","pos":{"len":93,"line_nr":94,"pos":2192,"col":0,"last_line":96},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) default_user_avatar(index int) string","name":"default_user_avatar","parent_name":"CDN","return_type":"string","pos":{"len":52,"line_nr":98,"pos":2408,"col":0,"last_line":100},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) user_avatar(user_id Snowflake, user_avatar string, params CDNGetParams) string","name":"user_avatar","parent_name":"CDN","return_type":"string","pos":{"len":93,"line_nr":102,"pos":2539,"col":0,"last_line":104},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) guild_member_avatar(guild_id Snowflake, user_id Snowflake, member_avatar string, params CDNGetParams) string","name":"guild_member_avatar","parent_name":"CDN","return_type":"string","pos":{"len":123,"line_nr":106,"pos":2755,"col":0,"last_line":108},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) user_avatar_decoration(user_id Snowflake, user_avatar_decoration string, params CDNGetParams) string","name":"user_avatar_decoration","parent_name":"CDN","return_type":"string","pos":{"len":115,"line_nr":110,"pos":3054,"col":0,"last_line":112},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) application_icon(application_id Snowflake, icon string, params CDNGetParams) string","name":"application_icon","parent_name":"CDN","return_type":"string","pos":{"len":98,"line_nr":114,"pos":3314,"col":0,"last_line":116},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) application_cover(application_id Snowflake, cover_image string, params CDNGetParams) string","name":"application_cover","parent_name":"CDN","return_type":"string","pos":{"len":106,"line_nr":118,"pos":3537,"col":0,"last_line":120},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) application_asset(application_id Snowflake, asset_id string, params CDNGetParams) string","name":"application_asset","parent_name":"CDN","return_type":"string","pos":{"len":103,"line_nr":122,"pos":3775,"col":0,"last_line":124},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) achievement_icon(application_id Snowflake, achievement_id string, icon_hash string, params CDNGetParams) string","name":"achievement_icon","parent_name":"CDN","return_type":"string","pos":{"len":126,"line_nr":126,"pos":4008,"col":0,"last_line":128},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) store_page_asset(application_id Snowflake, asset_id string, params CDNGetParams) string","name":"store_page_asset","parent_name":"CDN","return_type":"string","pos":{"len":102,"line_nr":130,"pos":4322,"col":0,"last_line":132},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) sticker_pack_banner(application_id Snowflake, sticker_pack_banner_asset_id Snowflake, params CDNGetParams) string","name":"sticker_pack_banner","parent_name":"CDN","return_type":"string","pos":{"len":128,"line_nr":134,"pos":4560,"col":0,"last_line":136},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) team_icon(team_id Snowflake, team_icon string, params CDNGetParams) string","name":"team_icon","parent_name":"CDN","return_type":"string","pos":{"len":89,"line_nr":138,"pos":4825,"col":0,"last_line":140},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) sticker(sticker_id Snowflake, params CDNGetParams) string","name":"sticker","parent_name":"CDN","return_type":"string","pos":{"len":72,"line_nr":142,"pos":5038,"col":0,"last_line":144},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) role_icon(role_id Snowflake, role_icon string, params CDNGetParams) string","name":"role_icon","parent_name":"CDN","return_type":"string","pos":{"len":89,"line_nr":146,"pos":5202,"col":0,"last_line":148},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) guild_scheduled_event_cover(scheduled_event_id Snowflake, scheduled_event_cover_image string, params CDNGetParams) string","name":"guild_scheduled_event_cover","parent_name":"CDN","return_type":"string","pos":{"len":136,"line_nr":150,"pos":5398,"col":0,"last_line":152},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (c CDN) guild_member_banner(guild_id Snowflake, user_id Snowflake, member_banner string, params CDNGetParams) string","name":"guild_member_banner","parent_name":"CDN","return_type":"string","pos":{"len":123,"line_nr":154,"pos":5689,"col":0,"last_line":156},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"struct CDN {\npub:\n\tbase string\n}","name":"CDN","parent_name":"","return_type":"","pos":{"len":14,"line_nr":6,"pos":93,"col":0,"last_line":9},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"struct NewCDNParams {\npub:\n\tbase string = discord.default_cdn_url\n}","name":"NewCDNParams","parent_name":"","return_type":"","pos":{"len":23,"line_nr":12,"pos":141,"col":0,"last_line":15},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn new_cdn(params NewCDNParams) CDN","name":"new_cdn","parent_name":"","return_type":"CDN","pos":{"len":39,"line_nr":17,"pos":214,"col":0,"last_line":21},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"enum ImageFormat {\n\tpng\n\tjpg\n\tjpeg\n\twebp\n\tlottie\n\tgif\n}","name":"ImageFormat","parent_name":"","return_type":"","pos":{"len":20,"line_nr":23,"pos":311,"col":0,"last_line":30},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"fn (params CDNGetParams) build() string","name":"build","parent_name":"CDNGetParams","return_type":"string","pos":{"len":43,"line_nr":61,"pos":904,"col":0,"last_line":72},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\cdn.v","content":"struct CDNGetParams {\npub mut:\n\tformat ?ImageFormat\n\tsize   ?int\n}","name":"CDNGetParams","parent_name":"","return_type":"","pos":{"len":23,"line_nr":55,"pos":832,"col":0,"last_line":59},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct ReasonParam {\npub:\n\treason ?string\n}","name":"ReasonParam","parent_name":"","return_type":"","pos":{"len":22,"line_nr":7,"pos":72,"col":0,"last_line":10},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"enum ChannelType {\n\t// unknown type\n\tunknown             = -1\n\t// a text channel within a server\n\tguild_text          = 0\n\t// a direct message between users\n\tdm\n\t// a voice channel within a server\n\tguild_voice\n\t// a direct message between multiple users\n\tgroup_dm\n\t// an organizational category that contains up to 50 channels\n\tguild_category\n\t// a channel that users can follow and crosspost into their own server (formerly news channels)\n\tguild_announcement\n\t// a temporary sub-channel within a GUILD_ANNOUNCEMENT channel\n\tannouncement_thread = 10\n\t// a temporary sub-channel within a GUILD_TEXT or GUILD_FORUM channel\n\tpublic_thread\n\t// a temporary sub-channel within a GUILD_TEXT channel that is only viewable by those invited and those with the MANAGE_THREADS permission\n\tprivate_thread\n\t// a voice channel for hosting events with an audience\n\tguild_stage_voice\n\t// the channel in a hub containing the listed servers\n\tguild_directory\n\t// Channel that can only contain threads\n\tguild_forum\n\t// Channel that can only contain threads, similar to GUILD_FORUM channels\n\tguild_media\n}","name":"ChannelType","parent_name":"","return_type":"","pos":{"len":20,"line_nr":12,"pos":121,"col":0,"last_line":41},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"enum PermissionOverwriteType {\n\trole\n\tmember\n}","name":"PermissionOverwriteType","parent_name":"","return_type":"","pos":{"len":32,"line_nr":43,"pos":1210,"col":0,"last_line":46},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 See [permissions](#Permissions) for more information about the allow and deny fields.","is_multi":false,"pos":{"len":87,"line_nr":48,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (po PermissionOverwrite) build() json2.Any","name":"build","parent_name":"PermissionOverwrite","return_type":"x.json2.Any","pos":{"len":49,"line_nr":77,"pos":2046,"col":0,"last_line":89},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct PermissionOverwrite {\npub:\n\t// role or user id\n\tid Snowflake\n\t// either 0 (role) or 1 (member)\n\ttyp PermissionOverwriteType\n\t// permission bit set\n\tallow Permissions = discord.sentinel_permissions\n\t// permission bit set\n\tdeny Permissions = discord.sentinel_permissions\n}","name":"PermissionOverwrite","parent_name":"","return_type":"","pos":{"len":30,"line_nr":49,"pos":1351,"col":0,"last_line":59},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn PermissionOverwrite.parse(j json2.Any) !PermissionOverwrite","name":"PermissionOverwrite.parse","parent_name":"","return_type":"!PermissionOverwrite","pos":{"len":66,"line_nr":61,"pos":1618,"col":0,"last_line":75},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (ft ForumTag) build() json2.Any","name":"build","parent_name":"ForumTag","return_type":"x.json2.Any","pos":{"len":38,"line_nr":107,"pos":2738,"col":0,"last_line":122},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct ForumTag {\npub:\n\t// the id of the tag\n\tid Snowflake\n\t// the name of the tag (0-20 characters)\n\tname string\n\t// whether this tag can only be added to or removed from threads by a member with the MANAGE_THREADS permission\n\tmoderated bool\n\t// the id of a guild's custom emoji\n\temoji_id ?Snowflake\n\t// the unicode character of the emoji\n\temoji_name ?string\n}","name":"ForumTag","parent_name":"","return_type":"","pos":{"len":19,"line_nr":93,"pos":2371,"col":0,"last_line":105},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn ForumTag.parse(j json2.Any) !ForumTag","name":"ForumTag.parse","parent_name":"","return_type":"!ForumTag","pos":{"len":44,"line_nr":124,"pos":3013,"col":0,"last_line":149},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (pc PartialChannel) build() json2.Any","name":"build","parent_name":"PartialChannel","return_type":"x.json2.Any","pos":{"len":44,"line_nr":169,"pos":4208,"col":0,"last_line":207},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct PartialChannel {\npub:\n\tid                            Snowflake\n\ttyp                           ChannelType\n\tposition                      ?int\n\tpermission_overwrites         ?[]PermissionOverwrite\n\tname                          ?string\n\ttopic                         ?string\n\tnsfw                          ?bool\n\tbitrate                       ?int\n\tuser_limit                    ?int\n\tparent_id                     ?Snowflake\n\tdefault_auto_archive_duration ?time.Duration\n\tpermissions                   ?Permissions\n\tflags                         ?ChannelFlags\n\tavailable_tags                ?[]ForumTag\n}","name":"PartialChannel","parent_name":"","return_type":"","pos":{"len":25,"line_nr":151,"pos":3591,"col":0,"last_line":167},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn PartialChannel.parse(j json2.Any) !PartialChannel","name":"PartialChannel.parse","parent_name":"","return_type":"!PartialChannel","pos":{"len":56,"line_nr":209,"pos":5149,"col":0,"last_line":245},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"enum VideoQualityMode {\n\t// Discord chooses the quality for optimal performance\n\tauto = 1\n\t// 720p\n\tfull\n}","name":"VideoQualityMode","parent_name":"","return_type":"","pos":{"len":25,"line_nr":247,"pos":5878,"col":0,"last_line":252},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"enum ChannelFlags {\n\treserved_0\n\t// this thread is pinned to the top of its parent `.guild_forum` or `.guild_media` channel\n\tpinned\n\treserved_2\n\treserved_3\n\t// whether a tag is required to be specified when creating a thread in a `.guild_forum` or a `.guild_media` channel. Tags are specified in the `applied_tags` field.\n\trequire_tag\n\treserved_5\n\treserved_6\n\treserved_7\n\treserved_8\n\treserved_9\n\treserved_10\n\treserved_11\n\treserved_12\n\treserved_13\n\treserved_14\n\thide_media_download_options\n}","name":"ChannelFlags","parent_name":"","return_type":"","pos":{"len":21,"line_nr":255,"pos":5998,"col":0,"last_line":274},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"enum SortOrderType {\n\t// Sort forum posts by activity\n\tlatest_activity\n\t// Sort forum posts by creation time (from most recent to oldest)\n\tcreation_date\n}","name":"SortOrderType","parent_name":"","return_type":"","pos":{"len":22,"line_nr":276,"pos":6494,"col":0,"last_line":281},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"enum ForumLayoutType {\n\t// No default has been set for forum channel\n\tnot_set\n\t// Display posts as a list\n\tlist_view\n\t// Display posts as a collection of tiles\n\tgallery_view\n}","name":"ForumLayoutType","parent_name":"","return_type":"","pos":{"len":24,"line_nr":285,"pos":6731,"col":0,"last_line":292},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct ThreadMetadata {\npub:\n\t// whether the thread is archived\n\tarchived bool\n\t// the thread will stop showing in the channel list after auto_archive_duration `minutes` of inactivity, can be set to: 60, 1440, 4320, 10080\n\tauto_archive_duration time.Duration\n\t// timestamp when the thread's archive status was last changed, used for calculating recent activity\n\tarchive_timestamp time.Time\n\t// whether the thread is locked; when a thread is locked, only users with MANAGE_THREADS can unarchive it\n\tlocked bool\n\t// whether non-moderators can add other non-moderators to a thread; only available on private threads\n\tinvitable ?bool\n\t// timestamp when the thread was created; only populated for threads created after 2022-01-09\n\tcreate_timestamp ?time.Time\n}","name":"ThreadMetadata","parent_name":"","return_type":"","pos":{"len":25,"line_nr":294,"pos":6912,"col":0,"last_line":308},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn ThreadMetadata.parse(j json2.Any) !ThreadMetadata","name":"ThreadMetadata.parse","parent_name":"","return_type":"!ThreadMetadata","pos":{"len":56,"line_nr":310,"pos":7673,"col":0,"last_line":338},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct ThreadMember {\npub:\n\t// ID of the thread\n\tid ?Snowflake\n\t// ID of the user\n\tuser_id ?Snowflake\n\t// Time the user last joined the thread\n\tjoin_timestamp time.Time\n\t// Any user-thread settings, currently only used for notifications\n\tflags int\n\t// Additional information about the user\n\tmember ?GuildMember\n}","name":"ThreadMember","parent_name":"","return_type":"","pos":{"len":23,"line_nr":340,"pos":8388,"col":0,"last_line":352},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn ThreadMember.parse(j json2.Any) !ThreadMember","name":"ThreadMember.parse","parent_name":"","return_type":"!ThreadMember","pos":{"len":52,"line_nr":354,"pos":8706,"col":0,"last_line":381},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct ThreadMember2 {\n\tThreadMember\npub:\n\tguild_id Snowflake\n}","name":"ThreadMember2","parent_name":"","return_type":"","pos":{"len":24,"line_nr":383,"pos":9286,"col":0,"last_line":387},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn ThreadMember2.parse(j json2.Any) !ThreadMember2","name":"ThreadMember2.parse","parent_name":"","return_type":"!ThreadMember2","pos":{"len":54,"line_nr":389,"pos":9355,"col":0,"last_line":401},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (eft EditForumTag) build() json2.Any","name":"build","parent_name":"EditForumTag","return_type":"x.json2.Any","pos":{"len":43,"line_nr":417,"pos":10078,"col":0,"last_line":442},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct EditForumTag {\npub:\n\t// the id of the tag\n\tid Snowflake\n\t// the name of the tag (0-20 characters)\n\tname ?string\n\t// whether this tag can only be added to or removed from threads by a member with the MANAGE_THREADS permission\n\tmoderated ?bool\n\t// the id of a guild's custom emoji\n\temoji_id ?Snowflake = discord.sentinel_snowflake\n\t// the unicode character of the emoji\n\temoji_name ?string = discord.sentinel_string\n}","name":"EditForumTag","parent_name":"","return_type":"","pos":{"len":23,"line_nr":403,"pos":9666,"col":0,"last_line":415},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (dr DefaultReaction) build() json2.Any","name":"build","parent_name":"DefaultReaction","return_type":"x.json2.Any","pos":{"len":45,"line_nr":476,"pos":11230,"col":0,"last_line":489},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (dr DefaultReaction) is_sentinel() bool","name":"is_sentinel","parent_name":"DefaultReaction","return_type":"bool","pos":{"len":46,"line_nr":495,"pos":11547,"col":0,"last_line":497},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct DefaultReaction {\npub:\n\t// the id of a guild's custom emoji\n\temoji_id ?Snowflake\n\t// the unicode character of the emoji\n\temoji_name ?string\n}","name":"DefaultReaction","parent_name":"","return_type":"","pos":{"len":26,"line_nr":444,"pos":10575,"col":0,"last_line":450},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn DefaultReaction.parse(j json2.Any) !DefaultReaction","name":"DefaultReaction.parse","parent_name":"","return_type":"!DefaultReaction","pos":{"len":58,"line_nr":452,"pos":10729,"col":0,"last_line":474},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (c Channel) get_overwrite(id Snowflake) ?PermissionOverwrite","name":"get_overwrite","parent_name":"Channel","return_type":"?PermissionOverwrite","pos":{"len":67,"line_nr":573,"pos":15941,"col":0,"last_line":580},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct Channel {\npub:\n\t// the id of this channel\n\tid Snowflake\n\t// the type of channel\n\ttyp ChannelType\n\t// the id of the guild (may be missing for some channel objects received over gateway guild dispatches)\n\tguild_id ?Snowflake\n\t// sorting position of the channel\n\tposition ?int\n\t// explicit permission overwrites for members and roles\n\tpermission_overwrites ?[]PermissionOverwrite\n\t// the name of the channel (1-100 characters)\n\tname string\n\t// the channel topic (0-4096 characters for GUILD_FORUM and GUILD_MEDIA channels, 0-1024 characters for all others)\n\ttopic ?string\n\t// whether the channel is nsfw\n\tnsfw ?bool\n\t// the id of the last message sent in this channel (or thread for GUILD_FORUM or GUILD_MEDIA channels) (may not point to an existing or valid message or thread)\n\tlast_message_id ?Snowflake\n\t// the bitrate (in bits) of the voice channel\n\tbitrate ?int\n\t// the user limit of the voice channel\n\tuser_limit ?int\n\t// amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected\n\trate_limit_per_user ?time.Duration\n\t// the recipients of the DM\n\trecipients ?[]User\n\t// icon hash of the group DM\n\ticon ?string\n\t// id of the creator of the group DM or thread\n\towner_id ?Snowflake\n\t// application id of the group DM creator if it is bot-created\n\tapplication_id ?Snowflake\n\t// for group DM channels: whether the channel is managed by an application via the gdm.join OAuth2 scope\n\tmanaged ?bool\n\t// for guild channels: id of the parent category for a channel (each parent category can contain up to 50 channels), for threads: id of the text channel this thread was created\n\tparent_id ?Snowflake\n\t// when the last pinned message was pinned. This may be null in events such as GUILD_CREATE when a message is not pinned.\n\tlast_pin_timestamp ?time.Time\n\t// voice region id for the voice channel, automatic when set to null\n\trtc_region ?string\n\t// the camera video quality mode of the voice channel, 1 when not present\n\tvideo_quality_mode ?VideoQualityMode\n\t// number of messages (not including the initial message or deleted messages) in a thread.\n\tmessage_count ?int\n\t// an approximate count of users in a thread, stops counting at 50\n\tmember_count ?int\n\t// thread-specific fields not needed by other channels\n\tthread_metadata ?ThreadMetadata\n\t// thread member object for the current user, if they have joined the thread, only included on certain API endpoints\n\tmember ?ThreadMember\n\t// default duration, copied onto newly created threads, in minutes, threads will stop showing in the channel list after the specified period of inactivity, can be set to: 60, 1440, 4320, 10080\n\tdefault_auto_archive_duration ?time.Duration\n\t// computed permissions for the invoking user in the channel, including overwrites, only included when part of the resolved data received on a slash command interaction. This does not include implicit permissions, which may need to be checked separately\n\tpermissions ?Permissions\n\t// channel flags combined as a bitfield\n\tflags ?ChannelFlags\n\t// number of messages ever sent in a thread, it's similar to message_count on message creation, but will not decrement the number when a message is deleted\n\ttotal_message_sent ?int\n\t// the set of tags that can be used in a GUILD_FORUM or a GUILD_MEDIA channel\n\tavailable_tags ?[]ForumTag\n\t// the IDs of the set of tags that have been applied to a thread in a GUILD_FORUM or a GUILD_MEDIA channel\n\tapplied_tags ?[]Snowflake\n\t// the emoji to show in the add reaction button on a thread in a GUILD_FORUM or a GUILD_MEDIA channel\n\tdefault_reaction_emoji ?DefaultReaction\n\t// the initial rate_limit_per_user to set on newly created threads in a channel. this field is copied to the thread at creation time and does not live update.\n\tdefault_thread_rate_limit_per_user ?time.Duration\n\t// the default sort order type used to order posts in GUILD_FORUM and GUILD_MEDIA channels. Defaults to null, which indicates a preferred sort order hasn't been set by a channel admin\n\tdefault_sort_order ?SortOrderType\n\t// the default forum layout view used to display posts in GUILD_FORUM channels. Defaults to 0, which indicates a layout view has not been set by a channel admin\n\tdefault_forum_layout ?ForumLayoutType\n}","name":"Channel","parent_name":"","return_type":"","pos":{"len":18,"line_nr":499,"pos":11652,"col":0,"last_line":571},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn Channel.parse(j json2.Any) !Channel","name":"Channel.parse","parent_name":"","return_type":"!Channel","pos":{"len":42,"line_nr":582,"pos":16125,"col":0,"last_line":803},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"interface EditChannelParams {\n\treason ?string\n\tis_edit_channel_params()\n\tbuild() json2.Any\n}","name":"EditChannelParams","parent_name":"","return_type":"","pos":{"len":96,"line_nr":810,"pos":20936,"col":0,"last_line":814},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params EditGroupDMChannelParams) build() json2.Any","name":"build","parent_name":"EditGroupDMChannelParams","return_type":"x.json2.Any","pos":{"len":58,"line_nr":827,"pos":21227,"col":0,"last_line":836},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct EditGroupDMChannelParams {\npub:\n\treason ?string\n\t// 1-100 character channel name\n\tname ?string\n\ticon ?Image\n}","name":"EditGroupDMChannelParams","parent_name":"","return_type":"","pos":{"len":35,"line_nr":817,"pos":21044,"col":0,"last_line":823},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params EditGuildChannelParams) build() json2.Any","name":"build","parent_name":"EditGuildChannelParams","return_type":"x.json2.Any","pos":{"len":56,"line_nr":884,"pos":24207,"col":0,"last_line":992},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct EditGuildChannelParams {\npub mut:\n\treason ?string\n\t// 1-100 character channel name\n\tname ?string\n\t// the type of channel; only conversion between text and announcement is supported and only in guilds with the \"NEWS\" feature\n\ttyp ?ChannelType\n\t// the position of the channel in the left-hand listing\n\tposition ?int = discord.sentinel_int\n\t// 0-1024 character channel topic (0-4096 characters for GUILD_FORUM and GUILD_MEDIA channels)\t\n\ttopic ?string = discord.sentinel_string\n\t// whether the channel is nsfw\n\tnsfw ?bool = discord.sentinel_bool\n\t// amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected\n\trate_limit_per_user ?time.Duration = discord.sentinel_duration\n\t// the bitrate (in bits) of the voice or stage channel; min 8000\n\tbitrate ?int = discord.sentinel_int\n\t// the user limit of the voice or stage channel, max 99 for voice channels and 10,000 for stage channels (0 refers to no limit)\n\tuser_limit ?int = discord.sentinel_int\n\t// channel or category-specific permissions\n\tpermission_overwrites ?[]PermissionOverwrite = discord.sentinel_permission_overwrites\n\t// id of the new parent category for a channel\n\tparent_id ?Snowflake = discord.sentinel_snowflake\n\t// channel voice region id, automatic when set to none\n\trtc_region ?string = discord.sentinel_string\n\t// the camera video quality mode of the voice channel\n\tvideo_quality_mode ?VideoQualityMode\n\t// the default duration that the clients use (not the API) for newly created threads in the channel, in minutes, to automatically archive the thread after recent activity\n\tdefault_auto_archive_duration ?time.Duration = discord.sentinel_duration\n\t// channel flags combined as a bitfield. Currently only REQUIRE_TAG (1 << 4) is supported by GUILD_FORUM and GUILD_MEDIA channels. HIDE_MEDIA_DOWNLOAD_OPTIONS (1 << 15) is supported only by GUILD_MEDIA channels\n\tflags ?ChannelFlags\n\t// the set of tags that can be used in a GUILD_FORUM or a GUILD_MEDIA channel; limited to 20\n\tavailable_tags ?[]EditForumTag\n\t// the emoji to show in the add reaction button on a thread in a GUILD_FORUM or a GUILD_MEDIA channel\n\tdefault_reaction_emoji ?DefaultReaction = discord.sentinel_default_reaction\n\t// the initial rate_limit_per_user to set on newly created threads in a channel. this field is copied to the thread at creation time and does not live update.\n\tdefault_thread_rate_limit_per_user ?time.Duration\n\t// the default sort order type used to order posts in GUILD_FORUM and GUILD_MEDIA channels\n\tdefault_sort_order ?SortOrderType = discord.sentinel_sort_order_type\n\t// the default forum layout type used to display posts in GUILD_FORUM channels\n\tdefault_forum_layout ?ForumLayoutType\n}","name":"EditGuildChannelParams","parent_name":"","return_type":"","pos":{"len":33,"line_nr":839,"pos":21448,"col":0,"last_line":880},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params EditThreadChannelParams) build() json2.Any","name":"build","parent_name":"EditThreadChannelParams","return_type":"x.json2.Any","pos":{"len":57,"line_nr":1018,"pos":28350,"col":0,"last_line":1036},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct EditThreadChannelParams {\npub mut:\n\treason ?string\n\t// 1-100 character channel name\n\tname ?string\n\t// whether the thread is archived\n\tarchived ?bool\n\t// the thread will stop showing in the channel list after auto_archive_duration minutes of inactivity, can be set to: 60, 1440, 4320, 10080\n\tauto_archive_duration ?time.Duration = discord.sentinel_duration\n\t// whether the thread is locked; when a thread is locked, only users with MANAGE_THREADS can unarchive it\n\tlocked ?bool\n\t// whether non-moderators can add other non-moderators to a thread; only available on private threads\n\tinvitable ?bool\n\t// amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected\n\trate_limit_per_user ?int = discord.sentinel_int\n\t// channel flags combined as a bitfield; PINNED can only be set for threads in forum and media channels\n\tflags ?ChannelFlags\n\t// the IDs of the set of tags that have been applied to a thread in a GUILD_FORUM or a GUILD_MEDIA channel; limited to 5\n\tapplied_tags ?[]Snowflake\n}","name":"EditThreadChannelParams","parent_name":"","return_type":"","pos":{"len":34,"line_nr":995,"pos":27179,"col":0,"last_line":1014},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params EditChannelPermissionsParams) build() json2.Any","name":"build","parent_name":"EditChannelPermissionsParams","return_type":"x.json2.Any","pos":{"len":62,"line_nr":1083,"pos":31230,"col":0,"last_line":1102},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct EditChannelPermissionsParams {\npub mut:\n\treason ?string\n\t// the bitwise value of all allowed permissions (default `0`)\n\tallow ?Permissions = discord.sentinel_permissions\n\t// the bitwise value of all disallowed permissions (default `0`)\n\tdeny ?Permissions = discord.sentinel_permissions\n\t// 0 for a role or 1 for a member\n\ttyp PermissionOverwriteType @[required]\n}","name":"EditChannelPermissionsParams","parent_name":"","return_type":"","pos":{"len":39,"line_nr":1072,"pos":30870,"col":0,"last_line":1081},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params CreateInviteParams) build() json2.Any","name":"build","parent_name":"CreateInviteParams","return_type":"x.json2.Any","pos":{"len":52,"line_nr":1139,"pos":33658,"col":0,"last_line":1163},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct CreateInviteParams {\npub mut:\n\t// duration of invite in seconds before expiry, or 0 for never. between 0 and 604800 (7 days)\n\tmax_age ?time.Duration\n\t// max number of uses or 0 for unlimited. between 0 and 100\n\tmax_uses ?int\n\t// whether this invite only grants temporary membership\n\ttemporary ?bool\n\t// if true, don't try to reuse a similar invite (useful for creating many unique one time use invites)\n\tunique ?bool\n\t// the type of target for this voice channel invite\n\ttarget_type ?InviteTargetType\n\t// the id of the user whose stream to display for this invite, required if target_type is 1, the user must be streaming in the channel\n\ttarget_user_id ?Snowflake\n\t// the id of the embedded application to open for this invite, required if target_type is 2, the application must have the EMBEDDED flag\n\ttarget_application_id ?Snowflake\n}","name":"CreateInviteParams","parent_name":"","return_type":"","pos":{"len":29,"line_nr":1121,"pos":32808,"col":0,"last_line":1137},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct FollowedChannel {\npub:\n\t// source channel id\n\tchannel_id Snowflake\n\t// created target webhook id\n\twebhook_id Snowflake\n}","name":"FollowedChannel","parent_name":"","return_type":"","pos":{"len":26,"line_nr":1179,"pos":35349,"col":0,"last_line":1185},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn FollowedChannel.parse(j json2.Any) !FollowedChannel","name":"FollowedChannel.parse","parent_name":"","return_type":"!FollowedChannel","pos":{"len":58,"line_nr":1187,"pos":35482,"col":0,"last_line":1199},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params GroupDMAddRecipientParams) build() json2.Any","name":"build","parent_name":"GroupDMAddRecipientParams","return_type":"x.json2.Any","pos":{"len":59,"line_nr":1225,"pos":37067,"col":0,"last_line":1233},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct GroupDMAddRecipientParams {\npub mut:\n\t// access token of a user that has granted your app the gdm.join scope\n\taccess_token string @[required]\n\t// nickname of the user being added\n\tnickname ?string\n}","name":"GroupDMAddRecipientParams","parent_name":"","return_type":"","pos":{"len":36,"line_nr":1217,"pos":36856,"col":0,"last_line":1223},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params StartThreadFromMessageParams) build() json2.Any","name":"build","parent_name":"StartThreadFromMessageParams","return_type":"x.json2.Any","pos":{"len":62,"line_nr":1259,"pos":38330,"col":0,"last_line":1274},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct StartThreadFromMessageParams {\npub mut:\n\t// 1-100 character channel name\n\tname string @[required]\n\t// the thread will stop showing in the channel list after auto_archive_duration minutes of inactivity, can be set to: 60, 1440, 4320, 10080\n\tauto_archive_duration ?time.Duration\n\t// amount of seconds a user has to wait before sending another message (0-21600)\n\trate_limit_per_user ?time.Duration = discord.sentinel_duration\n\treason              ?string\n}","name":"StartThreadFromMessageParams","parent_name":"","return_type":"","pos":{"len":39,"line_nr":1248,"pos":37872,"col":0,"last_line":1257},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params StartThreadWithoutMessageParams) build() json2.Any","name":"build","parent_name":"StartThreadWithoutMessageParams","return_type":"x.json2.Any","pos":{"len":65,"line_nr":1301,"pos":40298,"col":0,"last_line":1320},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct StartThreadWithoutMessageParams {\npub mut:\n\treason ?string\n\t// 1-100 character channel name\n\tname string @[required]\n\t// the thread will stop showing in the channel list after auto_archive_duration minutes of inactivity, can be set to: 60, 1440, 4320, 10080\n\tauto_archive_duration ?time.Duration\n\t// the type of thread to create\n\ttyp ChannelType @[required]\n\t// whether non-moderators can add other non-moderators to a thread; only available when creating a private thread\n\tinvitable ?bool\n\t// amount of seconds a user has to wait before sending another message (0-21600)\n\trate_limit_per_user ?time.Duration = discord.sentinel_duration\n}","name":"StartThreadWithoutMessageParams","parent_name":"","return_type":"","pos":{"len":42,"line_nr":1286,"pos":39656,"col":0,"last_line":1299},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params FetchThreadMemberParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchThreadMemberParams","return_type":"net.urllib.Values","pos":{"len":74,"line_nr":1357,"pos":42996,"col":0,"last_line":1363},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct FetchThreadMemberParams {\npub mut:\n\t// Whether to include a guild member object for the thread member\n\twith_member ?bool\n}","name":"FetchThreadMemberParams","parent_name":"","return_type":"","pos":{"len":34,"line_nr":1351,"pos":42861,"col":0,"last_line":1355},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params ListThreadMembersParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"ListThreadMembersParams","return_type":"net.urllib.Values","pos":{"len":74,"line_nr":1384,"pos":44132,"col":0,"last_line":1396},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct ListThreadMembersParams {\npub mut:\n\t// Whether to include a guild member object for each thread member\n\twith_member ?bool\n\t// Get thread members after this user ID\n\tafter ?Snowflake\n\t// Max number of thread members to return (1-100). Defaults to 100.\n\tlimit ?int\n}","name":"ListThreadMembersParams","parent_name":"","return_type":"","pos":{"len":34,"line_nr":1374,"pos":43855,"col":0,"last_line":1382},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params ListArchivedThreadsParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"ListArchivedThreadsParams","return_type":"net.urllib.Values","pos":{"len":76,"line_nr":1417,"pos":45321,"col":0,"last_line":1426},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct ListArchivedThreadsParams {\npub mut:\n\t// returns threads archived before this timestamp\n\tbefore ?time.Time\n\t// optional maximum number of threads to return\n\tlimit ?int\n}","name":"ListArchivedThreadsParams","parent_name":"","return_type":"","pos":{"len":36,"line_nr":1409,"pos":45139,"col":0,"last_line":1415},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct ListThreadsResponse {\npub mut:\n\t// the threads\n\tthreads []Channel\n\t// a thread member object for each returned thread the current user has joined\n\tmembers []ThreadMember\n\t// whether there are potentially additional threads that could be returned on a subsequent call\n\thas_more bool\n}","name":"ListThreadsResponse","parent_name":"","return_type":"","pos":{"len":30,"line_nr":1428,"pos":45623,"col":0,"last_line":1436},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn ListThreadsResponse.parse(j json2.Any) !ListThreadsResponse","name":"ListThreadsResponse.parse","parent_name":"","return_type":"!ListThreadsResponse","pos":{"len":66,"line_nr":1438,"pos":45919,"col":0,"last_line":1455},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params ListJoinedPrivateArchivedThreadsParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"ListJoinedPrivateArchivedThreadsParams","return_type":"net.urllib.Values","pos":{"len":89,"line_nr":1480,"pos":47886,"col":0,"last_line":1489},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct ListJoinedPrivateArchivedThreadsParams {\npub mut:\n\t// returns threads before this id\n\tbefore ?Snowflake\n\t// optional maximum number of threads to return\n\tlimit ?int\n}","name":"ListJoinedPrivateArchivedThreadsParams","parent_name":"","return_type":"","pos":{"len":49,"line_nr":1472,"pos":47707,"col":0,"last_line":1478},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn (params CreateGuildChannelParams) build() json2.Any","name":"build","parent_name":"CreateGuildChannelParams","return_type":"x.json2.Any","pos":{"len":58,"line_nr":1541,"pos":51220,"col":0,"last_line":1669},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"struct CreateGuildChannelParams {\npub mut:\n\tname string @[required]\n\t// the type of channel\n\ttyp ?ChannelType = unsafe { ChannelType(discord.sentinel_int) }\n\t// channel topic (0-1024 characters)\n\ttopic ?string = discord.sentinel_string\n\t// the bitrate (in bits) of the voice or stage channel; min 8000\n\tbitrate ?int = discord.sentinel_int\n\t// the user limit of the voice channel\n\tuser_limit ?int = discord.sentinel_int\n\t// amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission `.manage_messages` or `.manage_channel`, are unaffected\n\trate_limit_per_user ?time.Duration = discord.sentinel_duration\n\t// sorting position of the channel\n\tposition ?int = discord.sentinel_int\n\t// the channel's permission overwrites\n\tpermission_overwrites ?[]PermissionOverwrite = discord.sentinel_permission_overwrites\n\t// id of the parent category for a channel\n\tparent_id ?Snowflake = discord.sentinel_snowflake\n\t// whether the channel is nsfw\n\tnsfw ?bool = discord.sentinel_bool\n\t// channel voice region id of the voice or stage channel, automatic when set to null\n\trtc_region ?string = discord.sentinel_string\n\t// the camera video quality mode of the voice channel\n\tvideo_quality_mode ?VideoQualityMode = unsafe { VideoQualityMode(discord.sentinel_int) }\n\t// the default duration that the clients use (not the API) for newly created threads in the channel, in minutes, to automatically archive the thread after recent activity\n\tdefault_auto_archive_duration ?time.Duration = discord.sentinel_duration\n\t// emoji to show in the add reaction button on a thread in a `.guild_forum` or a `.guild_media` channel\n\tdefault_reaction_emoji ?DefaultReaction = discord.sentinel_default_reaction\n\t// set of tags that can be used in a `.guild_forum` or a `.guild_media` channel\n\tavailable_tags ?[]ForumTag = discord.sentinel_forum_tags\n\t// the default sort order type used to order posts in `.guild_forum` and `.guild_media`  channels\n\tdefault_sort_order ?SortOrderType = unsafe { SortOrderType(discord.sentinel_int) }\n\t// the default forum layout view used to display posts in `.guild_forum` channels\n\tdefault_forum_layout ?ForumLayoutType = unsafe { ForumLayoutType(discord.sentinel_int) }\n\t// the initial `rate_limit_per_user` to set on newly created threads in a channel. this field is copied to the thread at creation time and does not live update.\n\tdefault_thread_rate_limit_per_user ?time.Duration = discord.sentinel_duration\n\treason                             ?string\n}","name":"CreateGuildChannelParams","parent_name":"","return_type":"","pos":{"len":35,"line_nr":1501,"pos":48811,"col":0,"last_line":1539},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Overwrites can be used to apply certain permissions to roles or members on a channel-level. Applicable permissions are indicated by a T for text channels, V for voice channels, or S for stage channels in the table above.","is_multi":false,"pos":{"len":222,"line_nr":1725,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 When using overwrites, there are cases where permission collisions could occur for a user; that is to say, the user may have certain overwrites with permissions that contradict each other or their guild-level role permissions. With this in mind, permissions are applied to users in the following hierarchy:","is_multi":false,"pos":{"len":308,"line_nr":1726,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 1. Base permissions given to @everyone are applied at a guild level","is_multi":false,"pos":{"len":69,"line_nr":1727,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 2. Permissions allowed to a user by their roles are applied at a guild level","is_multi":false,"pos":{"len":78,"line_nr":1728,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 3. Overwrites that deny permissions for @everyone are applied at a channel level","is_multi":false,"pos":{"len":82,"line_nr":1729,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 4. Overwrites that allow permissions for @everyone are applied at a channel level","is_multi":false,"pos":{"len":83,"line_nr":1730,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 5. Overwrites that deny permissions for specific roles are applied at a channel level","is_multi":false,"pos":{"len":87,"line_nr":1731,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 6. Overwrites that allow permissions for specific roles are applied at a channel level","is_multi":false,"pos":{"len":88,"line_nr":1732,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 7. Member-specific overwrites that deny permissions are applied at a channel level","is_multi":false,"pos":{"len":84,"line_nr":1733,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 8. Member-specific overwrites that allow permissions are applied at a channel level","is_multi":false,"pos":{"len":85,"line_nr":1734,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 More at https://discord.com/developers/docs/topics/permissions#permission-overwrites...","is_multi":false,"pos":{"len":89,"line_nr":1735,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\channel.v","content":"fn compute_permissions(member GuildMember, channel Channel, guild Guild) Permissions","name":"compute_permissions","parent_name":"","return_type":"Permissions","pos":{"len":88,"line_nr":1736,"pos":58262,"col":0,"last_line":1739},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"struct Properties {\npub:\n\tos      string = os.user_os()\n\tbrowser string = 'discord.v'\n\tdevice  string = 'discord.v'\n}","name":"Properties","parent_name":"","return_type":"","pos":{"len":21,"line_nr":8,"pos":89,"col":0,"last_line":13},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"interface HTTPClient {\n\tis_http_client()\n\tperform(http.Request) !http.Response\n}","name":"HTTPClient","parent_name":"","return_type":"","pos":{"len":84,"line_nr":17,"pos":317,"col":0,"last_line":20},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"struct RESTConfig {\npub:\n\tbase_url   string = 'https://discord.com/api/v10'\n\thttp       ?HTTPClient\n\tuser_agent string = discord.default_user_agent\n}","name":"RESTConfig","parent_name":"","return_type":"","pos":{"len":21,"line_nr":31,"pos":581,"col":0,"last_line":36},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"fn new_rest(token string, config RESTConfig) REST","name":"new_rest","parent_name":"","return_type":"REST","pos":{"len":53,"line_nr":38,"pos":736,"col":0,"last_line":44},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"struct BotConfig {\n\tRESTConfig\npub:\n\tcache           Cache\n\tdebug           bool\n\tintents         GatewayIntents\n\tproperties      Properties\n\tlarge_threshold ?int\n\tpresence        ?UpdatePresenceParams\n\tread_timeout    ?time.Duration\n\tsettings        GatewayClientSettings\n\twrite_timeout   ?time.Duration\n}","name":"BotConfig","parent_name":"","return_type":"","pos":{"len":20,"line_nr":47,"pos":889,"col":0,"last_line":59},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 `bot` creates a new [GatewayClient] that can be used to listen events.","is_multi":false,"pos":{"len":72,"line_nr":69,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Use `launch` to connect to gateway.","is_multi":false,"pos":{"len":37,"line_nr":70,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 note: token should not contain `Bot` prefix","is_multi":false,"pos":{"len":45,"line_nr":71,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"fn bot(token string, config BotConfig) GatewayClient","name":"bot","parent_name":"","return_type":"GatewayClient","pos":{"len":56,"line_nr":72,"pos":1466,"col":0,"last_line":88},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 `bearer` accepts access token and returns [REST](#REST) that can be used to make requests","is_multi":false,"pos":{"len":91,"line_nr":90,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 note: token should not contain `Bearer` prefix","is_multi":false,"pos":{"len":48,"line_nr":91,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"fn bearer(token string, config RESTConfig) REST","name":"bearer","parent_name":"","return_type":"REST","pos":{"len":51,"line_nr":92,"pos":2083,"col":0,"last_line":94},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 `oauth2_app` accepts client ID and secret and returns [REST](#REST) with Basic token","is_multi":false,"pos":{"len":86,"line_nr":96,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\client.v","content":"fn oauth2_app(client_id Snowflake, client_secret string, config RESTConfig) REST","name":"oauth2_app","parent_name":"","return_type":"REST","pos":{"len":84,"line_nr":97,"pos":2272,"col":0,"last_line":100},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (ct ComponentType) build() json2.Any","name":"build","parent_name":"ComponentType","return_type":"x.json2.Any","pos":{"len":43,"line_nr":23,"pos":515,"col":0,"last_line":25},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"enum ComponentType {\n\t// Container for other components\n\taction_row         = 1\n\t// Button object\n\tbutton             = 2\n\t// Select menu for picking from defined text options\n\tstring_select      = 3\n\t// Text input object\n\ttext_input         = 4\n\t// Select menu for users\n\tuser_select        = 5\n\t// Select menu for roles\n\trole_select        = 6\n\t// Select menu for mentionables (users *and roles*)\n\tmentionable_select = 7\n\t// Select menu for channels\n\tchannel_select     = 8\n}","name":"ComponentType","parent_name":"","return_type":"","pos":{"len":22,"line_nr":4,"pos":32,"col":0,"last_line":21},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ignore is_component(), it is used to differ interfaces","is_multi":false,"pos":{"len":56,"line_nr":27,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"interface Component {\n\tis_component()\n\tbuild() json2.Any\n}","name":"Component","parent_name":"","return_type":"","pos":{"len":62,"line_nr":29,"pos":650,"col":0,"last_line":32},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (ce ComponentEmoji) build() json2.Any","name":"build","parent_name":"ComponentEmoji","return_type":"x.json2.Any","pos":{"len":44,"line_nr":41,"pos":819,"col":0,"last_line":52},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct ComponentEmoji {\npub:\n\tid       ?Snowflake\n\tname     string     @[required]\n\tanimated bool\n}","name":"ComponentEmoji","parent_name":"","return_type":"","pos":{"len":25,"line_nr":34,"pos":714,"col":0,"last_line":39},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn ComponentEmoji.parse(j json2.Any) !ComponentEmoji","name":"ComponentEmoji.parse","parent_name":"","return_type":"!ComponentEmoji","pos":{"len":56,"line_nr":54,"pos":1020,"col":0,"last_line":75},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 An Action Row is a non-interactive container component for other types of components. It has a sub-array of components of other types.","is_multi":false,"pos":{"len":136,"line_nr":77,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - You can have up to 5 Action Rows per message","is_multi":false,"pos":{"len":48,"line_nr":78,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - An Action Row cannot contain another Action Row","is_multi":false,"pos":{"len":51,"line_nr":79,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (ar ActionRow) build() json2.Any","name":"build","parent_name":"ActionRow","return_type":"x.json2.Any","pos":{"len":39,"line_nr":87,"pos":1773,"col":0,"last_line":92},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct ActionRow {\npub:\n\tcomponents []Component\n}","name":"ActionRow","parent_name":"","return_type":"","pos":{"len":20,"line_nr":80,"pos":1682,"col":0,"last_line":83},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn ActionRow.internal_parse(j map[string]json2.Any) !ActionRow","name":"ActionRow.internal_parse","parent_name":"","return_type":"!ActionRow","pos":{"len":66,"line_nr":94,"pos":1929,"col":0,"last_line":100},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn ActionRow.parse(j json2.Any) !ActionRow","name":"ActionRow.parse","parent_name":"","return_type":"!ActionRow","pos":{"len":46,"line_nr":102,"pos":2146,"col":0,"last_line":111},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (r []Component) flatten() []Component","name":"flatten","parent_name":"[]Component","return_type":"[]Component","pos":{"len":44,"line_nr":113,"pos":2366,"col":0,"last_line":123},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (cs []Component) find_where(f fn (Component) bool) ?Component","name":"find_where","parent_name":"[]Component","return_type":"?Component","pos":{"len":68,"line_nr":125,"pos":2545,"col":0,"last_line":132},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (cs []Component) find[T](f fn (T) bool) ?T","name":"find","parent_name":"[]Component","return_type":"?T","pos":{"len":49,"line_nr":134,"pos":2688,"col":0,"last_line":143},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"[]Component","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (bs ButtonStyle) build() json2.Any","name":"build","parent_name":"ButtonStyle","return_type":"x.json2.Any","pos":{"len":41,"line_nr":158,"pos":3003,"col":0,"last_line":160},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"enum ButtonStyle {\n\t// blurple\n\tprimary   = 1\n\t// grey\n\tsecondary = 2\n\t// green\n\tsuccess   = 3\n\t// red\n\tdanger    = 4\n\t// grey, navigates to a URL\n\tlink      = 5\n}","name":"ButtonStyle","parent_name":"","return_type":"","pos":{"len":20,"line_nr":145,"pos":2834,"col":0,"last_line":156},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Buttons are interactive components that render in messages. They can be clicked by users, and send an interaction to your app when clicked.","is_multi":false,"pos":{"len":141,"line_nr":162,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":163,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - Buttons must be sent inside an Action Row","is_multi":false,"pos":{"len":45,"line_nr":164,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - An Action Row can contain up to 5 buttons","is_multi":false,"pos":{"len":45,"line_nr":165,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - An Action Row containing buttons cannot also contain any select menu components","is_multi":false,"pos":{"len":83,"line_nr":166,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 <br/>","is_multi":false,"pos":{"len":7,"line_nr":167,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":168,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Buttons come in a variety of styles to convey different types of actions. These styles also define what fields are valid for a button.","is_multi":false,"pos":{"len":136,"line_nr":169,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":170,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - Non-link buttons must have a custom_id, and cannot have a url","is_multi":false,"pos":{"len":65,"line_nr":171,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - Link buttons must have a url, and cannot have a custom_id","is_multi":false,"pos":{"len":61,"line_nr":172,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - Link buttons do not send an interaction to your app when clicked","is_multi":false,"pos":{"len":68,"line_nr":173,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (b Button) build() json2.Any","name":"build","parent_name":"Button","return_type":"x.json2.Any","pos":{"len":35,"line_nr":192,"pos":4220,"col":0,"last_line":213},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct Button {\npub:\n\t// A button style, default is `.secondary`\n\tstyle ButtonStyle = .secondary\n\t// Text that appears on the button; max 80 characters\n\tlabel ?string\n\t// `name`, `id`, and `animated`\n\temoji ?ComponentEmoji\n\t// Developer-defined identifier for the button; max 100 characters\n\tcustom_id ?string\n\t// URL for link-style buttons\n\turl ?string\n\t// Whether the button is disabled (defaults to false)\n\tdisabled ?bool\n}","name":"Button","parent_name":"","return_type":"","pos":{"len":17,"line_nr":174,"pos":3755,"col":0,"last_line":188},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn Button.internal_parse(j map[string]json2.Any) !Button","name":"Button.internal_parse","parent_name":"","return_type":"!Button","pos":{"len":60,"line_nr":215,"pos":4616,"col":0,"last_line":244},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn Button.parse(j json2.Any) !Button","name":"Button.parse","parent_name":"","return_type":"!Button","pos":{"len":40,"line_nr":246,"pos":5113,"col":0,"last_line":255},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (so SelectOption) build() json2.Any","name":"build","parent_name":"SelectOption","return_type":"x.json2.Any","pos":{"len":42,"line_nr":271,"pos":5720,"col":0,"last_line":286},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct SelectOption {\npub:\n\t// User-facing name of the option; max 100 characters\n\tlabel string @[required]\n\t// Dev-defined value of the option; max 100 characters\n\tvalue string @[required]\n\t// Additional description of the option; max 100 characters\n\tdescription ?string\n\t// `id`, `name`, and `animated`\n\temoji ?ComponentEmoji\n\t// Will show this option as selected by default\n\tdefault ?bool\n}","name":"SelectOption","parent_name":"","return_type":"","pos":{"len":23,"line_nr":257,"pos":5321,"col":0,"last_line":269},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn SelectOption.parse(j json2.Any) !SelectOption","name":"SelectOption.parse","parent_name":"","return_type":"!SelectOption","pos":{"len":52,"line_nr":288,"pos":6028,"col":0,"last_line":315},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (ss StringSelect) build() json2.Any","name":"build","parent_name":"StringSelect","return_type":"x.json2.Any","pos":{"len":42,"line_nr":335,"pos":7205,"col":0,"last_line":354},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct StringSelect {\npub:\n\t// ID for the select menu; max 100 characters\n\tcustom_id string @[required]\n\t// Specified choices in a select menu (only required and available for string selects (type 3); max 25\n\toptions []SelectOption @[required]\n\t// Placeholder text if nothing is selected; max 150 characters\n\tplaceholder ?string\n\t// Minimum number of items that must be chosen (defaults to 1); min 0, max 25\n\tmin_values ?int\n\t// Maximum number of items that can be chosen (defaults to 1); max 25\n\tmax_values ?int\n\t// Whether select menu is disabled (defaults to false)\n\tdisabled ?bool\n}","name":"StringSelect","parent_name":"","return_type":"","pos":{"len":23,"line_nr":317,"pos":6574,"col":0,"last_line":331},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn StringSelect.internal_parse(j map[string]json2.Any) !StringSelect","name":"StringSelect.internal_parse","parent_name":"","return_type":"!StringSelect","pos":{"len":72,"line_nr":356,"pos":7670,"col":0,"last_line":383},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn StringSelect.parse(j json2.Any) !StringSelect","name":"StringSelect.parse","parent_name":"","return_type":"!StringSelect","pos":{"len":52,"line_nr":385,"pos":8235,"col":0,"last_line":394},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"enum DefaultValueType {\n\tuser\n\trole\n\tchannel\n}","name":"DefaultValueType","parent_name":"","return_type":"","pos":{"len":25,"line_nr":396,"pos":8467,"col":0,"last_line":400},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (dv DefaultValue) build() json2.Any","name":"build","parent_name":"DefaultValue","return_type":"x.json2.Any","pos":{"len":42,"line_nr":410,"pos":8727,"col":0,"last_line":419},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct DefaultValue {\npub:\n\t// ID of a user, role, or channel\n\tid Snowflake @[required]\n\t// Type of value that `id` represents. Either `.user`, `.role`, or `.channel`\n\ttyp DefaultValueType @[required]\n}","name":"DefaultValue","parent_name":"","return_type":"","pos":{"len":23,"line_nr":402,"pos":8519,"col":0,"last_line":408},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn DefaultValue.parse(j json2.Any) !DefaultValue","name":"DefaultValue.parse","parent_name":"","return_type":"!DefaultValue","pos":{"len":52,"line_nr":421,"pos":8907,"col":0,"last_line":447},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (us UserSelect) build() json2.Any","name":"build","parent_name":"UserSelect","return_type":"x.json2.Any","pos":{"len":40,"line_nr":467,"pos":10096,"col":0,"last_line":491},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct UserSelect {\npub:\n\t// ID for the select menu; max 100 characters\n\tcustom_id string @[required]\n\t// Placeholder text if nothing is selected; max 150 characters\n\tplaceholder ?string\n\t// List of default values for auto-populated select menu components; number of default values must be in the range defined by `min_values` and `max_values`\n\tdefault_values ?[]Snowflake\n\t// Minimum number of items that must be chosen (defaults to 1); min 0, max 25\n\tmin_values ?int\n\t// Maximum number of items that can be chosen (defaults to 1); max 25\n\tmax_values ?int\n\t// Whether select menu is disabled (defaults to false)\n\tdisabled ?bool\n}","name":"UserSelect","parent_name":"","return_type":"","pos":{"len":21,"line_nr":449,"pos":9423,"col":0,"last_line":463},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn UserSelect.internal_parse(j map[string]json2.Any) !UserSelect","name":"UserSelect.internal_parse","parent_name":"","return_type":"!UserSelect","pos":{"len":68,"line_nr":493,"pos":10663,"col":0,"last_line":524},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn UserSelect.parse(j json2.Any) !UserSelect","name":"UserSelect.parse","parent_name":"","return_type":"!UserSelect","pos":{"len":48,"line_nr":526,"pos":11320,"col":0,"last_line":535},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (rs RoleSelect) build() json2.Any","name":"build","parent_name":"RoleSelect","return_type":"x.json2.Any","pos":{"len":40,"line_nr":555,"pos":12219,"col":0,"last_line":579},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct RoleSelect {\npub:\n\t// ID for the select menu; max 100 characters\n\tcustom_id string @[required]\n\t// Placeholder text if nothing is selected; max 150 characters\n\tplaceholder ?string\n\t// List of default values for auto-populated select menu components; number of default values must be in the range defined by `min_values` and `max_values`\n\tdefault_values ?[]Snowflake\n\t// Minimum number of items that must be chosen (defaults to 1); min 0, max 25\n\tmin_values ?int\n\t// Maximum number of items that can be chosen (defaults to 1); max 25\n\tmax_values ?int\n\t// Whether select menu is disabled (defaults to `false`)\n\tdisabled ?bool\n}","name":"RoleSelect","parent_name":"","return_type":"","pos":{"len":21,"line_nr":537,"pos":11544,"col":0,"last_line":551},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn RoleSelect.internal_parse(j map[string]json2.Any) !RoleSelect","name":"RoleSelect.internal_parse","parent_name":"","return_type":"!RoleSelect","pos":{"len":68,"line_nr":581,"pos":12786,"col":0,"last_line":612},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn RoleSelect.parse(j json2.Any) !RoleSelect","name":"RoleSelect.parse","parent_name":"","return_type":"!RoleSelect","pos":{"len":48,"line_nr":614,"pos":13443,"col":0,"last_line":623},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (ms MentionableSelect) build() json2.Any","name":"build","parent_name":"MentionableSelect","return_type":"x.json2.Any","pos":{"len":47,"line_nr":643,"pos":14359,"col":0,"last_line":664},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct MentionableSelect {\npub:\n\t// ID for the select menu; max 100 characters\n\tcustom_id string @[required]\n\t// Placeholder text if nothing is selected; max 150 characters\n\tplaceholder ?string\n\t// List of default values for auto-populated select menu components; number of default values must be in the range defined by `min_values` and `max_values`\n\tdefault_values ?[]DefaultValue\n\t// Minimum number of items that must be chosen (defaults to 1); min 0, max 25\n\tmin_values ?int\n\t// Maximum number of items that can be chosen (defaults to 1); max 25\n\tmax_values ?int\n\t// Whether select menu is disabled (defaults to `false`)\n\tdisabled ?bool\n}","name":"MentionableSelect","parent_name":"","return_type":"","pos":{"len":28,"line_nr":625,"pos":13667,"col":0,"last_line":639},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn MentionableSelect.internal_parse(j map[string]json2.Any) !MentionableSelect","name":"MentionableSelect.internal_parse","parent_name":"","return_type":"!MentionableSelect","pos":{"len":82,"line_nr":666,"pos":14894,"col":0,"last_line":697},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn MentionableSelect.parse(j json2.Any) !MentionableSelect","name":"MentionableSelect.parse","parent_name":"","return_type":"!MentionableSelect","pos":{"len":62,"line_nr":699,"pos":15527,"col":0,"last_line":708},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (cs ChannelSelect) build() json2.Any","name":"build","parent_name":"ChannelSelect","return_type":"x.json2.Any","pos":{"len":43,"line_nr":730,"pos":16559,"col":0,"last_line":757},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct ChannelSelect {\npub:\n\t// ID for the select menu; max 100 characters\n\tcustom_id string @[required]\n\t// List of channel types to include in the channel select component\n\tchannel_types ?[]ChannelType\n\t// Placeholder text if nothing is selected; max 150 characters\n\tplaceholder ?string\n\t// List of default values for auto-populated select menu components; number of default values must be in the range defined by `min_values` and `max_values`\n\tdefault_values ?[]Snowflake\n\t// Minimum number of items that must be chosen (defaults to 1); min 0, max 25\n\tmin_values ?int\n\t// Maximum number of items that can be chosen (defaults to 1); max 25\n\tmax_values ?int\n\t// Whether select menu is disabled (defaults to `false`)\n\tdisabled ?bool\n}","name":"ChannelSelect","parent_name":"","return_type":"","pos":{"len":24,"line_nr":710,"pos":15779,"col":0,"last_line":726},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn ChannelSelect.internal_parse(j map[string]json2.Any) !ChannelSelect","name":"ChannelSelect.internal_parse","parent_name":"","return_type":"!ChannelSelect","pos":{"len":74,"line_nr":759,"pos":17244,"col":0,"last_line":795},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn ChannelSelect.parse(j json2.Any) !ChannelSelect","name":"ChannelSelect.parse","parent_name":"","return_type":"!ChannelSelect","pos":{"len":54,"line_nr":797,"pos":18041,"col":0,"last_line":806},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (tis TextInputStyle) build() json2.Any","name":"build","parent_name":"TextInputStyle","return_type":"x.json2.Any","pos":{"len":45,"line_nr":815,"pos":18379,"col":0,"last_line":817},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"enum TextInputStyle {\n\t// Single-line input\n\tshort     = 1\n\t// Multi-line input\n\tparagraph = 2\n}","name":"TextInputStyle","parent_name":"","return_type":"","pos":{"len":23,"line_nr":808,"pos":18277,"col":0,"last_line":813},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Text inputs are an interactive component that render in modals. They can be used to collect short-form or long-form text.","is_multi":false,"pos":{"len":123,"line_nr":819,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 When defining a text input component, you can set attributes to customize the behavior and appearance of it. However, not all attributes will be returned in the text input interaction payload.","is_multi":false,"pos":{"len":194,"line_nr":820,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn (ti TextInput) build() json2.Any","name":"build","parent_name":"TextInput","return_type":"x.json2.Any","pos":{"len":39,"line_nr":843,"pos":19481,"col":0,"last_line":866},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"struct TextInput {\npub:\n\t// Developer-defined identifier for the input; max 100 characters\n\tcustom_id string @[required]\n\t// The Text Input Style\n\tstyle TextInputStyle = .short\n\t// Label for this component; max 45 characters\n\tlabel string @[required]\n\t// Minimum input length for a text input; min 0, max 4000\n\tmin_length ?int\n\t// Maximum input length for a text input; min 1, max 4000\n\tmax_length ?int\n\t// Whether this component is required to be filled (defaults to `true`)\n\trequired ?bool\n\t// Pre-filled value for this component; max 4000 characters\n\tvalue ?string\n\t// Custom placeholder text if the input is empty; max 100 characters\n\tplaceholder ?string\n}","name":"TextInput","parent_name":"","return_type":"","pos":{"len":20,"line_nr":821,"pos":18779,"col":0,"last_line":839},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn TextInput.internal_parse(j map[string]json2.Any) !TextInput","name":"TextInput.internal_parse","parent_name":"","return_type":"!TextInput","pos":{"len":66,"line_nr":868,"pos":19999,"col":0,"last_line":898},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn TextInput.parse(j json2.Any) !TextInput","name":"TextInput.parse","parent_name":"","return_type":"!TextInput","pos":{"len":46,"line_nr":900,"pos":20512,"col":0,"last_line":909},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\component.v","content":"fn Component.parse(j json2.Any) !Component","name":"Component.parse","parent_name":"","return_type":"!Component","pos":{"len":46,"line_nr":911,"pos":20732,"col":0,"last_line":946},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"struct PartialEmoji {\npub:\n\tid             ?Snowflake\n\tname           ?string\n\troles          ?[]Snowflake\n\tuser           ?User\n\trequire_colons ?bool\n\tmanaged        ?bool\n\tanimated       ?bool\n\tavailable      ?bool\n}","name":"PartialEmoji","parent_name":"","return_type":"","pos":{"len":23,"line_nr":6,"pos":65,"col":0,"last_line":16},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn PartialEmoji.parse(j json2.Any) !PartialEmoji","name":"PartialEmoji.parse","parent_name":"","return_type":"!PartialEmoji","pos":{"len":52,"line_nr":18,"pos":289,"col":0,"last_line":70},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"struct Emoji {\npub:\n\tid             ?Snowflake\n\tname           ?string\n\troles          ?[]Snowflake\n\tuser           ?User\n\trequire_colons ?bool\n\tmanaged        ?bool\n\tanimated       ?bool\n\tavailable      ?bool\n}","name":"Emoji","parent_name":"","return_type":"","pos":{"len":16,"line_nr":72,"pos":1264,"col":0,"last_line":82},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn Emoji.parse(j json2.Any) !Emoji","name":"Emoji.parse","parent_name":"","return_type":"!Emoji","pos":{"len":38,"line_nr":84,"pos":1481,"col":0,"last_line":138},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"struct ReactionCountDetails {\npub:\n\t// Count of super reactions\n\tburst int\n\t// Count of normal reactions\n\tnormal int\n}","name":"ReactionCountDetails","parent_name":"","return_type":"","pos":{"len":31,"line_nr":140,"pos":2467,"col":0,"last_line":146},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn ReactionCountDetails.parse(j json2.Any) !ReactionCountDetails","name":"ReactionCountDetails.parse","parent_name":"","return_type":"!ReactionCountDetails","pos":{"len":68,"line_nr":148,"pos":2591,"col":0,"last_line":160},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"struct Reaction {\npub:\n\t// Total number of times this emoji has been used to react (including super reacts)\n\tcount int\n\t// Reaction count details object\n\tcount_details ReactionCountDetails\n\t// Whether the current user reacted using this emoji\n\tme bool\n\t// Whether the current user super-reacted using this emoji\n\tme_burst bool\n\t// emoji information\n\temoji PartialEmoji\n\t// HEX colors used for super reaction\n\tburst_colors []int\n}","name":"Reaction","parent_name":"","return_type":"","pos":{"len":19,"line_nr":162,"pos":2902,"col":0,"last_line":176},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn Reaction.parse(j json2.Any) !Reaction","name":"Reaction.parse","parent_name":"","return_type":"!Reaction","pos":{"len":44,"line_nr":178,"pos":3337,"col":0,"last_line":196},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn (params CreateGuildEmojiParams) build() json2.Any","name":"build","parent_name":"CreateGuildEmojiParams","return_type":"x.json2.Any","pos":{"len":56,"line_nr":223,"pos":5067,"col":0,"last_line":232},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"struct CreateGuildEmojiParams {\npub mut:\n\treason ?string\n\t// name of the emoji\n\tname string @[required]\n\t// the 128x128 emoji image\n\timage Image @[required]\n\t// roles allowed to use this emoji\n\troles ?[]Snowflake\n}","name":"CreateGuildEmojiParams","parent_name":"","return_type":"","pos":{"len":33,"line_nr":212,"pos":4847,"col":0,"last_line":221},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"fn (params EditGuildEmojiParams) build() json2.Any","name":"build","parent_name":"EditGuildEmojiParams","return_type":"x.json2.Any","pos":{"len":54,"line_nr":252,"pos":5932,"col":0,"last_line":265},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\emoji.v","content":"struct EditGuildEmojiParams {\npub:\n\treason ?string\n\t// name of the emoji\n\tname ?string\n\t// roles allowed to use this emoji\n\troles ?[]Snowflake = discord.sentinel_snowflakes\n}","name":"EditGuildEmojiParams","parent_name":"","return_type":"","pos":{"len":31,"line_nr":243,"pos":5760,"col":0,"last_line":250},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"enum EntitlementType {\n\t// Entitlement was purchased as an app subscription\n\tapplication_subscription = 8\n}","name":"EntitlementType","parent_name":"","return_type":"","pos":{"len":24,"line_nr":6,"pos":62,"col":0,"last_line":9},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"fn (e Entitlement) get_owner() ?Snowflake","name":"get_owner","parent_name":"Entitlement","return_type":"?Snowflake","pos":{"len":45,"line_nr":33,"pos":844,"col":0,"last_line":41},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"struct Entitlement {\npub:\n\t// ID of the entitlement\n\tid Snowflake\n\t// ID of the SKU\n\tsku_id Snowflake\n\t// ID of the parent application\n\tapplication_id Snowflake\n\t// ID of the user that is granted access to the entitlement's sku\n\tuser_id ?Snowflake\n\t// Type of entitlement\n\ttyp EntitlementType\n\t// Whether entitlement was deleted\n\tdeleted bool\n\t// Start date at which the entitlement is valid. Not present when using test entitlements.\n\tstarts_at ?time.Time\n\t// Date at which the entitlement is no longer valid. Not present when using test entitlements.\n\tends_at ?time.Time\n\t// ID of the guild that is granted access to the entitlement's sku\n\tguild_id ?Snowflake\n}","name":"Entitlement","parent_name":"","return_type":"","pos":{"len":22,"line_nr":11,"pos":175,"col":0,"last_line":31},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"fn Entitlement.parse(j json2.Any) !Entitlement","name":"Entitlement.parse","parent_name":"","return_type":"!Entitlement","pos":{"len":50,"line_nr":43,"pos":980,"col":0,"last_line":78},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"fn (params ListEntitlementParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"ListEntitlementParams","return_type":"net.urllib.Values","pos":{"len":72,"line_nr":99,"pos":2357,"col":0,"last_line":123},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"struct ListEntitlementParams {\npub mut:\n\t// User ID to look up entitlements for\n\tuser_id ?Snowflake\n\t// Optional list of SKU IDs to check entitlements for\n\tsku_ids ?[]Snowflake\n\t// Retrieve entitlements before this entitlement ID\n\tbefore ?Snowflake\n\t// Retrieve entitlements after this entitlement ID\n\tafter ?Snowflake\n\t// Number of entitlements to return, 1-100, default 100\n\tlimit ?int\n\t// Guild ID to look up entitlements for\n\tguild_id ?Snowflake\n\t// Whether or not ended entitlements should be omitted\n\texclude_ended ?bool\n}","name":"ListEntitlementParams","parent_name":"","return_type":"","pos":{"len":32,"line_nr":81,"pos":1823,"col":0,"last_line":97},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"enum OwnerType {\n\t// for a guild subscription\n\tguild = 1\n\t// for a user subscription\n\tuser\n}","name":"OwnerType","parent_name":"","return_type":"","pos":{"len":18,"line_nr":134,"pos":3532,"col":0,"last_line":139},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"fn (params CreateTestEntitlementParams) build() json2.Any","name":"build","parent_name":"CreateTestEntitlementParams","return_type":"x.json2.Any","pos":{"len":61,"line_nr":152,"pos":3962,"col":0,"last_line":158},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\entitlement.v","content":"struct CreateTestEntitlementParams {\npub mut:\n\t// ID of the SKU to grant the entitlement to\n\tsku_id Snowflake @[required]\n\t// ID of the guild or user to grant the entitlement to\n\towner_id Snowflake @[required]\n\t// `.guild` for a guild subscription, `.user` for a user subscription\n\towner_type OwnerType @[required]\n}","name":"CreateTestEntitlementParams","parent_name":"","return_type":"","pos":{"len":38,"line_nr":142,"pos":3640,"col":0,"last_line":150},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\errors.v","content":"fn (re RestError) code() int","name":"code","parent_name":"RestError","return_type":"int","pos":{"len":32,"line_nr":14,"pos":180,"col":0,"last_line":16},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\errors.v","content":"fn (re RestError) msg() string","name":"msg","parent_name":"RestError","return_type":"string","pos":{"len":34,"line_nr":47,"pos":1089,"col":0,"last_line":65},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\errors.v","content":"struct RestError {\n\tcode    int\n\terrors  map[string]json2.Any\n\tmessage string\n\tstatus  http.Status\n}","name":"RestError","parent_name":"","return_type":"","pos":{"len":20,"line_nr":7,"pos":74,"col":0,"last_line":12},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\errors.v","content":"struct Unauthorized {\n\tRestError\n}","name":"Unauthorized","parent_name":"","return_type":"","pos":{"len":23,"line_nr":67,"pos":1667,"col":0,"last_line":69},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\errors.v","content":"struct Forbidden {\n\tRestError\n}","name":"Forbidden","parent_name":"","return_type":"","pos":{"len":20,"line_nr":71,"pos":1707,"col":0,"last_line":73},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\errors.v","content":"struct NotFound {\n\tRestError\n}","name":"NotFound","parent_name":"","return_type":"","pos":{"len":19,"line_nr":75,"pos":1744,"col":0,"last_line":77},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\errors.v","content":"struct InternalServerError {\n\tRestError\n}","name":"InternalServerError","parent_name":"","return_type":"","pos":{"len":30,"line_nr":79,"pos":1780,"col":0,"last_line":81},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\errors.v","content":"struct Ratelimit {\n\tRestError\n\tretry_after f32\n}","name":"Ratelimit","parent_name":"","return_type":"","pos":{"len":20,"line_nr":83,"pos":1827,"col":0,"last_line":86},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"type EventListener[T] = fn (T) !","name":"EventListener","parent_name":"","return_type":"","pos":{"len":22,"line_nr":4,"pos":29,"col":0,"last_line":4},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"type Check[T] = fn (T) bool","name":"Check","parent_name":"","return_type":"","pos":{"len":14,"line_nr":11,"pos":113,"col":0,"last_line":11},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\n// Not sure about this\n@[unsafe]\nfn (mut ew EventWaiter[T]) free() {\n\tunsafe {\n\t\tew.c.free()\n\t}\n} ","is_multi":true,"pos":{"len":99,"line_nr":18,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"struct EventController[T] {\nmut:\n\tid        int\n\twait_fors map[int]EventWaiter[T]\n\tlisteners map[int]EventListener[T]\n}","name":"EventController","parent_name":"","return_type":"","pos":{"len":26,"line_nr":27,"pos":318,"col":0,"last_line":32},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"struct EmitOptions {\npub:\n\terror_handler ?fn (int, IError)\n}","name":"EmitOptions","parent_name":"","return_type":"","pos":{"len":22,"line_nr":39,"pos":523,"col":0,"last_line":42},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 `emit` broadcasts passed object to all listeners","is_multi":false,"pos":{"len":50,"line_nr":44,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"fn (mut ec EventController[T]) emit(e T, options EmitOptions)","name":"emit","parent_name":"EventController[T]","return_type":"void","pos":{"len":65,"line_nr":45,"pos":641,"col":0,"last_line":98},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 `wait` returns EventChannel that can be used to receive events","is_multi":false,"pos":{"len":64,"line_nr":152,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > ! Do not use that directly in events, please take a reference using `mut controller := &events.creator.events.on_x`","is_multi":false,"pos":{"len":119,"line_nr":153,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"fn (mut ec EventController[T]) wait(params EventWaitParams[T]) EventChannel[T]","name":"wait","parent_name":"EventController[T]","return_type":"EventChannel[T]","pos":{"len":82,"line_nr":154,"pos":2786,"col":0,"last_line":165},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 `override` removes all listeners and inserts `listener`","is_multi":false,"pos":{"len":57,"line_nr":167,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"fn (mut ec EventController[T]) override(listener EventListener[T]) EventController[T]","name":"override","parent_name":"EventController[T]","return_type":"EventController[T]","pos":{"len":89,"line_nr":168,"pos":3137,"col":0,"last_line":173},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 `listen` adds function to listener list","is_multi":false,"pos":{"len":41,"line_nr":175,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"fn (mut ec EventController[T]) listen(listener EventListener[T]) EventController[T]","name":"listen","parent_name":"EventController[T]","return_type":"EventController[T]","pos":{"len":87,"line_nr":176,"pos":3336,"col":0,"last_line":179},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"EventController[T]","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"struct EventWaitParams[T] {\npub:\n\tcheck   ?Check[T]\n\ttimeout ?time.Duration\n}","name":"EventWaitParams","parent_name":"","return_type":"","pos":{"len":26,"line_nr":101,"pos":1642,"col":0,"last_line":105},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"struct EventChannel[T] {\n\tid      int\n\ttimeout ?time.Duration\nmut:\n\tcontroller &EventController[T]\n}","name":"EventChannel","parent_name":"","return_type":"","pos":{"len":23,"line_nr":107,"pos":1725,"col":0,"last_line":112},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 Closes an event channel","is_multi":false,"pos":{"len":25,"line_nr":114,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"fn (mut a EventChannel[T]) close()","name":"close","parent_name":"EventChannel[T]","return_type":"void","pos":{"len":38,"line_nr":115,"pos":1858,"col":0,"last_line":121},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 `receive` waits for event and returns it.","is_multi":false,"pos":{"len":43,"line_nr":123,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 After it returned event, you should call `close()` on it to release resources.","is_multi":false,"pos":{"len":80,"line_nr":124,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If timeout is exceeded, it returns none","is_multi":false,"pos":{"len":41,"line_nr":125,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\eventcontroller.v","content":"fn (mut a EventChannel[T]) receive() ?T","name":"receive","parent_name":"EventChannel[T]","return_type":"?T","pos":{"len":43,"line_nr":126,"pos":2189,"col":0,"last_line":150},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"EventChannel[T]","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct BaseEvent {\npub mut:\n\tcreator &GatewayClient\n}","name":"BaseEvent","parent_name":"","return_type":"","pos":{"len":20,"line_nr":5,"pos":44,"col":0,"last_line":8},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct DispatchEvent {\n\tBaseEvent\npub:\n\tname string\n\tdata json2.Any\n}","name":"DispatchEvent","parent_name":"","return_type":"","pos":{"len":24,"line_nr":10,"pos":103,"col":0,"last_line":15},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ReadyEvent {\n\tBaseEvent\npub:\n\t// Information about the user including email\n\tuser User\n\t// Guilds the user is in\n\tguilds []UnavailableGuild\n\t// Used for resuming connections\n\tsession_id string\n\t// Gateway URL for resuming connections\n\tresume_gateway_url string\n\t// Contains id and flags\n\tapplication PartialApplication\n}","name":"ReadyEvent","parent_name":"","return_type":"","pos":{"len":21,"line_nr":17,"pos":178,"col":0,"last_line":30},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ReadyEvent.parse(j json2.Any, base BaseEvent) !ReadyEvent","name":"ReadyEvent.parse","parent_name":"","return_type":"!ReadyEvent","pos":{"len":64,"line_nr":32,"pos":511,"col":0,"last_line":50},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ResumedEvent {\n\tBaseEvent\npub:\n\t// Information about the user including email\n\tuser User\n\t// Guilds the user is in\n\tguilds []UnavailableGuild\n\t// Used for resuming connections\n\tsession_id string\n\t// Gateway URL for resuming connections\n\tresume_gateway_url string\n\t// Contains id and flags\n\tapplication PartialApplication\n}","name":"ResumedEvent","parent_name":"","return_type":"","pos":{"len":23,"line_nr":52,"pos":1091,"col":0,"last_line":65},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ResumedEvent.parse(j json2.Any, base BaseEvent) !ResumedEvent","name":"ResumedEvent.parse","parent_name":"","return_type":"!ResumedEvent","pos":{"len":68,"line_nr":67,"pos":1426,"col":0,"last_line":71},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ApplicationCommandPermissionsUpdateEvent {\n\tBaseEvent\npub:\n\tpermissions GuildApplicationCommandPermissions\n}","name":"ApplicationCommandPermissionsUpdateEvent","parent_name":"","return_type":"","pos":{"len":51,"line_nr":73,"pos":1543,"col":0,"last_line":77},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ApplicationCommandPermissionsUpdateEvent.parse(j json2.Any, base BaseEvent) !ApplicationCommandPermissionsUpdateEvent","name":"ApplicationCommandPermissionsUpdateEvent.parse","parent_name":"","return_type":"!ApplicationCommandPermissionsUpdateEvent","pos":{"len":124,"line_nr":79,"pos":1664,"col":0,"last_line":84},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct AutoModerationRuleCreateEvent {\n\tBaseEvent\npub:\n\trule AutoModerationRule\n}","name":"AutoModerationRuleCreateEvent","parent_name":"","return_type":"","pos":{"len":40,"line_nr":86,"pos":1925,"col":0,"last_line":90},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn AutoModerationRuleCreateEvent.parse(j json2.Any, base BaseEvent) !AutoModerationRuleCreateEvent","name":"AutoModerationRuleCreateEvent.parse","parent_name":"","return_type":"!AutoModerationRuleCreateEvent","pos":{"len":102,"line_nr":92,"pos":2012,"col":0,"last_line":97},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct AutoModerationRuleUpdateEvent {\n\tBaseEvent\npub:\n\trule AutoModerationRule\n}","name":"AutoModerationRuleUpdateEvent","parent_name":"","return_type":"","pos":{"len":40,"line_nr":99,"pos":2217,"col":0,"last_line":103},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn AutoModerationRuleUpdateEvent.parse(j json2.Any, base BaseEvent) !AutoModerationRuleUpdateEvent","name":"AutoModerationRuleUpdateEvent.parse","parent_name":"","return_type":"!AutoModerationRuleUpdateEvent","pos":{"len":102,"line_nr":105,"pos":2304,"col":0,"last_line":110},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct AutoModerationRuleDeleteEvent {\n\tBaseEvent\npub:\n\trule AutoModerationRule\n}","name":"AutoModerationRuleDeleteEvent","parent_name":"","return_type":"","pos":{"len":40,"line_nr":112,"pos":2509,"col":0,"last_line":116},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn AutoModerationRuleDeleteEvent.parse(j json2.Any, base BaseEvent) !AutoModerationRuleDeleteEvent","name":"AutoModerationRuleDeleteEvent.parse","parent_name":"","return_type":"!AutoModerationRuleDeleteEvent","pos":{"len":102,"line_nr":118,"pos":2596,"col":0,"last_line":123},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ChannelCreateEvent {\n\tBaseEvent\npub:\n\tchannel Channel\n}","name":"ChannelCreateEvent","parent_name":"","return_type":"","pos":{"len":29,"line_nr":125,"pos":2801,"col":0,"last_line":129},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ChannelCreateEvent.parse(j json2.Any, base BaseEvent) !ChannelCreateEvent","name":"ChannelCreateEvent.parse","parent_name":"","return_type":"!ChannelCreateEvent","pos":{"len":80,"line_nr":131,"pos":2869,"col":0,"last_line":136},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ChannelUpdateEvent {\n\tBaseEvent\npub:\n\tchannel Channel\n}","name":"ChannelUpdateEvent","parent_name":"","return_type":"","pos":{"len":29,"line_nr":138,"pos":3033,"col":0,"last_line":142},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ChannelUpdateEvent.parse(j json2.Any, base BaseEvent) !ChannelUpdateEvent","name":"ChannelUpdateEvent.parse","parent_name":"","return_type":"!ChannelUpdateEvent","pos":{"len":80,"line_nr":144,"pos":3101,"col":0,"last_line":149},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ChannelDeleteEvent {\n\tBaseEvent\npub:\n\tchannel Channel\n}","name":"ChannelDeleteEvent","parent_name":"","return_type":"","pos":{"len":29,"line_nr":151,"pos":3265,"col":0,"last_line":155},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ChannelDeleteEvent.parse(j json2.Any, base BaseEvent) !ChannelDeleteEvent","name":"ChannelDeleteEvent.parse","parent_name":"","return_type":"!ChannelDeleteEvent","pos":{"len":80,"line_nr":157,"pos":3333,"col":0,"last_line":162},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct AutoModerationActionExecutionEvent {\n\tBaseEvent\npub:\n\t// ID of the guild in which action was executed\n\tguild_id Snowflake\n\t// Action which was executed\n\taction Action\n\t// ID of the rule which action belongs to\n\trule_id Snowflake\n\t// Trigger type of rule which was triggered\n\trule_trigger_type TriggerType\n\t// ID of the user which generated the content which triggered the rule\n\tchannel_id ?Snowflake\n\t// ID of any user message which content belongs to\n\tmessage_id ?Snowflake\n\t// ID of any system auto moderation messages posted as a result of this action\n\talert_system_message_id ?Snowflake\n\t// User-generated text content\n\tcontent string\n\t// Word or phrase configured in the rule that triggered the rule\n\tmatched_keyword ?string\n\t// Substring in content that triggered the rule\n\tmatched_content ?string\n}","name":"AutoModerationActionExecutionEvent","parent_name":"","return_type":"","pos":{"len":45,"line_nr":164,"pos":3497,"col":0,"last_line":187},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn AutoModerationActionExecutionEvent.parse(j json2.Any, base BaseEvent) !AutoModerationActionExecutionEvent","name":"AutoModerationActionExecutionEvent.parse","parent_name":"","return_type":"!AutoModerationActionExecutionEvent","pos":{"len":112,"line_nr":189,"pos":4315,"col":0,"last_line":232},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ThreadCreateEvent {\n\tBaseEvent\npub:\n\tthread Channel\n}","name":"ThreadCreateEvent","parent_name":"","return_type":"","pos":{"len":28,"line_nr":234,"pos":5540,"col":0,"last_line":238},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ThreadCreateEvent.parse(j json2.Any, base BaseEvent) !ThreadCreateEvent","name":"ThreadCreateEvent.parse","parent_name":"","return_type":"!ThreadCreateEvent","pos":{"len":78,"line_nr":240,"pos":5606,"col":0,"last_line":245},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ThreadUpdateEvent {\n\tBaseEvent\npub:\n\tthread Channel\n}","name":"ThreadUpdateEvent","parent_name":"","return_type":"","pos":{"len":28,"line_nr":247,"pos":5766,"col":0,"last_line":251},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ThreadUpdateEvent.parse(j json2.Any, base BaseEvent) !ThreadUpdateEvent","name":"ThreadUpdateEvent.parse","parent_name":"","return_type":"!ThreadUpdateEvent","pos":{"len":78,"line_nr":253,"pos":5832,"col":0,"last_line":258},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ThreadDeleteEvent {\n\tBaseEvent\npub:\n\tthread Channel\n}","name":"ThreadDeleteEvent","parent_name":"","return_type":"","pos":{"len":28,"line_nr":260,"pos":5992,"col":0,"last_line":264},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ThreadDeleteEvent.parse(j json2.Any, base BaseEvent) !ThreadDeleteEvent","name":"ThreadDeleteEvent.parse","parent_name":"","return_type":"!ThreadDeleteEvent","pos":{"len":78,"line_nr":266,"pos":6058,"col":0,"last_line":271},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ThreadListSyncEvent {\n\tBaseEvent\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n\t// Parent channel IDs whose threads are being synced. If omitted, then threads were synced for the entire guild. This array may contain channel_ids that have no active threads as well, so you know to clear that data.\n\tchannel_ids ?[]Snowflake\n\t// All active threads in the given channels that the current user can access\n\tthreads []Channel\n\t// All thread member objects from the synced threads for the current user, indicating which threads the current user has been added to\n\tmembers []ThreadMember\n}","name":"ThreadListSyncEvent","parent_name":"","return_type":"","pos":{"len":30,"line_nr":273,"pos":6218,"col":0,"last_line":284},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ThreadListSyncEvent.parse(j json2.Any, base BaseEvent) !ThreadListSyncEvent","name":"ThreadListSyncEvent.parse","parent_name":"","return_type":"!ThreadListSyncEvent","pos":{"len":82,"line_nr":286,"pos":6811,"col":0,"last_line":311},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ThreadMemberUpdateEvent {\n\tBaseEvent\npub:\n\tmember ThreadMember2\n}","name":"ThreadMemberUpdateEvent","parent_name":"","return_type":"","pos":{"len":34,"line_nr":313,"pos":7567,"col":0,"last_line":317},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ThreadMemberUpdateEvent.parse(j json2.Any, base BaseEvent) !ThreadMemberUpdateEvent","name":"ThreadMemberUpdateEvent.parse","parent_name":"","return_type":"!ThreadMemberUpdateEvent","pos":{"len":90,"line_nr":319,"pos":7645,"col":0,"last_line":324},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct ChannelPinsUpdateEvent {\n\tBaseEvent\npub:\n\t// ID of the guild\n\tguild_id ?Snowflake\n\t// ID of the channel\n\tchannel_id Snowflake\n\t// Time at which the most recent pinned message was pinned\n\tlast_pin_timestamp ?time.Time\n}","name":"ChannelPinsUpdateEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":326,"pos":7829,"col":0,"last_line":335},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn ChannelPinsUpdateEvent.parse(j json2.Any, base BaseEvent) !ChannelPinsUpdateEvent","name":"ChannelPinsUpdateEvent.parse","parent_name":"","return_type":"!ChannelPinsUpdateEvent","pos":{"len":88,"line_nr":337,"pos":8060,"col":0,"last_line":363},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct EntitlementCreateEvent {\n\tBaseEvent\npub:\n\tentitlement Entitlement\n}","name":"EntitlementCreateEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":365,"pos":8683,"col":0,"last_line":369},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn EntitlementCreateEvent.parse(j json2.Any, base BaseEvent) !EntitlementCreateEvent","name":"EntitlementCreateEvent.parse","parent_name":"","return_type":"!EntitlementCreateEvent","pos":{"len":88,"line_nr":371,"pos":8763,"col":0,"last_line":376},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct EntitlementUpdateEvent {\n\tBaseEvent\npub:\n\tentitlement Entitlement\n}","name":"EntitlementUpdateEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":378,"pos":8947,"col":0,"last_line":382},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn EntitlementUpdateEvent.parse(j json2.Any, base BaseEvent) !EntitlementUpdateEvent","name":"EntitlementUpdateEvent.parse","parent_name":"","return_type":"!EntitlementUpdateEvent","pos":{"len":88,"line_nr":384,"pos":9027,"col":0,"last_line":389},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct EntitlementDeleteEvent {\n\tBaseEvent\npub:\n\tentitlement Entitlement\n}","name":"EntitlementDeleteEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":391,"pos":9211,"col":0,"last_line":395},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn EntitlementDeleteEvent.parse(j json2.Any, base BaseEvent) !EntitlementDeleteEvent","name":"EntitlementDeleteEvent.parse","parent_name":"","return_type":"!EntitlementDeleteEvent","pos":{"len":88,"line_nr":397,"pos":9291,"col":0,"last_line":402},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildCreateEvent {\n\tBaseEvent\npub:\n\tguild Guild2\n}","name":"GuildCreateEvent","parent_name":"","return_type":"","pos":{"len":27,"line_nr":404,"pos":9475,"col":0,"last_line":408},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildCreateEvent.parse(j json2.Any, base BaseEvent) !GuildCreateEvent","name":"GuildCreateEvent.parse","parent_name":"","return_type":"!GuildCreateEvent","pos":{"len":76,"line_nr":410,"pos":9538,"col":0,"last_line":415},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildUpdateEvent {\n\tBaseEvent\npub:\n\tguild Guild\n}","name":"GuildUpdateEvent","parent_name":"","return_type":"","pos":{"len":27,"line_nr":417,"pos":9693,"col":0,"last_line":421},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildUpdateEvent.parse(j json2.Any, base BaseEvent) !GuildUpdateEvent","name":"GuildUpdateEvent.parse","parent_name":"","return_type":"!GuildUpdateEvent","pos":{"len":76,"line_nr":423,"pos":9755,"col":0,"last_line":428},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildDeleteEvent {\n\tBaseEvent\npub:\n\tguild UnavailableGuild\n}","name":"GuildDeleteEvent","parent_name":"","return_type":"","pos":{"len":27,"line_nr":430,"pos":9909,"col":0,"last_line":434},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildDeleteEvent.parse(j json2.Any, base BaseEvent) !GuildDeleteEvent","name":"GuildDeleteEvent.parse","parent_name":"","return_type":"!GuildDeleteEvent","pos":{"len":76,"line_nr":436,"pos":9982,"col":0,"last_line":441},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Sent when a guild audit log entry is created. The inner payload is an [AuditLogEntry](#AuditLogEntry) object. This event is only sent to bots with the `.view_audit_log` permission.","is_multi":false,"pos":{"len":182,"line_nr":443,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildAuditLogEntryCreateEvent {\n\tBaseEvent\npub:\n\tentry AuditLogEntry\n}","name":"GuildAuditLogEntryCreateEvent","parent_name":"","return_type":"","pos":{"len":40,"line_nr":444,"pos":10331,"col":0,"last_line":448},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildAuditLogEntryCreateEvent.parse(j json2.Any, base BaseEvent) !GuildAuditLogEntryCreateEvent","name":"GuildAuditLogEntryCreateEvent.parse","parent_name":"","return_type":"!GuildAuditLogEntryCreateEvent","pos":{"len":102,"line_nr":450,"pos":10414,"col":0,"last_line":455},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildBanAddEvent {\n\tBaseEvent\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n\t// User who was banned\n\tuser User\n}","name":"GuildBanAddEvent","parent_name":"","return_type":"","pos":{"len":27,"line_nr":457,"pos":10615,"col":0,"last_line":464},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildBanAddEvent.parse(j json2.Any, base BaseEvent) !GuildBanAddEvent","name":"GuildBanAddEvent.parse","parent_name":"","return_type":"!GuildBanAddEvent","pos":{"len":76,"line_nr":466,"pos":10739,"col":0,"last_line":479},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildBanRemoveEvent {\n\tBaseEvent\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n\t// User who was banned\n\tuser User\n}","name":"GuildBanRemoveEvent","parent_name":"","return_type":"","pos":{"len":30,"line_nr":481,"pos":11091,"col":0,"last_line":488},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildBanRemoveEvent.parse(j json2.Any, base BaseEvent) !GuildBanRemoveEvent","name":"GuildBanRemoveEvent.parse","parent_name":"","return_type":"!GuildBanRemoveEvent","pos":{"len":82,"line_nr":490,"pos":11218,"col":0,"last_line":503},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildEmojisUpdateEvent {\n\tBaseEvent\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n\t// Array of emojis\n\temojis []Emoji\n}","name":"GuildEmojisUpdateEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":505,"pos":11582,"col":0,"last_line":512},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildEmojisUpdateEvent.parse(j json2.Any, base BaseEvent) !GuildEmojisUpdateEvent","name":"GuildEmojisUpdateEvent.parse","parent_name":"","return_type":"!GuildEmojisUpdateEvent","pos":{"len":88,"line_nr":514,"pos":11713,"col":0,"last_line":529},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildStickersUpdateEvent {\n\tBaseEvent\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n\t// Array of stickers\n\tstickers []Sticker\n}","name":"GuildStickersUpdateEvent","parent_name":"","return_type":"","pos":{"len":35,"line_nr":531,"pos":12168,"col":0,"last_line":538},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildStickersUpdateEvent.parse(j json2.Any, base BaseEvent) !GuildStickersUpdateEvent","name":"GuildStickersUpdateEvent.parse","parent_name":"","return_type":"!GuildStickersUpdateEvent","pos":{"len":92,"line_nr":540,"pos":12307,"col":0,"last_line":555},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildIntegrationsUpdateEvent {\n\tBaseEvent\npub:\n\t// ID of the guild whose integrations were updated\n\tguild_id Snowflake\n}","name":"GuildIntegrationsUpdateEvent","parent_name":"","return_type":"","pos":{"len":39,"line_nr":557,"pos":12778,"col":0,"last_line":562},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildIntegrationsUpdateEvent.parse(j json2.Any, base BaseEvent) !GuildIntegrationsUpdateEvent","name":"GuildIntegrationsUpdateEvent.parse","parent_name":"","return_type":"!GuildIntegrationsUpdateEvent","pos":{"len":100,"line_nr":564,"pos":12911,"col":0,"last_line":576},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildMemberAddEvent {\n\tBaseEvent\npub:\n\tmember GuildMember2\n}","name":"GuildMemberAddEvent","parent_name":"","return_type":"","pos":{"len":30,"line_nr":578,"pos":13277,"col":0,"last_line":582},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildMemberAddEvent.parse(j json2.Any, base BaseEvent) !GuildMemberAddEvent","name":"GuildMemberAddEvent.parse","parent_name":"","return_type":"!GuildMemberAddEvent","pos":{"len":82,"line_nr":584,"pos":13350,"col":0,"last_line":589},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildMemberRemoveEvent {\n\tBaseEvent\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n\t// User who was removed\n\tuser User\n}","name":"GuildMemberRemoveEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":591,"pos":13521,"col":0,"last_line":598},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildMemberRemoveEvent.parse(j json2.Any, base BaseEvent) !GuildMemberRemoveEvent","name":"GuildMemberRemoveEvent.parse","parent_name":"","return_type":"!GuildMemberRemoveEvent","pos":{"len":88,"line_nr":600,"pos":13652,"col":0,"last_line":613},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildMemberUpdateEvent {\n\tBaseEvent\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n\t// User role ids\n\troles []Snowflake\n\t// User\n\tuser User\n\t// Nickname of the user in the guild\n\tnick ?NullOr[string]\n\t// Member's guild avatar hash\n\tavatar ?string\n\t// When the user joined the guild\n\tjoined_at ?time.Time\n\t// When the user starting boosting the guild\n\tpremium_since ?NullOr[time.Time]\n\t// Whether the user is deafened in voice channels\n\tdeaf ?bool\n\t// Whether the user is muted in voice channels\n\tmute ?bool\n\t// Whether the user has not yet passed the guild's Membership Screening requirements\n\tpending ?bool\n\t// When the user's timeout will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out\n\tcommunication_disabled_until ?NullOr[time.Time]\n}","name":"GuildMemberUpdateEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":615,"pos":14028,"col":0,"last_line":640},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildMemberUpdateEvent.parse(j json2.Any, base BaseEvent) !GuildMemberUpdateEvent","name":"GuildMemberUpdateEvent.parse","parent_name":"","return_type":"!GuildMemberUpdateEvent","pos":{"len":88,"line_nr":642,"pos":14854,"col":0,"last_line":712},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildMembersChunkEvent {\n\tBaseEvent\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n\t// Set of guild members\n\tmembers []GuildMember\n\t// Chunk index in the expected chunks for this response (0 <= chunk_index < chunk_count)\n\tchunk_index int\n\t// Total number of expected chunks for this response\n\tchunk_count int\n\t// When passing an invalid ID to `REQUEST_GUILD_MEMBERS`, it will be returned here\n\tnot_found ?[]Snowflake\n\t// When passing true to `REQUEST_GUILD_MEMBERS`, presences of the returned members will be here\n\tpresences ?[]Presence\n\t// Nonce used in the Guild Members Request\n\tnonce ?string\n}","name":"GuildMembersChunkEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":714,"pos":16445,"col":0,"last_line":731},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildMembersChunkEvent.parse(j json2.Any, base BaseEvent) !GuildMembersChunkEvent","name":"GuildMembersChunkEvent.parse","parent_name":"","return_type":"!GuildMembersChunkEvent","pos":{"len":88,"line_nr":733,"pos":17053,"col":0,"last_line":769},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildRoleCreateEvent {\n\tBaseEvent\npub:\n\tguild_id Snowflake\n\trole     Role\n}","name":"GuildRoleCreateEvent","parent_name":"","return_type":"","pos":{"len":31,"line_nr":771,"pos":18028,"col":0,"last_line":776},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildRoleCreateEvent.parse(j json2.Any, base BaseEvent) !GuildRoleCreateEvent","name":"GuildRoleCreateEvent.parse","parent_name":"","return_type":"!GuildRoleCreateEvent","pos":{"len":84,"line_nr":778,"pos":18116,"col":0,"last_line":791},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildRoleUpdateEvent {\n\tBaseEvent\npub:\n\tguild_id Snowflake\n\trole     Role\n}","name":"GuildRoleUpdateEvent","parent_name":"","return_type":"","pos":{"len":31,"line_nr":793,"pos":18484,"col":0,"last_line":798},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildRoleUpdateEvent.parse(j json2.Any, base BaseEvent) !GuildRoleUpdateEvent","name":"GuildRoleUpdateEvent.parse","parent_name":"","return_type":"!GuildRoleUpdateEvent","pos":{"len":84,"line_nr":800,"pos":18572,"col":0,"last_line":813},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildRoleDeleteEvent {\n\tBaseEvent\npub:\n\tguild_id Snowflake\n\trole_id  Snowflake\n}","name":"GuildRoleDeleteEvent","parent_name":"","return_type":"","pos":{"len":31,"line_nr":815,"pos":18940,"col":0,"last_line":820},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildRoleDeleteEvent.parse(j json2.Any, base BaseEvent) !GuildRoleDeleteEvent","name":"GuildRoleDeleteEvent.parse","parent_name":"","return_type":"!GuildRoleDeleteEvent","pos":{"len":84,"line_nr":822,"pos":19033,"col":0,"last_line":835},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildScheduledEventCreateEvent {\n\tBaseEvent\npub:\n\tevent GuildScheduledEvent\n}","name":"GuildScheduledEventCreateEvent","parent_name":"","return_type":"","pos":{"len":41,"line_nr":837,"pos":19412,"col":0,"last_line":841},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildScheduledEventCreateEvent.parse(j json2.Any, base BaseEvent) !GuildScheduledEventCreateEvent","name":"GuildScheduledEventCreateEvent.parse","parent_name":"","return_type":"!GuildScheduledEventCreateEvent","pos":{"len":104,"line_nr":843,"pos":19502,"col":0,"last_line":848},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildScheduledEventUpdateEvent {\n\tBaseEvent\npub:\n\tevent GuildScheduledEvent\n}","name":"GuildScheduledEventUpdateEvent","parent_name":"","return_type":"","pos":{"len":41,"line_nr":850,"pos":19712,"col":0,"last_line":854},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildScheduledEventUpdateEvent.parse(j json2.Any, base BaseEvent) !GuildScheduledEventUpdateEvent","name":"GuildScheduledEventUpdateEvent.parse","parent_name":"","return_type":"!GuildScheduledEventUpdateEvent","pos":{"len":104,"line_nr":856,"pos":19802,"col":0,"last_line":861},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildScheduledEventDeleteEvent {\n\tBaseEvent\npub:\n\tevent GuildScheduledEvent\n}","name":"GuildScheduledEventDeleteEvent","parent_name":"","return_type":"","pos":{"len":41,"line_nr":863,"pos":20012,"col":0,"last_line":867},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildScheduledEventDeleteEvent.parse(j json2.Any, base BaseEvent) !GuildScheduledEventDeleteEvent","name":"GuildScheduledEventDeleteEvent.parse","parent_name":"","return_type":"!GuildScheduledEventDeleteEvent","pos":{"len":104,"line_nr":869,"pos":20102,"col":0,"last_line":874},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildScheduledEventUserAddEvent {\n\tBaseEvent\npub:\n\t// ID of the guild scheduled event\n\tguild_scheduled_event_id Snowflake\n\t// ID of the user\n\tuser_id Snowflake\n\t// ID of the guild\n\tguild_id Snowflake\n}","name":"GuildScheduledEventUserAddEvent","parent_name":"","return_type":"","pos":{"len":42,"line_nr":876,"pos":20312,"col":0,"last_line":885},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildScheduledEventUserAddEvent.parse(j json2.Any, base BaseEvent) !GuildScheduledEventUserAddEvent","name":"GuildScheduledEventUserAddEvent.parse","parent_name":"","return_type":"!GuildScheduledEventUserAddEvent","pos":{"len":106,"line_nr":887,"pos":20526,"col":0,"last_line":901},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct GuildScheduledEventUserRemoveEvent {\n\tBaseEvent\npub:\n\t// ID of the guild scheduled event\n\tguild_scheduled_event_id Snowflake\n\t// ID of the user\n\tuser_id Snowflake\n\t// ID of the guild\n\tguild_id Snowflake\n}","name":"GuildScheduledEventUserRemoveEvent","parent_name":"","return_type":"","pos":{"len":45,"line_nr":903,"pos":21028,"col":0,"last_line":912},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn GuildScheduledEventUserRemoveEvent.parse(j json2.Any, base BaseEvent) !GuildScheduledEventUserRemoveEvent","name":"GuildScheduledEventUserRemoveEvent.parse","parent_name":"","return_type":"!GuildScheduledEventUserRemoveEvent","pos":{"len":112,"line_nr":914,"pos":21245,"col":0,"last_line":928},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct IntegrationCreateEvent {\n\tBaseEvent\npub:\n\tintegration Integration2\n}","name":"IntegrationCreateEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":930,"pos":21759,"col":0,"last_line":934},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn IntegrationCreateEvent.parse(j json2.Any, base BaseEvent) !IntegrationCreateEvent","name":"IntegrationCreateEvent.parse","parent_name":"","return_type":"!IntegrationCreateEvent","pos":{"len":88,"line_nr":936,"pos":21840,"col":0,"last_line":941},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct IntegrationUpdateEvent {\n\tBaseEvent\npub:\n\tintegration Integration2\n}","name":"IntegrationUpdateEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":943,"pos":22025,"col":0,"last_line":947},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn IntegrationUpdateEvent.parse(j json2.Any, base BaseEvent) !IntegrationUpdateEvent","name":"IntegrationUpdateEvent.parse","parent_name":"","return_type":"!IntegrationUpdateEvent","pos":{"len":88,"line_nr":949,"pos":22106,"col":0,"last_line":954},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct IntegrationDeleteEvent {\n\tBaseEvent\npub:\n\t// Integration ID\n\tid Snowflake\n\t// ID of the guild\n\tguild_id Snowflake\n\t// ID of the bot/OAuth2 application for this discord integration\n\tapplication_id ?Snowflake\n}","name":"IntegrationDeleteEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":956,"pos":22291,"col":0,"last_line":965},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn IntegrationDeleteEvent.parse(j json2.Any, base BaseEvent) !IntegrationDeleteEvent","name":"IntegrationDeleteEvent.parse","parent_name":"","return_type":"!IntegrationDeleteEvent","pos":{"len":88,"line_nr":967,"pos":22512,"col":0,"last_line":985},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct InviteCreateEvent {\n\tBaseEvent\npub:\n\t// Channel the invite is for\n\tchannel_id Snowflake\n\t// Unique invite code\n\tcode string\n\t// Time at which the invite was created\n\tcreated_at time.Time\n\t// Guild of the invite\n\tguild_id ?Snowflake\n\t// User that created the invite\n\tinviter ?User\n\t// How long the invite is valid for\n\tmax_age time.Duration\n\t// Maximum number of times the invite can be used\n\tmax_uses int\n\t// Type of target for this voice channel invite\n\ttarget_type ?InviteTargetType\n\t// User whose stream to display for this voice channel stream invite\n\ttarget_user ?User\n\t// Embedded application to open for this voice channel embedded application invite\n\ttarget_application ?PartialApplication\n\t// Whether or not the invite is temporary (invited users will be kicked on disconnect unless they're assigned a role)\n\ttemporary bool\n\t// How many times the invite has been used (always will be 0)\n\t// uses int // not provided because it is always 0 in event\n}","name":"InviteCreateEvent","parent_name":"","return_type":"","pos":{"len":28,"line_nr":987,"pos":22993,"col":0,"last_line":1014},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn InviteCreateEvent.parse(j json2.Any, base BaseEvent) !InviteCreateEvent","name":"InviteCreateEvent.parse","parent_name":"","return_type":"!InviteCreateEvent","pos":{"len":78,"line_nr":1016,"pos":23964,"col":0,"last_line":1058},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct InviteDeleteEvent {\n\tBaseEvent\npub:\n\t// Channel the invite is for\n\tchannel_id Snowflake\n\t// Unique invite code\n\tcode string\n\t// Time at which the invite was created\n\tcreated_at time.Time\n\t// Guild of the invite\n\tguild_id ?Snowflake\n\t// User that created the invite\n\tinviter ?User\n\t// How long the invite is valid for\n\tmax_age time.Duration\n\t// Maximum number of times the invite can be used\n\tmax_uses int\n\t// Type of target for this voice channel invite\n\ttarget_type ?InviteTargetType\n\t// User whose stream to display for this voice channel stream invite\n\ttarget_user ?User\n\t// Embedded application to open for this voice channel embedded application invite\n\ttarget_application ?PartialApplication\n\t// Whether or not the invite is temporary (invited users will be kicked on disconnect unless they're assigned a role)\n\ttemporary bool\n\t// How many times the invite has been used (always will be 0)\n\t// uses int // not provided because it is always 0 in event\n}","name":"InviteDeleteEvent","parent_name":"","return_type":"","pos":{"len":28,"line_nr":1060,"pos":25012,"col":0,"last_line":1087},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn InviteDeleteEvent.parse(j json2.Any, base BaseEvent) !InviteDeleteEvent","name":"InviteDeleteEvent.parse","parent_name":"","return_type":"!InviteDeleteEvent","pos":{"len":78,"line_nr":1089,"pos":25983,"col":0,"last_line":1107},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct MessageCreateEvent {\n\tBaseEvent\npub:\n\tmessage Message2\n}","name":"MessageCreateEvent","parent_name":"","return_type":"","pos":{"len":29,"line_nr":1109,"pos":26434,"col":0,"last_line":1113},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn MessageCreateEvent.parse(j json2.Any, base BaseEvent) !MessageCreateEvent","name":"MessageCreateEvent.parse","parent_name":"","return_type":"!MessageCreateEvent","pos":{"len":80,"line_nr":1115,"pos":26503,"col":0,"last_line":1120},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct MessageUpdateEvent {\n\tBaseEvent\npub:\n\tmessage Message2\n}","name":"MessageUpdateEvent","parent_name":"","return_type":"","pos":{"len":29,"line_nr":1122,"pos":26668,"col":0,"last_line":1126},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn MessageUpdateEvent.parse(j json2.Any, base BaseEvent) !MessageUpdateEvent","name":"MessageUpdateEvent.parse","parent_name":"","return_type":"!MessageUpdateEvent","pos":{"len":80,"line_nr":1128,"pos":26737,"col":0,"last_line":1133},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct MessageDeleteEvent {\n\tBaseEvent\npub:\n\t// ID of the message\n\tid Snowflake\n\t// ID of the channel\n\tchannel_id Snowflake\n\t// ID of the guild\n\tguild_id ?Snowflake\n}","name":"MessageDeleteEvent","parent_name":"","return_type":"","pos":{"len":29,"line_nr":1135,"pos":26902,"col":0,"last_line":1144},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn MessageDeleteEvent.parse(j json2.Any, base BaseEvent) !MessageDeleteEvent","name":"MessageDeleteEvent.parse","parent_name":"","return_type":"!MessageDeleteEvent","pos":{"len":80,"line_nr":1146,"pos":27074,"col":0,"last_line":1164},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct MessageDeleteBulkEvent {\n\tBaseEvent\npub:\n\t// IDs of the messages\n\tids []Snowflake\n\t// ID of the channel\n\tchannel_id Snowflake\n\t// ID of the guild\n\tguild_id ?Snowflake\n}","name":"MessageDeleteBulkEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":1166,"pos":27533,"col":0,"last_line":1175},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn MessageDeleteBulkEvent.parse(j json2.Any, base BaseEvent) !MessageDeleteBulkEvent","name":"MessageDeleteBulkEvent.parse","parent_name":"","return_type":"!MessageDeleteBulkEvent","pos":{"len":88,"line_nr":1177,"pos":27714,"col":0,"last_line":1197},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct MessageReactionAddEvent {\n\tBaseEvent\npub:\n\t// ID of the user\n\tuser_id Snowflake\n\t// ID of the channel\n\tchannel_id Snowflake\n\t// ID of the message\n\tmessage_id Snowflake\n\t// ID of the guild\n\tguild_id ?Snowflake\n\t// Member who reacted if this happened in a guild\n\tmember ?GuildMember\n\t// Emoji used to react\n\temoji PartialEmoji\n\t// ID of the user who authored the message which was reacted to\n\tmessage_author_id ?Snowflake\n}","name":"MessageReactionAddEvent","parent_name":"","return_type":"","pos":{"len":34,"line_nr":1199,"pos":28267,"col":0,"last_line":1216},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn MessageReactionAddEvent.parse(j json2.Any, base BaseEvent) !MessageReactionAddEvent","name":"MessageReactionAddEvent.parse","parent_name":"","return_type":"!MessageReactionAddEvent","pos":{"len":90,"line_nr":1218,"pos":28701,"col":0,"last_line":1248},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct MessageReactionRemoveEvent {\n\tBaseEvent\npub:\n\t// ID of the user\n\tuser_id Snowflake\n\t// ID of the channel\n\tchannel_id Snowflake\n\t// ID of the message\n\tmessage_id Snowflake\n\t// ID of the guild\n\tguild_id ?Snowflake\n\t// Emoji used to react\n\temoji PartialEmoji\n}","name":"MessageReactionRemoveEvent","parent_name":"","return_type":"","pos":{"len":37,"line_nr":1250,"pos":29483,"col":0,"last_line":1263},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn MessageReactionRemoveEvent.parse(j json2.Any, base BaseEvent) !MessageReactionRemoveEvent","name":"MessageReactionRemoveEvent.parse","parent_name":"","return_type":"!MessageReactionRemoveEvent","pos":{"len":96,"line_nr":1265,"pos":29753,"col":0,"last_line":1285},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct MessageReactionRemoveAllEvent {\n\tBaseEvent\npub:\n\t// ID of the channel\n\tchannel_id Snowflake\n\t// ID of the message\n\tmessage_id Snowflake\n\t// ID of the guild\n\tguild_id ?Snowflake\n}","name":"MessageReactionRemoveAllEvent","parent_name":"","return_type":"","pos":{"len":40,"line_nr":1287,"pos":30347,"col":0,"last_line":1296},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn MessageReactionRemoveAllEvent.parse(j json2.Any, base BaseEvent) !MessageReactionRemoveAllEvent","name":"MessageReactionRemoveAllEvent.parse","parent_name":"","return_type":"!MessageReactionRemoveAllEvent","pos":{"len":102,"line_nr":1298,"pos":30538,"col":0,"last_line":1316},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct MessageReactionRemoveEmojiEvent {\n\tBaseEvent\npub:\n\t// ID of the channel\n\tchannel_id Snowflake\n\t// ID of the message\n\tmessage_id Snowflake\n\t// ID of the guild\n\tguild_id ?Snowflake\n\t// Emoji that was removed\n\temoji PartialEmoji\n}","name":"MessageReactionRemoveEmojiEvent","parent_name":"","return_type":"","pos":{"len":42,"line_nr":1318,"pos":31055,"col":0,"last_line":1329},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn MessageReactionRemoveEmojiEvent.parse(j json2.Any, base BaseEvent) !MessageReactionRemoveEmojiEvent","name":"MessageReactionRemoveEmojiEvent.parse","parent_name":"","return_type":"!MessageReactionRemoveEmojiEvent","pos":{"len":106,"line_nr":1331,"pos":31295,"col":0,"last_line":1350},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct PresenceUpdateEvent {\n\tBaseEvent\npub:\n\tpresence Presence\n}","name":"PresenceUpdateEvent","parent_name":"","return_type":"","pos":{"len":30,"line_nr":1352,"pos":31864,"col":0,"last_line":1356},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn PresenceUpdateEvent.parse(j json2.Any, base BaseEvent) !PresenceUpdateEvent","name":"PresenceUpdateEvent.parse","parent_name":"","return_type":"!PresenceUpdateEvent","pos":{"len":82,"line_nr":1358,"pos":31935,"col":0,"last_line":1363},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct TypingStartEvent {\n\tBaseEvent\npub:\n\t// ID of the channel\n\tchannel_id Snowflake\n\t// ID of the guild\n\tguild_id ?Snowflake\n\t// ID of the user\n\tuser_id Snowflake\n\t// When the user started typing\n\ttimestamp time.Time\n\t// Member who started typing if this happened in a guild\n\tmember ?GuildMember\n}","name":"TypingStartEvent","parent_name":"","return_type":"","pos":{"len":27,"line_nr":1365,"pos":32104,"col":0,"last_line":1378},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn TypingStartEvent.parse(j json2.Any, base BaseEvent) !TypingStartEvent","name":"TypingStartEvent.parse","parent_name":"","return_type":"!TypingStartEvent","pos":{"len":76,"line_nr":1380,"pos":32409,"col":0,"last_line":1404},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct UserUpdateEvent {\n\tBaseEvent\npub:\n\tuser User\n}","name":"UserUpdateEvent","parent_name":"","return_type":"","pos":{"len":26,"line_nr":1406,"pos":33006,"col":0,"last_line":1410},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn UserUpdateEvent.parse(j json2.Any, base BaseEvent) !UserUpdateEvent","name":"UserUpdateEvent.parse","parent_name":"","return_type":"!UserUpdateEvent","pos":{"len":74,"line_nr":1412,"pos":33065,"col":0,"last_line":1417},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct VoiceStateUpdateEvent {\n\tBaseEvent\npub:\n\tstate VoiceState\n}","name":"VoiceStateUpdateEvent","parent_name":"","return_type":"","pos":{"len":32,"line_nr":1419,"pos":33214,"col":0,"last_line":1423},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn VoiceStateUpdateEvent.parse(j json2.Any, base BaseEvent) !VoiceStateUpdateEvent","name":"VoiceStateUpdateEvent.parse","parent_name":"","return_type":"!VoiceStateUpdateEvent","pos":{"len":86,"line_nr":1425,"pos":33286,"col":0,"last_line":1430},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct VoiceServerUpdateEvent {\n\tBaseEvent\npub:\n\t// Voice connection token\n\ttoken string\n\t// Guild this voice server update is for\n\tguild_id Snowflake\n\t// Voice server host\n\tendpoint ?string\n}","name":"VoiceServerUpdateEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":1432,"pos":33460,"col":0,"last_line":1441},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn VoiceServerUpdateEvent.parse(j json2.Any, base BaseEvent) !VoiceServerUpdateEvent","name":"VoiceServerUpdateEvent.parse","parent_name":"","return_type":"!VoiceServerUpdateEvent","pos":{"len":88,"line_nr":1443,"pos":33658,"col":0,"last_line":1462},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct WebhooksUpdateEvent {\n\tBaseEvent\npub:\n\t// ID of the channel\n\tchannel_id Snowflake\n\t// ID of the guild\n\tguild_id Snowflake\n}","name":"WebhooksUpdateEvent","parent_name":"","return_type":"","pos":{"len":30,"line_nr":1464,"pos":34159,"col":0,"last_line":1471},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn WebhooksUpdateEvent.parse(j json2.Any, base BaseEvent) !WebhooksUpdateEvent","name":"WebhooksUpdateEvent.parse","parent_name":"","return_type":"!WebhooksUpdateEvent","pos":{"len":82,"line_nr":1473,"pos":34295,"col":0,"last_line":1486},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct InteractionCreateEvent {\n\tBaseEvent\npub:\n\tinteraction Interaction\n}","name":"InteractionCreateEvent","parent_name":"","return_type":"","pos":{"len":33,"line_nr":1488,"pos":34676,"col":0,"last_line":1492},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn InteractionCreateEvent.parse(j json2.Any, base BaseEvent) !InteractionCreateEvent","name":"InteractionCreateEvent.parse","parent_name":"","return_type":"!InteractionCreateEvent","pos":{"len":88,"line_nr":1494,"pos":34756,"col":0,"last_line":1499},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct StageInstanceCreateEvent {\n\tBaseEvent\npub:\n\tinstance StageInstance\n}","name":"StageInstanceCreateEvent","parent_name":"","return_type":"","pos":{"len":35,"line_nr":1501,"pos":34940,"col":0,"last_line":1505},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn StageInstanceCreateEvent.parse(j json2.Any, base BaseEvent) !StageInstanceCreateEvent","name":"StageInstanceCreateEvent.parse","parent_name":"","return_type":"!StageInstanceCreateEvent","pos":{"len":92,"line_nr":1507,"pos":35021,"col":0,"last_line":1512},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct StageInstanceUpdateEvent {\n\tBaseEvent\npub:\n\tinstance StageInstance\n}","name":"StageInstanceUpdateEvent","parent_name":"","return_type":"","pos":{"len":35,"line_nr":1514,"pos":35210,"col":0,"last_line":1518},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn StageInstanceUpdateEvent.parse(j json2.Any, base BaseEvent) !StageInstanceUpdateEvent","name":"StageInstanceUpdateEvent.parse","parent_name":"","return_type":"!StageInstanceUpdateEvent","pos":{"len":92,"line_nr":1520,"pos":35291,"col":0,"last_line":1525},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct StageInstanceDeleteEvent {\n\tBaseEvent\npub:\n\tinstance StageInstance\n}","name":"StageInstanceDeleteEvent","parent_name":"","return_type":"","pos":{"len":35,"line_nr":1527,"pos":35480,"col":0,"last_line":1531},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn StageInstanceDeleteEvent.parse(j json2.Any, base BaseEvent) !StageInstanceDeleteEvent","name":"StageInstanceDeleteEvent.parse","parent_name":"","return_type":"!StageInstanceDeleteEvent","pos":{"len":92,"line_nr":1533,"pos":35561,"col":0,"last_line":1538},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"struct Events {\npub mut:\n\ton_raw_event                              EventController[DispatchEvent]\n\ton_ready                                  EventController[ReadyEvent]\n\ton_resumed                                EventController[ResumedEvent]\n\ton_application_command_permissions_update EventController[ApplicationCommandPermissionsUpdateEvent]\n\ton_auto_moderation_rule_create            EventController[AutoModerationRuleCreateEvent]\n\ton_auto_moderation_rule_update            EventController[AutoModerationRuleUpdateEvent]\n\ton_auto_moderation_rule_delete            EventController[AutoModerationRuleDeleteEvent]\n\ton_auto_moderation_action_execution       EventController[AutoModerationActionExecutionEvent]\n\ton_channel_create                         EventController[ChannelCreateEvent]\n\ton_channel_update                         EventController[ChannelUpdateEvent]\n\ton_channel_delete                         EventController[ChannelDeleteEvent]\n\ton_thread_create                          EventController[ThreadCreateEvent]\n\ton_thread_update                          EventController[ThreadUpdateEvent]\n\ton_thread_delete                          EventController[ThreadDeleteEvent]\n\ton_thread_list_sync                       EventController[ThreadListSyncEvent]\n\ton_thread_member_update                   EventController[ThreadMemberUpdateEvent]\n\ton_channel_pins_update                    EventController[ChannelPinsUpdateEvent]\n\ton_entitlement_create                     EventController[EntitlementCreateEvent]\n\ton_entitlement_update                     EventController[EntitlementUpdateEvent]\n\ton_entitlement_delete                     EventController[EntitlementDeleteEvent]\n\ton_guild_create                           EventController[GuildCreateEvent]\n\ton_guild_update                           EventController[GuildUpdateEvent]\n\ton_guild_delete                           EventController[GuildDeleteEvent]\n\ton_guild_audit_log_entry_create           EventController[GuildAuditLogEntryCreateEvent]\n\ton_guild_ban_add                          EventController[GuildBanAddEvent]\n\ton_guild_ban_remove                       EventController[GuildBanRemoveEvent]\n\ton_guild_emojis_update                    EventController[GuildEmojisUpdateEvent]\n\ton_guild_stickers_update                  EventController[GuildStickersUpdateEvent]\n\ton_guild_integrations_update              EventController[GuildIntegrationsUpdateEvent]\n\ton_guild_member_add                       EventController[GuildMemberAddEvent]\n\ton_guild_member_remove                    EventController[GuildMemberRemoveEvent]\n\ton_guild_member_update                    EventController[GuildMemberUpdateEvent]\n\ton_guild_members_chunk                    EventController[GuildMembersChunkEvent]\n\ton_guild_role_create                      EventController[GuildRoleCreateEvent]\n\ton_guild_role_update                      EventController[GuildRoleUpdateEvent]\n\ton_guild_role_delete                      EventController[GuildRoleDeleteEvent]\n\ton_guild_scheduled_event_create           EventController[GuildScheduledEventCreateEvent]\n\ton_guild_scheduled_event_update           EventController[GuildScheduledEventUpdateEvent]\n\ton_guild_scheduled_event_delete           EventController[GuildScheduledEventDeleteEvent]\n\ton_guild_scheduled_event_user_add         EventController[GuildScheduledEventUserAddEvent]\n\ton_guild_scheduled_event_user_remove      EventController[GuildScheduledEventUserRemoveEvent]\n\ton_integration_create                     EventController[IntegrationCreateEvent]\n\ton_integration_update                     EventController[IntegrationUpdateEvent]\n\ton_integration_delete                     EventController[IntegrationDeleteEvent]\n\ton_invite_create                          EventController[InviteCreateEvent]\n\ton_invite_delete                          EventController[InviteDeleteEvent]\n\ton_message_create                         EventController[MessageCreateEvent]\n\ton_message_update                         EventController[MessageUpdateEvent]\n\ton_message_delete                         EventController[MessageDeleteEvent]\n\ton_message_delete_bulk                    EventController[MessageDeleteBulkEvent]\n\ton_message_reaction_add                   EventController[MessageReactionAddEvent]\n\ton_message_reaction_remove                EventController[MessageReactionRemoveEvent]\n\ton_message_reaction_remove_all            EventController[MessageReactionRemoveAllEvent]\n\ton_message_reaction_remove_emoji          EventController[MessageReactionRemoveEmojiEvent]\n\ton_presence_update                        EventController[PresenceUpdateEvent]\n\ton_typing_start                           EventController[TypingStartEvent]\n\ton_user_update                            EventController[UserUpdateEvent]\n\ton_voice_state_update                     EventController[VoiceStateUpdateEvent]\n\ton_voice_server_update                    EventController[VoiceServerUpdateEvent]\n\ton_webhooks_update                        EventController[WebhooksUpdateEvent]\n\ton_interaction_create                     EventController[InteractionCreateEvent]\n\ton_stage_instance_create                  EventController[StageInstanceCreateEvent]\n\ton_stage_instance_update                  EventController[StageInstanceUpdateEvent]\n\ton_stage_instance_delete                  EventController[StageInstanceDeleteEvent]\n}","name":"Events","parent_name":"","return_type":"","pos":{"len":17,"line_nr":1540,"pos":35750,"col":0,"last_line":1606},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (mut gc GatewayClient) latency() f64","name":"latency","parent_name":"GatewayClient","return_type":"f64","pos":{"len":43,"line_nr":484,"pos":13125,"col":0,"last_line":488},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (mut c GatewayClient) launch() !","name":"launch","parent_name":"GatewayClient","return_type":"!","pos":{"len":39,"line_nr":460,"pos":12303,"col":0,"last_line":482},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\events.v","content":"fn (mut c GatewayClient) process_dispatch(event DispatchEvent) !bool","name":"process_dispatch","parent_name":"GatewayClient","return_type":"!bool","pos":{"len":72,"line_nr":2281,"pos":69414,"col":0,"last_line":2291},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (mut gc GatewayClient) request_guild_members(params RequestGuildMembersParams) !","name":"request_guild_members","parent_name":"GatewayClient","return_type":"!","pos":{"len":87,"line_nr":600,"pos":17117,"col":0,"last_line":605},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (mut c GatewayClient) run() !","name":"run","parent_name":"GatewayClient","return_type":"!","pos":{"len":36,"line_nr":376,"pos":10408,"col":0,"last_line":458},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (mut gc GatewayClient) update_presence(params UpdatePresenceParams) !","name":"update_presence","parent_name":"GatewayClient","return_type":"!","pos":{"len":76,"line_nr":666,"pos":18615,"col":0,"last_line":671},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (mut gc GatewayClient) update_voice_state(params VoiceStateUpdateParams) !","name":"update_voice_state","parent_name":"GatewayClient","return_type":"!","pos":{"len":81,"line_nr":633,"pos":17844,"col":0,"last_line":638},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (mut c GatewayClient) init() !","name":"init","parent_name":"GatewayClient","return_type":"!","pos":{"len":37,"line_nr":368,"pos":10207,"col":0,"last_line":374},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"struct GatewayClient {\npub:\n\tsettings        GatewayClientSettings\n\tintents         int\n\tproperties      Properties\n\tlarge_threshold ?int\n\tgateway_url     string = 'wss://gateway.discord.gg'\n\trest            REST\n\ttoken           string\nmut:\n\tclose_code         ?int\n\tlast_heartbeat_req ?time.Time\n\tlast_heartbeat_res ?time.Time\n\tlogger             log.Logger\n\tpresence           ?UpdatePresenceParams\n\tread_timeout       ?time.Duration\n\tready              bool\n\tresume_gateway_url string\n\tsequence           ?int\n\tsession_id         string\n\twrite_timeout      ?time.Duration\n\tclose_event        chan voidptr\npub mut:\n\tuser     User\n\tcache    Cache\n\tevents   Events\n\tuserdata map[string]voidptr\n\tws       &websocket.Client = unsafe { nil }\n}","name":"GatewayClient","parent_name":"","return_type":"","pos":{"len":24,"line_nr":58,"pos":1402,"col":0,"last_line":86},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\file.v","content":"fn (f File) build(i int) json2.Any","name":"build","parent_name":"File","return_type":"x.json2.Any","pos":{"len":38,"line_nr":15,"pos":249,"col":0,"last_line":24},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\file.v","content":"struct File {\npub:\n\tfilename     string  @[required]\n\tcontent_type string = 'application/octet-stream'\n\tdata         []u8    @[required]\n\tdescription  ?string\n}","name":"File","parent_name":"","return_type":"","pos":{"len":15,"line_nr":7,"pos":83,"col":0,"last_line":13},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\file.v","content":"fn build_multipart_with_files(files []File, j json2.Any) (string, string)","name":"build_multipart_with_files","parent_name":"","return_type":"(string, string)","pos":{"len":77,"line_nr":26,"pos":441,"col":0,"last_line":45},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\file.v","content":"enum AttachmentFlags {\n\treserved_0\n\treserved_1\n\t// this attachment has been edited using the remix feature on mobile\n\tis_remix\n}","name":"AttachmentFlags","parent_name":"","return_type":"","pos":{"len":24,"line_nr":48,"pos":861,"col":0,"last_line":53},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\file.v","content":"struct Attachment {\npub:\n\t// attachment id\n\tid Snowflake\n\t// name of file attached\n\tfilename string\n\t// description for the file (max 1024 characters)\n\tdescription ?string\n\t// the attachment's media type\n\tcontent_type ?string\n\t// size of file in bytes\n\tsize int\n\t// source url of file\n\turl string\n\t// a proxied url of file\n\tproxy_url string\n\t// height of file (if image)\n\theight ?int\n\t// width of file (if image)\n\twidth ?int\n\t// whether this attachment is ephemeral\n\tephemeral ?bool\n\t// the duration of the audio file (currently for voice messages)\n\tduration_secs ?time.Duration\n\t// base64 encoded bytearray representing a sampled waveform (currently for voice messages)\n\twaveform ?[]u8\n\t// attachment flags combined as a bitfield\n\tflags ?AttachmentFlags\n}","name":"Attachment","parent_name":"","return_type":"","pos":{"len":21,"line_nr":55,"pos":995,"col":0,"last_line":83},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\file.v","content":"fn Attachment.parse(j json2.Any) !Attachment","name":"Attachment.parse","parent_name":"","return_type":"!Attachment","pos":{"len":48,"line_nr":85,"pos":1757,"col":0,"last_line":148},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"enum GatewayIntents {\n\tguilds\n\tguild_members\n\tguild_moderation\n\tguild_emojis_and_stickers\n\tguild_integrations\n\tguild_webhooks\n\tguild_invites\n\tguild_voice_states\n\tguild_presences\n\tguild_messages\n\tguild_message_reactions\n\tguild_message_typing\n\tdirect_messages\n\tdirect_message_reactions\n\tdirect_message_typing\n\tmessage_content\n\tguild_scheduled_events\n\treserved_17\n\treserved_18\n\treserved_19\n\tauto_moderation_configuration\n\tauto_moderation_execution\n}","name":"GatewayIntents","parent_name":"","return_type":"","pos":{"len":23,"line_nr":10,"pos":106,"col":0,"last_line":33},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn GatewayIntents.all_unprivileged() GatewayIntents","name":"GatewayIntents.all_unprivileged","parent_name":"","return_type":"GatewayIntents","pos":{"len":55,"line_nr":35,"pos":558,"col":0,"last_line":37},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn GatewayIntents.all_privileged() GatewayIntents","name":"GatewayIntents.all_privileged","parent_name":"","return_type":"GatewayIntents","pos":{"len":53,"line_nr":39,"pos":992,"col":0,"last_line":41},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn GatewayIntents.all() GatewayIntents","name":"GatewayIntents.all","parent_name":"","return_type":"GatewayIntents","pos":{"len":42,"line_nr":43,"pos":1112,"col":0,"last_line":45},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"enum GatewayClientSettings {\n\tignore_unknown_events\n\tdont_process\n\tdont_cut_debug\n\tdont_process_guild_events\n\tno_info_block\n\tdont_spawn_events\n}","name":"GatewayClientSettings","parent_name":"","return_type":"","pos":{"len":30,"line_nr":48,"pos":1244,"col":0,"last_line":55},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"struct SessionStartLimit {\npub:\n\t// Total number of session starts the current user is allowed\n\ttotal int\n\t// Remaining number of session starts the current user is allowed\n\tremaining int\n\t// Number of milliseconds after which the limit resets\n\treset_after time.Duration\n\t// Number of identify requests allowed per 5 seconds\n\tmax_concurrency int\n}","name":"SessionStartLimit","parent_name":"","return_type":"","pos":{"len":28,"line_nr":494,"pos":13463,"col":0,"last_line":504},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn SessionStartLimit.parse(j json2.Any) !SessionStartLimit","name":"SessionStartLimit.parse","parent_name":"","return_type":"!SessionStartLimit","pos":{"len":62,"line_nr":506,"pos":13816,"col":0,"last_line":520},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"struct GatewayConfiguration {\npub:\n\t// WSS URL that can be used for connecting to the Gateway\n\turl string\n\t// Recommended number of shards to use when connecting\n\tshards int\n\t// Information on the current session start limit\n\tsession_start_limit SessionStartLimit\n}","name":"GatewayConfiguration","parent_name":"","return_type":"","pos":{"len":31,"line_nr":522,"pos":14230,"col":0,"last_line":530},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn GatewayConfiguration.parse(j json2.Any) !GatewayConfiguration","name":"GatewayConfiguration.parse","parent_name":"","return_type":"!GatewayConfiguration","pos":{"len":68,"line_nr":532,"pos":14501,"col":0,"last_line":545},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (aos ArrayOrSnowflake) build() json2.Any","name":"build","parent_name":"ArrayOrSnowflake","return_type":"x.json2.Any","pos":{"len":47,"line_nr":553,"pos":15116,"col":0,"last_line":558},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"type ArrayOrSnowflake = Snowflake | []Snowflake","name":"ArrayOrSnowflake","parent_name":"","return_type":"","pos":{"len":25,"line_nr":551,"pos":15063,"col":0,"last_line":551},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Used to request all members for a guild or a list of guilds. When initially connecting, if you don't have the GUILD_PRESENCES Gateway Intent, or if the guild is over 75k members, it will only send members who are in voice, plus the member for you (the connecting user). Otherwise, if a guild has over large_threshold members (value in the Gateway Identify), it will only send members who are online, have a role, have a nickname, or are in a voice channel, and if it has under large_threshold members, it will send all members. If a client wishes to receive additional members, they need to explicitly request them via this operation. The server will send Guild Members Chunk events in response with up to 1000 members per chunk until all members that match the request have been sent.","is_multi":false,"pos":{"len":787,"line_nr":560,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (params RequestGuildMembersParams) build() json2.Any","name":"build","parent_name":"RequestGuildMembersParams","return_type":"x.json2.Any","pos":{"len":59,"line_nr":578,"pos":16693,"col":0,"last_line":598},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"struct RequestGuildMembersParams {\npub:\n\t// ID of the guild to get members for\n\tguild_id Snowflake @[required]\n\t// string that username starts with, or an empty string to return all members\n\tquery ?string\n\t// maximum number of members to send matching the `query`; a limit of `0` can be used with an empty string `query` to return all members\n\tlimit ?int\n\t// used to specify if we want the presences of the matched members\n\tpresences ?bool\n\t// used to specify which users you wish to fetch\n\tuser_ids ?ArrayOrSnowflake\n\t// nonce to identify the [Guild Members Chunk](#GuildMembersChunkEvent) response\n\tnonce ?string\n}","name":"RequestGuildMembersParams","parent_name":"","return_type":"","pos":{"len":36,"line_nr":562,"pos":16071,"col":0,"last_line":576},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (params VoiceStateUpdateParams) build() json2.Any","name":"build","parent_name":"VoiceStateUpdateParams","return_type":"x.json2.Any","pos":{"len":56,"line_nr":620,"pos":17577,"col":0,"last_line":631},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"struct VoiceStateUpdateParams {\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n\t// ID of the voice channel client wants to join (null if disconnecting)\n\tchannel_id ?Snowflake\n\t// Whether the client is muted\n\tself_mute bool\n\t// Whether the client deafened\n\tself_deaf bool\n}","name":"VoiceStateUpdateParams","parent_name":"","return_type":"","pos":{"len":33,"line_nr":608,"pos":17301,"col":0,"last_line":618},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"fn (params UpdatePresenceParams) build() json2.Any","name":"build","parent_name":"UpdatePresenceParams","return_type":"x.json2.Any","pos":{"len":54,"line_nr":653,"pos":18314,"col":0,"last_line":664},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\gateway.v","content":"struct UpdatePresenceParams {\npub:\n\t// Unix time (in milliseconds) of when the client went idle, or null if the client is not idle\n\tsince ?time.Time\n\t// User's activities\n\tactivities []Activity\n\t// User's new status\n\tstatus Status = .online\n\t// Whether or not the client is afk\n\tafk bool\n}","name":"UpdatePresenceParams","parent_name":"","return_type":"","pos":{"len":31,"line_nr":641,"pos":18019,"col":0,"last_line":651},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"type GuildFeature = string","name":"GuildFeature","parent_name":"","return_type":"","pos":{"len":21,"line_nr":6,"pos":62,"col":0,"last_line":6},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum VerificationLevel {\n\t// unrestricted\n\tnone_\n\t// must have verified email on account\n\tlow\n\t// must be registered on Discord for longer than 5 minutes\n\tmedium\n\t// must be a member of the server for longer than 10 minutes\n\thigh\n\t// must have a verified phone number\n\tvery_high\n}","name":"VerificationLevel","parent_name":"","return_type":"","pos":{"len":26,"line_nr":8,"pos":94,"col":0,"last_line":19},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum MessageNotificationsLevel {\n\t// members will receive notifications for all messages by default\n\tall_messages\n\t// members will receive notifications only for messages that @mention them by default\n\tonly_mentions\n}","name":"MessageNotificationsLevel","parent_name":"","return_type":"","pos":{"len":34,"line_nr":21,"pos":380,"col":0,"last_line":26},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum ExplicitContentFilterLevel {\n\t// media content will not be scanned\n\tdisabled\n\t// media content sent by members without roles will be scanned\n\tmembers_without_roles\n\t// media content sent by all members will be scanned\n\tall_members\n}","name":"ExplicitContentFilterLevel","parent_name":"","return_type":"","pos":{"len":35,"line_nr":28,"pos":603,"col":0,"last_line":35},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum MFALevel {\n\t// guild has no MFA/2FA requirement for moderation actions\n\tnone_\n\t// guild has a 2FA requirement for moderation actions\n\televated\n}","name":"MFALevel","parent_name":"","return_type":"","pos":{"len":17,"line_nr":37,"pos":846,"col":0,"last_line":42},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct RoleTags {\npub:\n\t// the id of the bot this role belongs to\n\tbot_id ?Snowflake\n\t// the id of the integration this role belongs to\n\tintegration_id ?Snowflake\n\t// whether this is the guild's Booster role\n\tpremium_subscriber bool\n\t// the id of this role's subscription sku and listing\n\tsubscription_listing_id ?Snowflake\n\t// whether this role is available for purchase\n\tavailable_for_purchase bool\n\t// whether this role is a guild's linked role\n\tguild_connections bool\n}","name":"RoleTags","parent_name":"","return_type":"","pos":{"len":19,"line_nr":44,"pos":1001,"col":0,"last_line":58},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn RoleTags.parse(j json2.Any) !RoleTags","name":"RoleTags.parse","parent_name":"","return_type":"!RoleTags","pos":{"len":44,"line_nr":60,"pos":1480,"col":0,"last_line":88},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum RoleFlags {\n\t// role can be selected by members in an onboarding prompt\n\tin_prompt\n}","name":"RoleFlags","parent_name":"","return_type":"","pos":{"len":18,"line_nr":91,"pos":2161,"col":0,"last_line":94},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (role Role) build() json2.Any","name":"build","parent_name":"Role","return_type":"x.json2.Any","pos":{"len":36,"line_nr":124,"pos":2844,"col":0,"last_line":133},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct Role {\npub:\n\t// role id\n\tid Snowflake\n\t// role name\n\tname string\n\t// integer representation of hexadecimal color code\n\tcolor int\n\t// if this role is pinned in the user listing\n\thoist bool\n\t// role icon hash\n\ticon ?string\n\t// role unicode emoji\n\tunicode_emoji ?string\n\t// position of this role\n\tposition int\n\t// permission bit set\n\tpermissions Permissions\n\t// whether this role is managed by an integrations\n\tmanaged bool\n\t// whether this role is mentionable\n\tmentionable bool\n\t// the tags this role has\n\ttags ?RoleTags\n\t// role flags combined as a bitfield\n\tflags RoleFlags\n}","name":"Role","parent_name":"","return_type":"","pos":{"len":15,"line_nr":96,"pos":2256,"col":0,"last_line":122},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn Role.parse(j json2.Any) !Role","name":"Role.parse","parent_name":"","return_type":"!Role","pos":{"len":36,"line_nr":135,"pos":3102,"col":0,"last_line":177},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum SystemChannelFlags {\n\t// Suppress member join notifications\n\tsuppress_join_notifications\n\t// Suppress server boost notifications\n\tsuppress_premium_subscriptions\n\t// Suppress server setup tips\n\tsuppress_guild_reminder_notifications\n\t// Hide member join sticker reply buttons\n\tsuppress_join_notification_replies\n\t// Suppress role subscription purchase and renewal notifications\n\tsuppress_role_subscription_purchase_notifications\n\t// Hide role subscription sticker reply buttons\n\tsuppress_role_subscription_purchase_notifications_replies\n}","name":"SystemChannelFlags","parent_name":"","return_type":"","pos":{"len":27,"line_nr":180,"pos":4015,"col":0,"last_line":193},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum PremiumTier {\n\t// guild has not unlocked any Server Boost perks\n\tnone_\n\t// guild has unlocked Server Boost level 1 perks\n\ttier_1\n\t// guild has unlocked Server Boost level 2 perks\n\ttier_2\n\t// guild has unlocked Server Boost level 3 perks\n\ttier_3\n}","name":"PremiumTier","parent_name":"","return_type":"","pos":{"len":20,"line_nr":195,"pos":4562,"col":0,"last_line":204},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum NSFWLevel {\n\tdefault\n\texplicit\n\tsafe\n\tage_restricted\n}","name":"NSFWLevel","parent_name":"","return_type":"","pos":{"len":18,"line_nr":206,"pos":4819,"col":0,"last_line":211},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (wc WelcomeChannel) build() json2.Any","name":"build","parent_name":"WelcomeChannel","return_type":"x.json2.Any","pos":{"len":44,"line_nr":251,"pos":5818,"col":0,"last_line":266},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct WelcomeChannel {\npub:\n\t// the channel's id\n\tchannel_id Snowflake @[required]\n\t// the description shown for the channel\n\tdescription string @[required]\n\t// the emoji id, if the emoji is custom\n\temoji_id ?Snowflake\n\t// the emoji name if custom, the unicode character if standard, or `none` if no emoji is set\n\temoji_name ?string\n}","name":"WelcomeChannel","parent_name":"","return_type":"","pos":{"len":25,"line_nr":213,"pos":4884,"col":0,"last_line":223},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn WelcomeChannel.parse(j json2.Any) !WelcomeChannel","name":"WelcomeChannel.parse","parent_name":"","return_type":"!WelcomeChannel","pos":{"len":56,"line_nr":225,"pos":5225,"col":0,"last_line":249},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct WelcomeScreen {\npub:\n\t// the server description shown in the welcome screen\n\tdescription ?string\n\t// the channels shown in the welcome screen, up to 5\n\twelcome_channels []WelcomeChannel\n}","name":"WelcomeScreen","parent_name":"","return_type":"","pos":{"len":24,"line_nr":268,"pos":6140,"col":0,"last_line":274},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn WelcomeScreen.parse(j json2.Any) !WelcomeScreen","name":"WelcomeScreen.parse","parent_name":"","return_type":"!WelcomeScreen","pos":{"len":54,"line_nr":276,"pos":6340,"col":0,"last_line":295},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct PartialGuild {\npub:\n\t// guild id\n\tid Snowflake\n\t// guild name (2-100 characters, excluding trailing and leading whitespace)\n\tname string\n\t// icon hash\n\ticon ?string\n\t// icon hash, returned when in the template object\n\ticon_hash ?string\n\t// true if the user is the owner of the guild\n\towner ?bool\n\t// total permissions for the user in the guild (excludes overwrites and implicit permissions)\n\tpermissions ?Permissions\n\t// verification level required for the guild\n\tverification_level ?VerificationLevel\n\t// default message notifications level\n\tdefault_message_notifications ?MessageNotificationsLevel\n\t// explicit content filter level\n\texplicit_content_filter ?ExplicitContentFilterLevel\n\t// roles in the guild\n\troles ?[]Role\n\t// enabled guild features\n\tfeatures ?[]GuildFeature\n\t// the id of the channel where guild notices such as welcome messages and boost events are posted\n\tsystem_channel_id ?Snowflake\n\t// system channel flags\n\tsystem_channel_flags ?SystemChannelFlags\n\t// approximate number of members in this guild, returned from the `GET /guilds/<id>` and `/users/@me/guilds` endpoints when `with_counts` is true\n\tapproximate_member_count ?int\n\t// approximate number of non-offline members in this guild, returned from the `GET /guilds/<id>` and `/users/@me/guilds` endpoints when `with_counts` is true\n\tapproximate_presence_count ?int\n}","name":"PartialGuild","parent_name":"","return_type":"","pos":{"len":23,"line_nr":297,"pos":6855,"col":0,"last_line":329},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn PartialGuild.parse(j json2.Any) !PartialGuild","name":"PartialGuild.parse","parent_name":"","return_type":"!PartialGuild","pos":{"len":52,"line_nr":331,"pos":8213,"col":0,"last_line":422},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params FetchMyGuildsParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchMyGuildsParams","return_type":"net.urllib.Values","pos":{"len":70,"line_nr":437,"pos":10488,"col":0,"last_line":452},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct FetchMyGuildsParams {\npub:\n\t// get guilds before this guild ID\n\tbefore ?Snowflake\n\t// get guilds after this guild ID\n\tafter ?Snowflake\n\t// max number of guilds to return (1-200)\n\tlimit ?int\n\t// include approximate member and presence counts in response\n\twith_counts ?bool\n}","name":"FetchMyGuildsParams","parent_name":"","return_type":"","pos":{"len":30,"line_nr":425,"pos":10202,"col":0,"last_line":435},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct UnavailableGuild {\npub:\n\tid          Snowflake\n\tunavailable bool\n}","name":"UnavailableGuild","parent_name":"","return_type":"","pos":{"len":27,"line_nr":462,"pos":11183,"col":0,"last_line":466},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn UnavailableGuild.parse(j json2.Any) !UnavailableGuild","name":"UnavailableGuild.parse","parent_name":"","return_type":"!UnavailableGuild","pos":{"len":60,"line_nr":468,"pos":11262,"col":0,"last_line":480},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (g Guild) get_role(role_id Snowflake) ?Role","name":"get_role","parent_name":"Guild","return_type":"?Role","pos":{"len":50,"line_nr":566,"pos":14913,"col":0,"last_line":573},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (g Guild) get_emoji(emoji_id Snowflake) ?Emoji","name":"get_emoji","parent_name":"Guild","return_type":"?Emoji","pos":{"len":53,"line_nr":575,"pos":15053,"col":0,"last_line":582},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (g Guild) get_sticker(sticker_id Snowflake) ?Sticker","name":"get_sticker","parent_name":"Guild","return_type":"?Sticker","pos":{"len":59,"line_nr":584,"pos":15202,"col":0,"last_line":591},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct Guild {\npub:\n\t// guild id\n\tid Snowflake\n\t// guild name (2-100 characterrs, excluding trailing and leading whitespace)\n\tname string\n\t// icon hash\n\ticon ?string\n\t// icon hash, returned when in the template object\n\ticon_hash ?string\n\t// splash hash\n\tsplash ?string\n\t// discovery splash hash; only present for guilds with the \"DISCOVERABLE\" feature\n\tdiscovery_splash ?string\n\t// id of owner\n\towner_id Snowflake\n\t// id of afk channel\n\tafk_channel_id ?Snowflake\n\t// afk timeout\n\tafk_timeout time.Duration\n\t// true if the server widget is enabled\n\twidget_enabled ?bool\n\t// the channel id that the widget will generate an invite to, or `none` if set to no invite\n\twidget_channel_id ?Snowflake\n\t// verification level required for the guild\n\tverification_level VerificationLevel\n\t// default message notifications level\n\tdefault_message_notifications MessageNotificationsLevel\n\t// explicit content filter level\n\texplicit_content_filter ExplicitContentFilterLevel\n\t// roles in the guild\n\troles []Role\n\t// custom guild emojis\n\temojis []Emoji\n\t// enabled guild features\n\tfeatures []GuildFeature\n\t// required MFA level for the guild\n\tmfa_level MFALevel\n\t// application id of the guild creator if it is bot-created\n\tapplication_id ?Snowflake\n\t// the id of the channel where guild notices such as welcome messages and boost events are posted\n\tsystem_channel_id ?Snowflake\n\t// system channel flags\n\tsystem_channel_flags SystemChannelFlags\n\t// the id of the channel where Community guilds can display rules and/or guidelines\n\trules_channel_id ?Snowflake\n\t// the maximum number of presences for the guild (`none` is always returned, apart from largest of guilds)\n\tmax_presences ?int\n\t// the maximum number of members for the guild\n\tmax_members ?int\n\t// the vanity url code for the guild\n\tvanity_url_code ?string\n\t// the description of a guild\n\tdescription ?string\n\t// banner hash\n\tbanner ?string\n\t// premium tier (Server Boost level)\n\tpremium_tier PremiumTier\n\t// the number of boosts this guild currently has\n\tpremium_subscription_count ?int\n\t// the preferred locale of a Community guild; used in server discovery and notices from Discord, and sent in interactions; defaults to \"en-US\"\n\tpreferred_locale string\n\t// the id of the channel where admins and moderators of Community guilds receive notices from Discord\n\tpublic_updates_channel_id ?Snowflake\n\t// the maximum amount of users in a video channel\n\tmax_video_channel_users ?int\n\t// // the maximum amount of users in a stage video channel\n\tmax_stage_video_channel_users ?int\n\t// approximate number of members in this guild, returned from the `GET /guilds/<id>` and `/users/@me/guilds` endpoints when `with_counts` is `true`\n\tapproximate_member_count ?int\n\t// approximate number of non-offline members in this guild, returned from the `GET /guilds/<id>` and `/users/@me/guilds` endpoints when `with_counts` is `true`\n\tapproximate_presence_count ?int\n\t// the welcome screen of a Community guild, shown to new members, returned in an Invite's guild object\n\twelcome_screen ?WelcomeScreen\n\t// guild NSFW level\n\tnsfw_level NSFWLevel\n\t// custom guild stickers\n\tstickers []Sticker\n\t// whether the guild has the boost progress bar enabled\n\tpremium_progress_bar_enabled bool\n\t// the id of the channel where admins and moderators of Community guilds receive safety alerts from Discord\n\tsafety_alerts_channel_id ?Snowflake\n}","name":"Guild","parent_name":"","return_type":"","pos":{"len":16,"line_nr":482,"pos":11553,"col":0,"last_line":564},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn Guild.internal_parse(j map[string]json2.Any) !Guild","name":"Guild.internal_parse","parent_name":"","return_type":"!Guild","pos":{"len":58,"line_nr":593,"pos":15366,"col":0,"last_line":762},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn Guild.parse(j json2.Any) !Guild","name":"Guild.parse","parent_name":"","return_type":"!Guild","pos":{"len":38,"line_nr":764,"pos":19752,"col":0,"last_line":773},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct Guild2 {\n\tGuild\npub:\n\t// When this guild was joined at\n\tjoined_at time.Time\n\t// `true` if this is considered a large guild\n\tlarge bool\n\t// Total number of members in this guild\n\tmember_count int\n\t// States of members currently in voice channels; lacks the `guild_id` key\n\tvoice_states []VoiceState\n\t// Users in the guild\n\tusers []GuildMember\n\t// Channels in the guild\n\tchannels []Channel\n\t// All active threads in the guild that current user has permission to view\n\tthreads []Channel\n\t// Presences of the members in the guild, will only include non-offline members if the size is greater than `large threshold`\n\tpresences []Presence\n\t// Stage instances in the guild\n\tstage_instances []StageInstance\n\t// Scheduled events in the guild\n\tguild_scheduled_events []GuildScheduledEvent\n}","name":"Guild2","parent_name":"","return_type":"","pos":{"len":17,"line_nr":775,"pos":19956,"col":0,"last_line":798},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn Guild2.internal_parse(j map[string]json2.Any) !Guild2","name":"Guild2.internal_parse","parent_name":"","return_type":"!Guild2","pos":{"len":60,"line_nr":800,"pos":20749,"col":0,"last_line":828},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn Guild2.parse(j json2.Any) !Guild2","name":"Guild2.parse","parent_name":"","return_type":"!Guild2","pos":{"len":40,"line_nr":830,"pos":21842,"col":0,"last_line":839},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum GuildMemberFlags {\n\t// Member has left and rejoined the guild\n\tdid_rejoin\n\t// Member has completed onboarding\n\tcompleted_onboarding\n\t// Member is exempt from guild verification requirements\n\tbypasses_verification\n\t// Member has started onboarding\n\tstarted_onboarding\n}","name":"GuildMemberFlags","parent_name":"","return_type":"","pos":{"len":25,"line_nr":842,"pos":22058,"col":0,"last_line":851},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct GuildMember {\npub mut:\n\t// the user this guild member represents\n\tuser ?User\n\t// this user's guild nickname\n\tnick ?string\n\t// the member's guild avatar hash\n\tavatar ?string\n\t// array of role object ids\n\troles []Snowflake\n\t// when the user joined the guild\n\tjoined_at time.Time\n\t// when the user started boosting the guild\n\tpremium_since ?time.Time\n\t// whether the user is deafened in voice channels\n\tdeaf bool\n\t// whether the user is muted in voice channels\n\tmute bool\n\t// guild member flags represented as a bit set, defaults to 0\n\tflags GuildMemberFlags\n\t// whether the user has not yet passed the guild's Membership Screening requirements\n\tpending ?bool\n\t// total permissions of the member in the channel, including overwrites, returned when in the interaction object\n\tpermissions ?Permissions\n\t// when the user's timeout will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out\n\tcommunication_disabled_until ?time.Time\n}","name":"GuildMember","parent_name":"","return_type":"","pos":{"len":22,"line_nr":854,"pos":22347,"col":0,"last_line":880},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn GuildMember.parse(j json2.Any) !GuildMember","name":"GuildMember.parse","parent_name":"","return_type":"!GuildMember","pos":{"len":50,"line_nr":882,"pos":23356,"col":0,"last_line":950},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct GuildMember2 {\n\tGuildMember\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n}","name":"GuildMember2","parent_name":"","return_type":"","pos":{"len":23,"line_nr":952,"pos":24783,"col":0,"last_line":957},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn GuildMember2.parse(j json2.Any) !GuildMember2","name":"GuildMember2.parse","parent_name":"","return_type":"!GuildMember2","pos":{"len":52,"line_nr":959,"pos":24870,"col":0,"last_line":971},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct PartialGuildMember {\npub:\n\tuser                         ?User\n\tnick                         ?string\n\tavatar                       ?string\n\troles                        ?[]Snowflake\n\tjoined_at                    ?time.Time\n\tpremium_since                ?time.Time\n\tdeaf                         ?bool\n\tmute                         ?bool\n\tflags                        ?GuildMemberFlags\n\tpending                      ?bool\n\tpermissions                  ?Permissions\n\tcommunication_disabled_until ?time.Time\n}","name":"PartialGuildMember","parent_name":"","return_type":"","pos":{"len":29,"line_nr":973,"pos":25175,"col":0,"last_line":987},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn PartialGuildMember.parse(j json2.Any) !PartialGuildMember","name":"PartialGuildMember.parse","parent_name":"","return_type":"!PartialGuildMember","pos":{"len":64,"line_nr":989,"pos":25692,"col":0,"last_line":1077},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params CreateGuildParams) build() json2.Any","name":"build","parent_name":"CreateGuildParams","return_type":"x.json2.Any","pos":{"len":51,"line_nr":1095,"pos":27960,"col":0,"last_line":1130},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct CreateGuildParams {\npub mut:\n\tname                          string                      @[required]\n\ticon                          ?Image\n\tverification_level            ?VerificationLevel\n\tdefault_message_notifications ?MessageNotificationsLevel\n\texplicit_content_filter       ?ExplicitContentFilterLevel\n\troles                         ?[]Role\n\tchannels                      ?[]PartialChannel\n\tafk_channel_id                ?int\n\tafk_timeout                   ?time.Duration\n\tsystem_channel_id             ?int\n\tsystem_channel_flags          ?SystemChannelFlags\n}","name":"CreateGuildParams","parent_name":"","return_type":"","pos":{"len":28,"line_nr":1080,"pos":27384,"col":0,"last_line":1093},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct GuildPreview {\npub:\n\t// guild id\n\tid Snowflake\n\t// guild name (2-100 characters)\n\tname string\n\t// icon hash\n\ticon ?string\n\t// splash hash\n\tsplash ?string\n\t// discovery splash hash\n\tdiscovery_splash ?string\n\t// custom guild emojis\n\temojis []Emoji\n\t// enabled guild features\n\tfeatures []GuildFeature\n\t// approximate number of members in this guild\n\tapproximate_member_count int\n\t// approximate number of online members in this guild\n\tapproximate_presence_count int\n\t// the description for the guild\n\tdescription ?string\n\t// custom guild stickers\n\tstickers []Sticker\n}","name":"GuildPreview","parent_name":"","return_type":"","pos":{"len":23,"line_nr":1140,"pos":29427,"col":0,"last_line":1164},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn GuildPreview.parse(j json2.Any) !GuildPreview","name":"GuildPreview.parse","parent_name":"","return_type":"!GuildPreview","pos":{"len":52,"line_nr":1166,"pos":30005,"col":0,"last_line":1211},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditGuildParams) build() json2.Any","name":"build","parent_name":"EditGuildParams","return_type":"x.json2.Any","pos":{"len":49,"line_nr":1263,"pos":33928,"col":0,"last_line":1385},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditGuildParams {\npub mut:\n\t// guild name\n\tname ?string\n\t// verification level\n\tverification_level ?VerificationLevel = unsafe { VerificationLevel(discord.sentinel_int) }\n\t// default message notification level\n\tdefault_message_notifications ?MessageNotificationsLevel = unsafe { MessageNotificationsLevel(discord.sentinel_int) }\n\t// explicit content filter level\n\texplicit_content_filter ?ExplicitContentFilterLevel = unsafe { ExplicitContentFilterLevel(discord.sentinel_int) }\n\t// id for afk channel\n\tafk_channel_id ?Snowflake = discord.sentinel_snowflake\n\t// afk timeout in seconds, can be set to: 60, 300, 900, 1800, 3600\n\tafk_timeout ?time.Duration\n\t// base64 1024x1024 png/jpeg/gif image for the guild icon (can be animated gif when the server has the ANIMATED_ICON feature)\n\ticon ?Image = discord.sentinel_image\n\t// user id to transfer guild ownership to (must be owner)\n\towner_id ?Snowflake\n\t// base64 16:9 png/jpeg image for the guild splash (when the server has the INVITE_SPLASH feature)\n\tsplash ?Image = discord.sentinel_image\n\t// base64 16:9 png/jpeg image for the guild discovery splash (when the server has the DISCOVERABLE feature)\n\tdiscovery_splash ?Image = discord.sentinel_image\n\t// base64 16:9 png/jpeg image for the guild banner (when the server has the BANNER feature; can be animated gif when the server has the ANIMATED_BANNER feature)\n\tbanner ?Image = discord.sentinel_image\n\t// the id of the channel where guild notices such as welcome messages and boost events are posted\n\tsystem_channel_id ?Snowflake = discord.sentinel_snowflake\n\t// system channel flags\n\tsystem_channel_flags ?SystemChannelFlags\n\t// the id of the channel where Community guilds display rules and/or guidelines\n\trules_channel_id ?Snowflake = discord.sentinel_snowflake\n\t// the id of the channel where admins and moderators of Community guilds receive notices from Discord\n\tpublic_updates_channel_id ?Snowflake = discord.sentinel_snowflake\n\t// the preferred locale of a Community guild used in server discovery and notices from Discord; defaults to \"en-US\"\n\tpreferred_locale ?string = discord.sentinel_string\n\t// enabled guild features\n\tfeatures ?[]GuildFeature\n\t// the description for the guild\n\tdescription ?string = discord.sentinel_string\n\t// whether the guild's boost progress bar should be enabled\n\tpremium_progress_bar_enabled ?bool\n\t// the id of the channel where admins and moderators of Community guilds receive safety alerts from Discord\n\tsafety_alerts_channel_id ?Snowflake = discord.sentinel_snowflake\n\treason                   ?string\n}","name":"EditGuildParams","parent_name":"","return_type":"","pos":{"len":26,"line_nr":1218,"pos":31484,"col":0,"last_line":1261},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditGuildChannelPositionsParams) build() json2.Any","name":"build","parent_name":"EditGuildChannelPositionsParams","return_type":"x.json2.Any","pos":{"len":65,"line_nr":1421,"pos":38693,"col":0,"last_line":1447},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditGuildChannelPositionsParams {\npub mut:\n\t// channel id\n\tid Snowflake @[required]\n\t// sorting position of the channel\n\tposition ?int = discord.sentinel_int\n\t// syncs the permission overwrites with the new parent, if moving to a new category\n\tlock_permissions ?bool = discord.sentinel_bool\n\t// the new parent ID for the channel that is moved\n\tparent_id ?Snowflake = discord.sentinel_snowflake\n}","name":"EditGuildChannelPositionsParams","parent_name":"","return_type":"","pos":{"len":42,"line_nr":1409,"pos":38309,"col":0,"last_line":1419},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params ListGuildMembersParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"ListGuildMembersParams","return_type":"net.urllib.Values","pos":{"len":73,"line_nr":1470,"pos":40189,"col":0,"last_line":1479},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct ListGuildMembersParams {\npub mut:\n\t// max number of members to return (1-1000)\n\tlimit ?int\n\t// the highest user id in the previous page\n\tafter ?Snowflake\n}","name":"ListGuildMembersParams","parent_name":"","return_type":"","pos":{"len":33,"line_nr":1462,"pos":40021,"col":0,"last_line":1468},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params AddGuildMemberParams) build() json2.Any","name":"build","parent_name":"AddGuildMemberParams","return_type":"x.json2.Any","pos":{"len":54,"line_nr":1506,"pos":41500,"col":0,"last_line":1523},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct AddGuildMemberParams {\npub mut:\n\t// an oauth2 access token granted with the `guilds.join` to the bot's application for the user you want to add to the guild\n\taccess_token string @[required]\n\t// value to set user's nickname to\n\tnick ?string\n\t// array of role ids the member is assigned\n\troles ?[]Snowflake\n\t// whether the user is muted in voice channels\n\tmute ?bool\n\t// whether the user is deafened in voice channels\n\tdeaf ?bool\n}","name":"AddGuildMemberParams","parent_name":"","return_type":"","pos":{"len":31,"line_nr":1492,"pos":41058,"col":0,"last_line":1504},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditGuildMemberParams) build() json2.Any","name":"build","parent_name":"EditGuildMemberParams","return_type":"x.json2.Any","pos":{"len":55,"line_nr":1557,"pos":43842,"col":0,"last_line":1610},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditGuildMemberParams {\npub mut:\n\treason ?string\n\t// value to set user's nickname to\n\tnick ?string = discord.sentinel_string\n\t// array of role ids the member is assigned\n\troles ?[]Snowflake = discord.sentinel_snowflakes\n\t// whether the user is muted in voice channels. Will throw a 400 error if the user is not in a voice channel\n\tmute ?bool = discord.sentinel_bool\n\t// whether the user is deafened in voice channels. Will throw a 400 error if the user is not in a voice channel\n\tdeaf ?bool = discord.sentinel_bool\n\t// id of channel to move user to (if they are connected to voice)\n\tchannel_id ?Snowflake = discord.sentinel_snowflake\n\t// when the user's timeout will expire and the user will be able to communicate in the guild again (up to 28 days in the future), set to `none` to remove timeout. Will throw a 403 error if the user has the `administrator` permission or is the owner of the guild\n\tcommunication_disabled_until ?time.Time = discord.sentinel_time\n\t// guild member flags\n\tflags ?GuildMemberFlags = unsafe { GuildMemberFlags(discord.sentinel_int) }\n}","name":"EditGuildMemberParams","parent_name":"","return_type":"","pos":{"len":32,"line_nr":1538,"pos":42822,"col":0,"last_line":1555},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditCurrentMemberParams) build() json2.Any","name":"build","parent_name":"EditCurrentMemberParams","return_type":"x.json2.Any","pos":{"len":57,"line_nr":1628,"pos":45691,"col":0,"last_line":1638},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditCurrentMemberParams {\npub mut:\n\treason ?string\n\t// value to set user's nickname to\n\tnick ?string = discord.sentinel_string\n}","name":"EditCurrentMemberParams","parent_name":"","return_type":"","pos":{"len":34,"line_nr":1621,"pos":45558,"col":0,"last_line":1626},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct Ban {\npub:\n\t// the reason for the ban\n\treason ?string\n\t// the banned user\n\tuser User\n}","name":"Ban","parent_name":"","return_type":"","pos":{"len":14,"line_nr":1669,"pos":47708,"col":0,"last_line":1675},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn Ban.parse(j json2.Any) !Ban","name":"Ban.parse","parent_name":"","return_type":"!Ban","pos":{"len":34,"line_nr":1677,"pos":47807,"col":0,"last_line":1694},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params FetchGuildBansParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchGuildBansParams","return_type":"net.urllib.Values","pos":{"len":71,"line_nr":1707,"pos":48385,"col":0,"last_line":1719},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct FetchGuildBansParams {\npub mut:\n\t// number of users to return (up to maximum 1000)\n\tlimit ?int\n\t// consider only users before given user id\n\tbefore ?Snowflake\n\t// consider only users after given user id\n\tafter ?Snowflake\n}","name":"FetchGuildBansParams","parent_name":"","return_type":"","pos":{"len":31,"line_nr":1697,"pos":48150,"col":0,"last_line":1705},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params CreateGuildBanParams) build() json2.Any","name":"build","parent_name":"CreateGuildBanParams","return_type":"x.json2.Any","pos":{"len":54,"line_nr":1743,"pos":49741,"col":0,"last_line":1749},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct CreateGuildBanParams {\npub mut:\n\treason ?string\n\t// number of seconds to delete messages for, between 0 and 604800 (7 days)\n\tdelete_message_seconds ?time.Duration\n}","name":"CreateGuildBanParams","parent_name":"","return_type":"","pos":{"len":31,"line_nr":1736,"pos":49564,"col":0,"last_line":1741},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 https://discord.com/developers/docs/resources/guild#create-guild-role-json-params","is_multi":false,"pos":{"len":83,"line_nr":1774,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params CreateGuildRoleParams) build() json2.Any","name":"build","parent_name":"CreateGuildRoleParams","return_type":"x.json2.Any","pos":{"len":55,"line_nr":1795,"pos":51865,"col":0,"last_line":1827},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct CreateGuildRoleParams {\npub mut:\n\treason ?string\n\t// name of the role, max 100 characters\n\tname ?string\n\t// bitwise value of the enabled/disabled permissions\n\tpermissions ?Permissions\n\t// RGB color value\n\tcolor ?int\n\t// whether the role should be displayed separately in the sidebar\n\thoist ?bool\n\t// the role's icon image (if the guild has the `ROLE_ICONS` feature)\n\ticon ?Image = discord.sentinel_image\n\t// the role's unicode emoji as a standard emoji (if the guild has the `ROLE_ICONS` feature)\n\tunicode_emoji ?string = discord.sentinel_string\n\t// whether the role should be mentionable\n\tmentionable ?bool\n}","name":"CreateGuildRoleParams","parent_name":"","return_type":"","pos":{"len":32,"line_nr":1776,"pos":51259,"col":0,"last_line":1793},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditGuildRolePositionsParams) build() json2.Any","name":"build","parent_name":"EditGuildRolePositionsParams","return_type":"x.json2.Any","pos":{"len":62,"line_nr":1845,"pos":53193,"col":0,"last_line":1857},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditGuildRolePositionsParams {\npub mut:\n\t// role\n\tid Snowflake @[required]\n\t// sorting position of the role\n\tposition ?int = discord.sentinel_int\n}","name":"EditGuildRolePositionsParams","parent_name":"","return_type":"","pos":{"len":39,"line_nr":1837,"pos":53041,"col":0,"last_line":1843},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditGuildRoleParams) build() json2.Any","name":"build","parent_name":"EditGuildRoleParams","return_type":"x.json2.Any","pos":{"len":53,"line_nr":1889,"pos":54756,"col":0,"last_line":1941},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditGuildRoleParams {\npub mut:\n\treason ?string\n\t// name of the role, max 100 characters\n\tname ?string = discord.sentinel_string\n\t// bitwise value of the enabled/disabled permissions\n\tpermissions ?Permissions = discord.sentinel_permissions\n\t// RGB color value\n\tcolor ?int = discord.sentinel_int\n\t// whether the role should be displayed separately in the sidebar\n\thoist ?bool = discord.sentinel_bool\n\t// the role's icon image (if the guild has the ROLE_ICONS feature)\n\ticon ?Image = discord.sentinel_image\n\t// the role's unicode emoji as a standard emoji (if the guild has the ROLE_ICONS feature)\n\tunicode_emoji ?string = discord.sentinel_string\n\t// whether the role should be mentionable\n\tmentionable ?bool = discord.sentinel_bool\n}","name":"EditGuildRoleParams","parent_name":"","return_type":"","pos":{"len":30,"line_nr":1870,"pos":54068,"col":0,"last_line":1887},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params FetchGuildPruneCountParams) build_values() urllib.Values","name":"build_values","parent_name":"FetchGuildPruneCountParams","return_type":"net.urllib.Values","pos":{"len":71,"line_nr":1978,"pos":57284,"col":0,"last_line":1985},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct FetchGuildPruneCountParams {\npub mut:\n\t// number of days to count prune for (1-30)\n\tdays int\n\t// role(s) to include\n\twith_roles []Snowflake\n}","name":"FetchGuildPruneCountParams","parent_name":"","return_type":"","pos":{"len":37,"line_nr":1970,"pos":57130,"col":0,"last_line":1976},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params BeginGuildPruneParams) build() json2.Any","name":"build","parent_name":"BeginGuildPruneParams","return_type":"x.json2.Any","pos":{"len":55,"line_nr":2006,"pos":58535,"col":0,"last_line":2018},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct BeginGuildPruneParams {\npub mut:\n\t// number of days to prune (1-30)\n\tdays ?int\n\t// whether `pruned` is returned, discouraged for large guilds\n\tcompute_prune_count ?bool\n\t// role(s) to include\n\twith_roles []Snowflake\n\t// reason for the prune\n\treason ?string\n}","name":"BeginGuildPruneParams","parent_name":"","return_type":"","pos":{"len":32,"line_nr":1994,"pos":58264,"col":0,"last_line":2004},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum IntegrationExpireBehavior {\n\tremove_role\n\tkick\n}","name":"IntegrationExpireBehavior","parent_name":"","return_type":"","pos":{"len":34,"line_nr":2049,"pos":60463,"col":0,"last_line":2052},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct IntegrationAccount {\npub:\n\t// id of the account\n\tid string\n\t// name of the account\n\tname string\n}","name":"IntegrationAccount","parent_name":"","return_type":"","pos":{"len":29,"line_nr":2054,"pos":60522,"col":0,"last_line":2060},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn IntegrationAccount.parse(j json2.Any) !IntegrationAccount","name":"IntegrationAccount.parse","parent_name":"","return_type":"!IntegrationAccount","pos":{"len":64,"line_nr":2062,"pos":60632,"col":0,"last_line":2074},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct IntegrationApplication {\npub:\n\t// the id of the app\n\tid Snowflake\n\t// the name of the app\n\tname string\n\t// the icon hash of the app\n\ticon ?string\n\t// the description of the app\n\tdescription string\n\t// the bot associated with this application\n\tbot ?User\n}","name":"IntegrationApplication","parent_name":"","return_type":"","pos":{"len":33,"line_nr":2076,"pos":60933,"col":0,"last_line":2088},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn IntegrationApplication.parse(j json2.Any) !IntegrationApplication","name":"IntegrationApplication.parse","parent_name":"","return_type":"!IntegrationApplication","pos":{"len":72,"line_nr":2090,"pos":61200,"col":0,"last_line":2114},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct Integration {\npub:\n\t// integration id\n\tid Snowflake\n\t// integration name\n\tname string\n\t// integration type (twitch, youtube, discord, or guild_subscription)\n\ttyp string\n\t// is this integration enabled\n\tenabled bool\n\t// is this integration syncing\n\tsyncing ?bool\n\t// id that this integration uses for \"subscribers\"\n\trole_id ?Snowflake\n\t// whether emoticons should be synced for this integration (twitch only currently)\n\tenable_emoticons ?bool\n\t// the behavior of expiring subscribers\n\texpire_behavior ?IntegrationExpireBehavior\n\t// the grace period (in days) before expiring subscribers\n\texpire_grace_period ?time.Duration\n\t// user for this integration\n\tuser ?User\n\t// integration account information\n\taccount ?IntegrationAccount\n\t// when this integration was last synced\n\tsynced_at ?time.Time\n\t// how many subscribers this integration has\n\tsubscriber_count ?int\n\t// has this integration been revoked\n\trevoked ?bool\n\t// The bot/OAuth2 application for discord integrations\n\tapplication ?IntegrationApplication\n\t// the scopes the application has been authorized for\n\tscopes ?[]string\n}","name":"Integration","parent_name":"","return_type":"","pos":{"len":22,"line_nr":2116,"pos":61753,"col":0,"last_line":2150},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn Integration.parse(j json2.Any) !Integration","name":"Integration.parse","parent_name":"","return_type":"!Integration","pos":{"len":50,"line_nr":2152,"pos":62848,"col":0,"last_line":2222},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct PartialIntegration {\npub:\n\t// integration id\n\tid Snowflake\n\t// integration name\n\tname ?string\n\t// integration type (twitch, youtube, discord, or guild_subscription)\n\ttyp ?string\n\t// is this integration enabled\n\tenabled ?bool\n\t// is this integration syncing\n\tsyncing ?bool\n\t// id that this integration uses for \"subscribers\"\n\trole_id ?Snowflake\n\t// whether emoticons should be synced for this integration (twitch only currently)\n\tenable_emoticons ?bool\n\t// the behavior of expiring subscribers\n\texpire_behavior ?IntegrationExpireBehavior\n\t// the grace period (in days) before expiring subscribers\n\texpire_grace_period ?time.Duration\n\t// user for this integration\n\tuser ?User\n\t// integration account information\n\taccount ?IntegrationAccount\n\t// when this integration was last synced\n\tsynced_at ?time.Time\n\t// how many subscribers this integration has\n\tsubscriber_count ?int\n\t// has this integration been revoked\n\trevoked ?bool\n\t// The bot/OAuth2 application for discord integrations\n\tapplication ?IntegrationApplication\n\t// the scopes the application has been authorized for\n\tscopes ?[]string\n}","name":"PartialIntegration","parent_name":"","return_type":"","pos":{"len":29,"line_nr":2224,"pos":64350,"col":0,"last_line":2258},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn PartialIntegration.parse(j json2.Any) !PartialIntegration","name":"PartialIntegration.parse","parent_name":"","return_type":"!PartialIntegration","pos":{"len":64,"line_nr":2260,"pos":65455,"col":0,"last_line":2342},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct Integration2 {\n\tIntegration\npub:\n\t// ID of the guild\n\tguild_id Snowflake\n}","name":"Integration2","parent_name":"","return_type":"","pos":{"len":23,"line_nr":2344,"pos":67120,"col":0,"last_line":2349},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn Integration2.parse(j json2.Any) !Integration2","name":"Integration2.parse","parent_name":"","return_type":"!Integration2","pos":{"len":52,"line_nr":2351,"pos":67207,"col":0,"last_line":2363},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct GuildWidgetSettings {\npub:\n\t// whether the widget is enabled\n\tenabled bool\n\t// the widget channel id\n\tchannel_id ?Snowflake\n}","name":"GuildWidgetSettings","parent_name":"","return_type":"","pos":{"len":30,"line_nr":2379,"pos":68554,"col":0,"last_line":2385},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn GuildWidgetSettings.parse(j json2.Any) !GuildWidgetSettings","name":"GuildWidgetSettings.parse","parent_name":"","return_type":"!GuildWidgetSettings","pos":{"len":66,"line_nr":2387,"pos":68692,"col":0,"last_line":2404},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditGuildWidgetParams) build() json2.Any","name":"build","parent_name":"EditGuildWidgetParams","return_type":"x.json2.Any","pos":{"len":55,"line_nr":2421,"pos":69624,"col":0,"last_line":2434},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditGuildWidgetParams {\npub mut:\n\treason ?string\n\t// whether the widget is enabled\n\tenabled ?bool\n\t// the widget channel id\n\tchannel_id ?Snowflake = discord.sentinel_snowflake\n}","name":"EditGuildWidgetParams","parent_name":"","return_type":"","pos":{"len":32,"line_nr":2412,"pos":69442,"col":0,"last_line":2419},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct GuildWidget {\npub:\n\t// guild id\n\tid Snowflake\n\t// guild name (2-100 characters)\n\tname string\n\t// instant invite for the guilds specified widget invite channel\n\tinstant_invite ?string\n\t// voice and stage channels which are accessible by @everyone\n\tchannels []PartialChannel\n\t// special widget user objects that includes users presence (Limit 100)\n\tmembers []PartialUser\n\t// number of online members in this guild\n\tpresence_count int\n}","name":"GuildWidget","parent_name":"","return_type":"","pos":{"len":22,"line_nr":2444,"pos":70496,"col":0,"last_line":2458},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn GuildWidget.parse(j json2.Any) !GuildWidget","name":"GuildWidget.parse","parent_name":"","return_type":"!GuildWidget","pos":{"len":50,"line_nr":2460,"pos":70942,"col":0,"last_line":2485},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct GuildVanityUrl {\npub:\n\tcode ?string\n\tuses int\n}","name":"GuildVanityUrl","parent_name":"","return_type":"","pos":{"len":25,"line_nr":2492,"pos":72037,"col":0,"last_line":2496},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn GuildVanityUrl.parse(j json2.Any) !GuildVanityUrl","name":"GuildVanityUrl.parse","parent_name":"","return_type":"!GuildVanityUrl","pos":{"len":56,"line_nr":2498,"pos":72097,"col":0,"last_line":2515},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditGuildWelcomeScreenParams) build() json2.Any","name":"build","parent_name":"EditGuildWelcomeScreenParams","return_type":"x.json2.Any","pos":{"len":62,"line_nr":2539,"pos":73548,"col":0,"last_line":2555},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditGuildWelcomeScreenParams {\npub mut:\n\treason ?string\n\t// whether the welcome screen is enabled\n\tenabled ?bool\n\t// channels linked in the welcome screen and their display options\n\twelcome_channels ?[]WelcomeChannel\n\t// the server description to show in the welcome screen\n\tdescription ?string = discord.sentinel_string\n}","name":"EditGuildWelcomeScreenParams","parent_name":"","return_type":"","pos":{"len":39,"line_nr":2528,"pos":73221,"col":0,"last_line":2537},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (po PromptOption) build() json2.Any","name":"build","parent_name":"PromptOption","return_type":"x.json2.Any","pos":{"len":42,"line_nr":2620,"pos":75523,"col":0,"last_line":2637},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct PromptOption {\npub:\n\t// ID of the prompt option\n\tid Snowflake\n\t// IDs for channels a member is added to when the option is selected\n\tchannel_ids []Snowflake\n\t// IDs for roles assigned to a member when the option is selected\n\trole_ids []Snowflake\n\t// Emoji of the option (see below)\n\temoji ?Emoji\n\t// Emoji ID of the option (see below)\n\temoji_id ?Snowflake\n\t// Emoji name of the option (see below)\n\temoji_name ?string\n\t// Whether the emoji is animated (see below)\n\temoji_animated ?bool\n\t// Title of the option\n\ttitle string\n\t// Description of the option\n\tdescription string\n}","name":"PromptOption","parent_name":"","return_type":"","pos":{"len":23,"line_nr":2557,"pos":73992,"col":0,"last_line":2577},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn PromptOption.parse(j json2.Any) !PromptOption","name":"PromptOption.parse","parent_name":"","return_type":"!PromptOption","pos":{"len":52,"line_nr":2579,"pos":74579,"col":0,"last_line":2618},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum PromptType {\n\tmultiple_choice\n\tdropdown\n}","name":"PromptType","parent_name":"","return_type":"","pos":{"len":19,"line_nr":2639,"pos":75995,"col":0,"last_line":2642},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (op OnboardingPrompt) build() json2.Any","name":"build","parent_name":"OnboardingPrompt","return_type":"x.json2.Any","pos":{"len":46,"line_nr":2683,"pos":77228,"col":0,"last_line":2692},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct OnboardingPrompt {\npub:\n\t// ID of the prompt\n\tid Snowflake\n\t// Type of prompt\n\ttyp PromptType\n\t// Options available within the prompt\n\toptions []PromptOption\n\t// Title of the prompt\n\ttitle string\n\t// Indicates whether users are limited to selecting one option for the prompt\n\tsingle_select bool\n\t// Indicates whether the prompt is required before a user completes the onboarding flow\n\trequired bool\n\t// Indicates whether the prompt is present in the onboarding flow. If `false`, the prompt will only appear in the Channels & Roles tab\n\tin_onboarding bool\n}","name":"OnboardingPrompt","parent_name":"","return_type":"","pos":{"len":27,"line_nr":2644,"pos":76047,"col":0,"last_line":2660},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn OnboardingPrompt.parse(j json2.Any) !OnboardingPrompt","name":"OnboardingPrompt.parse","parent_name":"","return_type":"!OnboardingPrompt","pos":{"len":60,"line_nr":2662,"pos":76616,"col":0,"last_line":2681},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Defines the criteria used to satisfy Onboarding constraints that are required for enabling.","is_multi":false,"pos":{"len":93,"line_nr":2694,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"enum OnboardingMode {\n\t// Counts only Default Channels towards constraints\n\tonboarding_default\n\t// Counts Default Channels and Questions towards constraints\n\tonboarding_advanced\n}","name":"OnboardingMode","parent_name":"","return_type":"","pos":{"len":23,"line_nr":2695,"pos":77610,"col":0,"last_line":2700},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct GuildOnboarding {\npub:\n\t// ID of the guild this onboarding is part of\n\tguild_id Snowflake\n\t// Prompts shown during onboarding and in customize community\n\tprompts []OnboardingPrompt\n\t// Channel IDs that members get opted into automatically\n\tdefault_channel_ids []Snowflake\n\t// Whether onboarding is enabled in the guild\n\tenabled bool\n\t// Current mode of onboarding\n\tmode OnboardingMode\n}","name":"GuildOnboarding","parent_name":"","return_type":"","pos":{"len":26,"line_nr":2702,"pos":77795,"col":0,"last_line":2714},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn GuildOnboarding.parse(j json2.Any) !GuildOnboarding","name":"GuildOnboarding.parse","parent_name":"","return_type":"!GuildOnboarding","pos":{"len":58,"line_nr":2716,"pos":78194,"col":0,"last_line":2736},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditGuildOnboardingParams) build() json2.Any","name":"build","parent_name":"EditGuildOnboardingParams","return_type":"x.json2.Any","pos":{"len":59,"line_nr":2757,"pos":79495,"col":0,"last_line":2772},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditGuildOnboardingParams {\npub mut:\n\treason ?string\n\t// Prompts shown during onboarding and in customize community\n\tprompts ?[]OnboardingPrompt\n\t// Channel IDs that members get opted into automatically\n\tdefault_channel_ids ?[]Snowflake\n\t// Whether onboarding is enabled in the guild\n\tenabled ?bool\n\t// Current mode of onboarding\n\tmode ?OnboardingMode\n}","name":"EditGuildOnboardingParams","parent_name":"","return_type":"","pos":{"len":36,"line_nr":2744,"pos":79129,"col":0,"last_line":2755},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditCurrentUserVoiceStateParams) build() json2.Any","name":"build","parent_name":"EditCurrentUserVoiceStateParams","return_type":"x.json2.Any","pos":{"len":65,"line_nr":2794,"pos":80959,"col":0,"last_line":2810},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditCurrentUserVoiceStateParams {\npub mut:\n\t// the id of the channel the user is currently in\n\tchannel_id ?Snowflake\n\t// toggles the user's suppress state\n\tsuppress ?bool\n\t// sets the user's request to speak\n\trequest_to_speak_timestamp ?time.Time = discord.sentinel_time\n}","name":"EditCurrentUserVoiceStateParams","parent_name":"","return_type":"","pos":{"len":42,"line_nr":2784,"pos":80682,"col":0,"last_line":2792},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"fn (params EditUserVoiceStateParams) build() json2.Any","name":"build","parent_name":"EditUserVoiceStateParams","return_type":"x.json2.Any","pos":{"len":58,"line_nr":2835,"pos":82522,"col":0,"last_line":2844},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild.v","content":"struct EditUserVoiceStateParams {\npub mut:\n\t// the id of the channel the user is currently in\n\tchannel_id ?Snowflake\n\t// toggles the user's suppress state\n\tsuppress ?bool\n}","name":"EditUserVoiceStateParams","parent_name":"","return_type":"","pos":{"len":35,"line_nr":2827,"pos":82344,"col":0,"last_line":2833},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"enum GuildScheduledEventPrivacyLevel {\n\t// the scheduled event is only accessible to guild members\n\tguild_only = 2\n}","name":"GuildScheduledEventPrivacyLevel","parent_name":"","return_type":"","pos":{"len":40,"line_nr":6,"pos":62,"col":0,"last_line":9},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"enum GuildScheduledEventStatus {\n\tscheduled = 1\n\tactive\n\tcompleted\n\tcanceled\n}","name":"GuildScheduledEventStatus","parent_name":"","return_type":"","pos":{"len":34,"line_nr":11,"pos":184,"col":0,"last_line":16},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"enum GuildScheduledEventEntityType {\n\tstage_instance = 1\n\tvoice\n\texternal\n}","name":"GuildScheduledEventEntityType","parent_name":"","return_type":"","pos":{"len":38,"line_nr":18,"pos":268,"col":0,"last_line":22},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (md GuildScheduledEventEntityMetadata) build() json2.Any","name":"build","parent_name":"GuildScheduledEventEntityMetadata","return_type":"x.json2.Any","pos":{"len":63,"line_nr":47,"pos":866,"col":0,"last_line":51},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"struct GuildScheduledEventEntityMetadata {\npub:\n\t// location of the event (1-100 characters)\n\tlocation ?string @[required]\n}","name":"GuildScheduledEventEntityMetadata","parent_name":"","return_type":"","pos":{"len":44,"line_nr":24,"pos":349,"col":0,"last_line":28},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn GuildScheduledEventEntityMetadata.parse(j json2.Any) !GuildScheduledEventEntityMetadata","name":"GuildScheduledEventEntityMetadata.parse","parent_name":"","return_type":"!GuildScheduledEventEntityMetadata","pos":{"len":94,"line_nr":30,"pos":479,"col":0,"last_line":45},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"struct GuildScheduledEvent {\npub:\n\t// the id of the scheduled event\n\tid Snowflake\n\t// the guild id which the scheduled event belongs to\n\tguild_id Snowflake\n\t// the channel id in which the scheduled event will be hosted, or null if scheduled entity type is `.external`\n\tchannel_id ?Snowflake\n\t// the id of the user that created the scheduled event\n\tcreator_id ?Snowflake\n\t// the name of the scheduled event (1-100 characters)\n\tname string\n\t// the description of the scheduled event (1-1000 characters)\n\tdescription ?string\n\t// the time the scheduled event will start\n\tscheduled_start_time time.Time\n\t// the time the scheduled event will end, required if `entity_type` is `.external`\n\tscheduled_end_time ?time.Time\n\t// the privacy level of the scheduled event\n\tprivacy_level GuildScheduledEventPrivacyLevel\n\t// the status of the scheduled event\n\tstatus GuildScheduledEventStatus\n\t// the type of the scheduled event\n\tentity_type GuildScheduledEventEntityType\n\t// additional metadata for the guild scheduled event\n\tentity_metadata ?GuildScheduledEventEntityMetadata\n\t// the user that created the scheduled event\n\tcreator ?User\n\t// the number of users subscribed to the scheduled event\n\tuser_count ?int\n\t// the cover image hash of the scheduled event\n\timage ?string\n}","name":"GuildScheduledEvent","parent_name":"","return_type":"","pos":{"len":30,"line_nr":53,"pos":1025,"col":0,"last_line":85},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn GuildScheduledEvent.parse(j json2.Any) !GuildScheduledEvent","name":"GuildScheduledEvent.parse","parent_name":"","return_type":"!GuildScheduledEvent","pos":{"len":66,"line_nr":87,"pos":2293,"col":0,"last_line":159},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (params FetchScheduledEventsParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchScheduledEventsParams","return_type":"net.urllib.Values","pos":{"len":77,"line_nr":168,"pos":4263,"col":0,"last_line":174},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"struct FetchScheduledEventsParams {\npub mut:\n\t// include number of users subscribed to each event\n\twith_user_count ?bool\n}","name":"FetchScheduledEventsParams","parent_name":"","return_type":"","pos":{"len":37,"line_nr":162,"pos":4135,"col":0,"last_line":166},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (params CreateGuildScheduledEventParams) build() json2.Any","name":"build","parent_name":"CreateGuildScheduledEventParams","return_type":"x.json2.Any","pos":{"len":65,"line_nr":209,"pos":5838,"col":0,"last_line":232},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"struct CreateGuildScheduledEventParams {\npub mut:\n\treason ?string\n\t// the channel id of the scheduled event.\n\tchannel_id ?Snowflake\n\t// the entity metadata of the scheduled event\n\tentity_metadata ?GuildScheduledEventEntityMetadata\n\t// the name of the scheduled event\n\tname string @[required]\n\t// the privacy level of the scheduled event\n\tprivacy_level GuildScheduledEventPrivacyLevel = .guild_only\n\t// the time to schedule the scheduled event\n\tscheduled_start_time time.Time @[required]\n\t// the time when the scheduled event is scheduled to end\n\tscheduled_end_time ?time.Time\n\t// the description of the scheduled event\n\tdescription ?string\n\t// the entity type of the scheduled event\n\tentity_type GuildScheduledEventEntityType @[required]\n\t// the cover image of the scheduled event\n\timage ?Image\n}","name":"CreateGuildScheduledEventParams","parent_name":"","return_type":"","pos":{"len":42,"line_nr":186,"pos":5036,"col":0,"last_line":207},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (params EditGuildScheduledEventParams) build() json2.Any","name":"build","parent_name":"EditGuildScheduledEventParams","return_type":"x.json2.Any","pos":{"len":63,"line_nr":277,"pos":8633,"col":0,"last_line":324},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"struct EditGuildScheduledEventParams {\npub mut:\n\treason ?string\n\t// the channel id of the scheduled event, set to `none` if changing entity type to `.external`\n\tchannel_id ?Snowflake = discord.sentinel_snowflake\n\t// the entity metadata of the scheduled event\n\tentity_metadata ?GuildScheduledEventEntityMetadata\n\t// sentinel\n\t// the name of the scheduled event\n\tname ?string\n\t// the privacy level of the scheduled event\n\tprivacy_level ?GuildScheduledEventPrivacyLevel\n\t// the time to schedule the scheduled event\n\tscheduled_start_time ?time.Time\n\t// the time when the scheduled event is scheduled to end\n\tscheduled_end_time ?time.Time\n\t// the description of the scheduled event\n\tdescription ?string\n\t// the entity type of the scheduled event\n\tentity_type ?GuildScheduledEventEntityType\n\t// the status of the scheduled event\n\tstatus ?GuildScheduledEventStatus\n\t// the cover image of the scheduled event\n\timage ?Image = discord.sentinel_image\n}","name":"EditGuildScheduledEventParams","parent_name":"","return_type":"","pos":{"len":40,"line_nr":251,"pos":7702,"col":0,"last_line":275},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"struct GuildScheduledEventUser {\npub:\n\t// the scheduled event id which the user subscribed to\n\tguild_scheduled_event_id Snowflake\n\t// user which subscribed to an event\n\tuser User\n\t// guild member data for this user for the guild which this event belongs to, if any\n\tmember ?GuildMember\n}","name":"GuildScheduledEventUser","parent_name":"","return_type":"","pos":{"len":34,"line_nr":343,"pos":11040,"col":0,"last_line":351},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn GuildScheduledEventUser.parse(j json2.Any) !GuildScheduledEventUser","name":"GuildScheduledEventUser.parse","parent_name":"","return_type":"!GuildScheduledEventUser","pos":{"len":74,"line_nr":353,"pos":11333,"col":0,"last_line":370},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"fn (params FetchGuildScheduledEventUsersParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchGuildScheduledEventUsersParams","return_type":"net.urllib.Values","pos":{"len":86,"line_nr":385,"pos":12120,"col":0,"last_line":400},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_scheduled_event.v","content":"struct FetchGuildScheduledEventUsersParams {\npub mut:\n\t// number of users to return (up to maximum 100)\n\tlimit ?int\n\t// include guild member data if it exists\n\twith_member ?bool\n\t// consider only users before given user id\n\tbefore ?Snowflake\n\t// consider only users after given user id\n\tafter ?Snowflake\n}","name":"FetchGuildScheduledEventUsersParams","parent_name":"","return_type":"","pos":{"len":46,"line_nr":373,"pos":11809,"col":0,"last_line":383},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"struct GuildTemplate {\npub:\n\t// the template code (unique ID)\n\tcode string\n\t// template name\n\tname string\n\t// the description for the template\n\tdescription ?string\n\t// number of times this template has been used\n\tusage_count int\n\t// the ID of the user who created the template\n\tcreator_id Snowflake\n\t// the user who created the template\n\tcreator User\n\t// when this template was created\n\tcreated_at time.Time\n\t// when this template was last synced to the source guild\n\tupdated_at time.Time\n\t// the ID of the guild this template is based on\n\tsource_guild_id Snowflake\n\t// the guild snapshot this template contains\n\tserialized_source_guild PartialGuild\n\t// whether the template has unsynced changes\n\tis_dirty ?bool\n}","name":"GuildTemplate","parent_name":"","return_type":"","pos":{"len":24,"line_nr":6,"pos":62,"col":0,"last_line":30},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn GuildTemplate.parse(j json2.Any) !GuildTemplate","name":"GuildTemplate.parse","parent_name":"","return_type":"!GuildTemplate","pos":{"len":54,"line_nr":32,"pos":781,"col":0,"last_line":63},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (params CreateGuildFromGuildTemplateParams) build() json2.Any","name":"build","parent_name":"CreateGuildFromGuildTemplateParams","return_type":"x.json2.Any","pos":{"len":68,"line_nr":79,"pos":2213,"col":0,"last_line":87},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"struct CreateGuildFromGuildTemplateParams {\npub mut:\n\t// name of the guild (2-100 characters)\n\tname string @[required]\n\t// base64 128x128 image for the guild icon\n\ticon ?Image\n}","name":"CreateGuildFromGuildTemplateParams","parent_name":"","return_type":"","pos":{"len":45,"line_nr":71,"pos":2030,"col":0,"last_line":77},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (params CreateGuildTemplateParams) build() json2.Any","name":"build","parent_name":"CreateGuildTemplateParams","return_type":"x.json2.Any","pos":{"len":59,"line_nr":114,"pos":3519,"col":0,"last_line":126},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"struct CreateGuildTemplateParams {\npub mut:\n\t// name of the template (1-100 characters)\n\tname string @[required]\n\t// description for the template (0-120 characters)\n\tdescription ?string = discord.sentinel_string\n}","name":"CreateGuildTemplateParams","parent_name":"","return_type":"","pos":{"len":36,"line_nr":106,"pos":3308,"col":0,"last_line":112},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"fn (params EditGuildTemplateParams) build() json2.Any","name":"build","parent_name":"EditGuildTemplateParams","return_type":"x.json2.Any","pos":{"len":57,"line_nr":149,"pos":4861,"col":0,"last_line":162},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\guild_template.v","content":"struct EditGuildTemplateParams {\npub mut:\n\t// name of the template (1-100 characters)\n\tname ?string\n\t// description for the template (0-120 characters)\n\tdescription ?string = discord.sentinel_string\n}","name":"EditGuildTemplateParams","parent_name":"","return_type":"","pos":{"len":34,"line_nr":141,"pos":4663,"col":0,"last_line":147},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\http.v","content":"struct RequestOptions {\n\tauthenticate   bool = true\n\treason         ?string\n\tjson           ?json2.Any\n\tbody           ?string\n\tcommon_headers map[http.CommonHeader]string\n\tquery_params   ?urllib.Values\n\theaders        map[string]string\n}","name":"RequestOptions","parent_name":"","return_type":"","pos":{"len":25,"line_nr":10,"pos":123,"col":0,"last_line":18},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\http.v","content":"fn REST.do_request(rest &REST, method http.Method, route string, options RequestOptions) !http.Response","name":"REST.do_request","parent_name":"","return_type":"!net.http.Response","pos":{"len":107,"line_nr":20,"pos":367,"col":0,"last_line":144},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\http.v","content":"fn multipart_form_body(files map[string][]http.FileData) (string, string)","name":"multipart_form_body","parent_name":"","return_type":"(string, string)","pos":{"len":77,"line_nr":151,"pos":3181,"col":0,"last_line":179},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"interface Image {\n\tdata []u8\n\tis_image()\n\tcontent_type() string\n\tbuild() string\n}","name":"Image","parent_name":"","return_type":"","pos":{"len":85,"line_nr":4,"pos":40,"col":0,"last_line":9},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (ji JPEGImage) content_type() string","name":"content_type","parent_name":"JPEGImage","return_type":"string","pos":{"len":43,"line_nr":18,"pos":213,"col":0,"last_line":20},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (ji JPEGImage) build() string","name":"build","parent_name":"JPEGImage","return_type":"string","pos":{"len":36,"line_nr":22,"pos":283,"col":0,"last_line":24},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"struct JPEGImage {\npub:\n\tdata []u8 @[required]\n}","name":"JPEGImage","parent_name":"","return_type":"","pos":{"len":20,"line_nr":11,"pos":127,"col":0,"last_line":14},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (_ PNGImage) content_type() string","name":"content_type","parent_name":"PNGImage","return_type":"string","pos":{"len":41,"line_nr":33,"pos":478,"col":0,"last_line":35},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (pi PNGImage) build() string","name":"build","parent_name":"PNGImage","return_type":"string","pos":{"len":35,"line_nr":37,"pos":545,"col":0,"last_line":39},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"struct PNGImage {\npub:\n\tdata []u8 @[required]\n}","name":"PNGImage","parent_name":"","return_type":"","pos":{"len":19,"line_nr":26,"pos":394,"col":0,"last_line":29},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (_ ApngImage) content_type() string","name":"content_type","parent_name":"ApngImage","return_type":"string","pos":{"len":42,"line_nr":48,"pos":741,"col":0,"last_line":50},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (ai ApngImage) build() string","name":"build","parent_name":"ApngImage","return_type":"string","pos":{"len":36,"line_nr":52,"pos":810,"col":0,"last_line":54},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"struct ApngImage {\npub:\n\tdata []u8 @[required]\n}","name":"ApngImage","parent_name":"","return_type":"","pos":{"len":20,"line_nr":41,"pos":655,"col":0,"last_line":44},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (_ GIFImage) content_type() string","name":"content_type","parent_name":"GIFImage","return_type":"string","pos":{"len":41,"line_nr":63,"pos":1005,"col":0,"last_line":65},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (gi GIFImage) build() string","name":"build","parent_name":"GIFImage","return_type":"string","pos":{"len":35,"line_nr":67,"pos":1072,"col":0,"last_line":69},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"struct GIFImage {\npub:\n\tdata []u8 @[required]\n}","name":"GIFImage","parent_name":"","return_type":"","pos":{"len":19,"line_nr":56,"pos":921,"col":0,"last_line":59},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (_ NoneImage) content_type() string","name":"content_type","parent_name":"NoneImage","return_type":"string","pos":{"len":42,"line_nr":77,"pos":1256,"col":0,"last_line":79},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"fn (_ NoneImage) build() string","name":"build","parent_name":"NoneImage","return_type":"string","pos":{"len":35,"line_nr":81,"pos":1315,"col":0,"last_line":83},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\image.v","content":"struct NoneImage {\n\tdata []u8 = []\n}","name":"NoneImage","parent_name":"","return_type":"","pos":{"len":20,"line_nr":71,"pos":1182,"col":0,"last_line":73},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"enum InteractionType {\n\tping                             = 1\n\tapplication_command\n\tmessage_component\n\tapplication_command_autocomplete\n\tmodal_submit\n}","name":"InteractionType","parent_name":"","return_type":"","pos":{"len":24,"line_nr":6,"pos":64,"col":0,"last_line":12},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (i Interaction) get_user() User","name":"get_user","parent_name":"Interaction","return_type":"User","pos":{"len":38,"line_nr":117,"pos":2826,"col":0,"last_line":122},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (i Interaction) get_application_command_data() !ApplicationCommandData","name":"get_application_command_data","parent_name":"Interaction","return_type":"!ApplicationCommandData","pos":{"len":77,"line_nr":301,"pos":7031,"col":0,"last_line":303},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (i Interaction) get_message_component_data() !MessageComponentData","name":"get_message_component_data","parent_name":"Interaction","return_type":"!MessageComponentData","pos":{"len":73,"line_nr":341,"pos":8035,"col":0,"last_line":343},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (i Interaction) get_modal_submit_data() !ModalSubmitData","name":"get_modal_submit_data","parent_name":"Interaction","return_type":"!ModalSubmitData","pos":{"len":63,"line_nr":375,"pos":8921,"col":0,"last_line":377},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct Interaction {\npub:\n\t// ID of the interaction\n\tid Snowflake\n\t// ID of the application this interaction is for\n\tapplication_id Snowflake\n\t// Type of interaction\n\ttyp InteractionType\n\t// Interaction data payload\n\tdata ?json2.Any\n\t// Guild that the interaction was sent from\n\tguild_id ?Snowflake\n\t// Channel that the interaction was sent from\n\tchannel ?PartialChannel\n\t// Channel that the interaction was sent from\n\tchannel_id ?Snowflake\n\t// Guild member data for the invoking user, including permissions\n\tmember ?GuildMember\n\t// User object for the invoking user, if invoked in a DM\n\tuser ?User\n\t// Continuation token for responding to the interaction\n\ttoken string\n\t// For components, the message they were attached to\n\tmessage ?Message\n\t// Bitwise set of permissions the app or bot has within the channel the interaction was sent from\n\tapp_permissions ?Permissions\n\t// Selected [language](#Locale) of the invoking user\n\tlocale ?Locale\n\t// Guild's [preferred locale](#Locale), if invoked in a guild\n\tguild_locale ?Locale\n\t// For monetized apps, any entitlements for the invoking user, representing access to premium [SKUs](#Sku)\n\tentitlements []Entitlement\n}","name":"Interaction","parent_name":"","return_type":"","pos":{"len":22,"line_nr":14,"pos":220,"col":0,"last_line":46},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn Interaction.parse(j json2.Any) !Interaction","name":"Interaction.parse","parent_name":"","return_type":"!Interaction","pos":{"len":50,"line_nr":48,"pos":1389,"col":0,"last_line":115},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (v ApplicationCommandInteractionDataOptionValue) as_string() string","name":"as_string","parent_name":"ApplicationCommandInteractionDataOptionValue","return_type":"string","pos":{"len":74,"line_nr":146,"pos":3484,"col":0,"last_line":155},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (v ApplicationCommandInteractionDataOptionValue) as_int() int","name":"as_int","parent_name":"ApplicationCommandInteractionDataOptionValue","return_type":"int","pos":{"len":68,"line_nr":157,"pos":3631,"col":0,"last_line":166},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (v ApplicationCommandInteractionDataOptionValue) as_f64() f64","name":"as_f64","parent_name":"ApplicationCommandInteractionDataOptionValue","return_type":"f64","pos":{"len":68,"line_nr":168,"pos":3768,"col":0,"last_line":177},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (v ApplicationCommandInteractionDataOptionValue) as_bool() bool","name":"as_bool","parent_name":"ApplicationCommandInteractionDataOptionValue","return_type":"bool","pos":{"len":70,"line_nr":179,"pos":3907,"col":0,"last_line":188},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"type ApplicationCommandInteractionDataOptionValue = bool | f64 | int | string","name":"ApplicationCommandInteractionDataOptionValue","parent_name":"","return_type":"","pos":{"len":53,"line_nr":124,"pos":2983,"col":0,"last_line":124},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn ApplicationCommandInteractionDataOptionValue.parse(j json2.Any) !ApplicationCommandInteractionDataOptionValue","name":"ApplicationCommandInteractionDataOptionValue.parse","parent_name":"","return_type":"!ApplicationCommandInteractionDataOptionValue","pos":{"len":116,"line_nr":126,"pos":3066,"col":0,"last_line":144},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct ApplicationCommandInteractionDataOption {\npub:\n\t// Name of the parameter\n\tname string\n\t// Value of application command option type\n\ttyp ApplicationCommandOptionType\n\t// Value of the option resulting from user input\n\tvalue ?ApplicationCommandInteractionDataOptionValue\n\t// Present if this option is a group or subcommand\n\toptions ?[]ApplicationCommandInteractionDataOption\n\t// true if this option is the currently focused option for autocomplete\n\tfocused ?bool\n}","name":"ApplicationCommandInteractionDataOption","parent_name":"","return_type":"","pos":{"len":50,"line_nr":190,"pos":4051,"col":0,"last_line":202},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn ApplicationCommandInteractionDataOption.parse(j json2.Any) !ApplicationCommandInteractionDataOption","name":"ApplicationCommandInteractionDataOption.parse","parent_name":"","return_type":"!ApplicationCommandInteractionDataOption","pos":{"len":106,"line_nr":204,"pos":4525,"col":0,"last_line":233},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (acd ApplicationCommandData) get(option string) ?ApplicationCommandInteractionDataOptionValue","name":"get","parent_name":"ApplicationCommandData","return_type":"?ApplicationCommandInteractionDataOptionValue","pos":{"len":100,"line_nr":290,"pos":6806,"col":0,"last_line":299},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct ApplicationCommandData {\npub:\n\t// the ID of the invoked command\n\tid Snowflake\n\t// the name of the invoked command\n\tname string\n\t// the type of the invoked command\n\ttyp ApplicationCommandType\n\t// converted users + roles + channels + attachments\n\tresolved ?Resolved\n\t// the params + values from the user\n\toptions ?[]ApplicationCommandInteractionDataOption\n\t// the id of the guild the command is registered to\n\tguild_id ?Snowflake\n\t// id of the user or message targeted by a user or message command\n\ttarget_id ?Snowflake\n}","name":"ApplicationCommandData","parent_name":"","return_type":"","pos":{"len":33,"line_nr":235,"pos":5381,"col":0,"last_line":251},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn ApplicationCommandData.parse(j json2.Any) !ApplicationCommandData","name":"ApplicationCommandData.parse","parent_name":"","return_type":"!ApplicationCommandData","pos":{"len":72,"line_nr":253,"pos":5913,"col":0,"last_line":288},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct MessageComponentData {\npub:\n\t// the custom_id of the component\n\tcustom_id string\n\t// the type of the component\n\tcomponent_type ComponentType\n\t// values the user selected in a select menu component\n\tvalues ?[]string\n\t// resolved entities from selected options\n\tresolved ?Resolved\n}","name":"MessageComponentData","parent_name":"","return_type":"","pos":{"len":31,"line_nr":305,"pos":7178,"col":0,"last_line":315},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn MessageComponentData.parse(j json2.Any) !MessageComponentData","name":"MessageComponentData.parse","parent_name":"","return_type":"!MessageComponentData","pos":{"len":68,"line_nr":317,"pos":7471,"col":0,"last_line":339},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (msd ModalSubmitData) get(custom_id string) ?string","name":"get","parent_name":"ModalSubmitData","return_type":"?string","pos":{"len":58,"line_nr":369,"pos":8737,"col":0,"last_line":373},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct ModalSubmitData {\npub:\n\t// the custom_id of the modal\n\tcustom_id string\n\t// the values submitted by the user\n\tcomponents []Component\n}","name":"ModalSubmitData","parent_name":"","return_type":"","pos":{"len":26,"line_nr":345,"pos":8189,"col":0,"last_line":351},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn ModalSubmitData.parse(j json2.Any) !ModalSubmitData","name":"ModalSubmitData.parse","parent_name":"","return_type":"!ModalSubmitData","pos":{"len":58,"line_nr":353,"pos":8336,"col":0,"last_line":367},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"enum InteractionResponseType {\n\t// ACK a `Ping`\n\tpong                                    = 1\n\t// respond to an interaction with a message\n\tchannel_message_with_source             = 4\n\t// ACK an interaction and edit a response later, the user sees a loading state\n\tdeferred_channel_message_with_source\n\t// for components, ACK an interaction and edit the original message later; the user does not see a loading state\n\tdeferred_update_message\n\t// for components, edit the message the component was attached to\n\tupdate_message\n\t// respond to an autocomplete interaction with suggested choices\n\tapplication_command_autocomplete_result\n\t// respond to an interaction with a popup modal\n\tmodal\n\t// respond to an interaction with an upgrade button, only available for apps with monetization enabled\n\tpremium_required\n}","name":"InteractionResponseType","parent_name":"","return_type":"","pos":{"len":32,"line_nr":379,"pos":9060,"col":0,"last_line":396},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"interface InteractionResponseData {\n\tis_interaction_response_data()\n\tget_files() ?[]File\n\tbuild() json2.Any\n}","name":"InteractionResponseData","parent_name":"","return_type":"","pos":{"len":113,"line_nr":398,"pos":9875,"col":0,"last_line":402},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (_ MessageResponseData) is_interaction_response_data()","name":"is_interaction_response_data","parent_name":"MessageResponseData","return_type":"void","pos":{"len":61,"line_nr":422,"pos":10404,"col":0,"last_line":422},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (mrd MessageResponseData) get_files() ?[]File","name":"get_files","parent_name":"MessageResponseData","return_type":"?[]File","pos":{"len":52,"line_nr":424,"pos":10470,"col":0,"last_line":426},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (mrd MessageResponseData) build() json2.Any","name":"build","parent_name":"MessageResponseData","return_type":"x.json2.Any","pos":{"len":50,"line_nr":428,"pos":10546,"col":0,"last_line":454},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct MessageResponseData {\npub:\n\t// is the response TTS\n\ttts ?bool\n\t// message content\n\tcontent ?string\n\t// supports up to 10 embeds\n\tembeds ?[]Embed\n\t// allowed mentions object\n\tallowed_mentions ?AllowedMentions\n\t// message flags combined as a bitfield (only SUPPRESS_EMBEDS and EPHEMERAL can be set)\n\tflags ?MessageFlags\n\t// message components\n\tcomponents ?[]Component\n\t// uploaded files\n\tfiles ?[]File\n}","name":"MessageResponseData","parent_name":"","return_type":"","pos":{"len":30,"line_nr":404,"pos":9990,"col":0,"last_line":420},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (_ AutocompleteResponseData) is_interaction_response_data()","name":"is_interaction_response_data","parent_name":"AutocompleteResponseData","return_type":"void","pos":{"len":66,"line_nr":462,"pos":11339,"col":0,"last_line":462},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (_ AutocompleteResponseData) get_files() ?[]File","name":"get_files","parent_name":"AutocompleteResponseData","return_type":"?[]File","pos":{"len":55,"line_nr":464,"pos":11410,"col":0,"last_line":466},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (ard AutocompleteResponseData) build() json2.Any","name":"build","parent_name":"AutocompleteResponseData","return_type":"x.json2.Any","pos":{"len":55,"line_nr":468,"pos":11484,"col":0,"last_line":472},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct AutocompleteResponseData {\npub mut:\n\t// autocomplete choices (max of 25 choices)\n\tchoices []ApplicationCommandOptionChoice @[required]\n}","name":"AutocompleteResponseData","parent_name":"","return_type":"","pos":{"len":35,"line_nr":456,"pos":11190,"col":0,"last_line":460},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (_ ModalResponseData) is_interaction_response_data()","name":"is_interaction_response_data","parent_name":"ModalResponseData","return_type":"void","pos":{"len":59,"line_nr":484,"pos":11941,"col":0,"last_line":484},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (_ ModalResponseData) get_files() ?[]File","name":"get_files","parent_name":"ModalResponseData","return_type":"?[]File","pos":{"len":48,"line_nr":486,"pos":12005,"col":0,"last_line":488},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (mrd ModalResponseData) build() json2.Any","name":"build","parent_name":"ModalResponseData","return_type":"x.json2.Any","pos":{"len":48,"line_nr":490,"pos":12072,"col":0,"last_line":496},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct ModalResponseData {\npub:\n\t// a developer-defined identifier for the modal, max 100 characters\n\tcustom_id string @[required]\n\t// the title of the popup modal, max 45 characters\n\ttitle string @[required]\n\t// between 1 and 5 (inclusive) components that make up the modal\n\tcomponents []Component @[required]\n}","name":"ModalResponseData","parent_name":"","return_type":"","pos":{"len":28,"line_nr":474,"pos":11623,"col":0,"last_line":482},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"interface IInteractionResponse {\n\tis_interaction_response()\n\tget_files() ?[]File\n\tbuild() json2.Any\n}","name":"IInteractionResponse","parent_name":"","return_type":"","pos":{"len":105,"line_nr":498,"pos":12272,"col":0,"last_line":502},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (ir InteractionResponse) get_files() ?[]File","name":"get_files","parent_name":"InteractionResponse","return_type":"?[]File","pos":{"len":51,"line_nr":514,"pos":12595,"col":0,"last_line":516},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (ir InteractionResponse) build() json2.Any","name":"build","parent_name":"InteractionResponse","return_type":"x.json2.Any","pos":{"len":49,"line_nr":518,"pos":12681,"col":0,"last_line":526},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct InteractionResponse {\npub:\n\t// the type of response\n\ttyp InteractionResponseType\n\t// an optional response message\n\tdata ?InteractionResponseData\n}","name":"InteractionResponse","parent_name":"","return_type":"","pos":{"len":30,"line_nr":504,"pos":12379,"col":0,"last_line":510},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (r MessageInteractionResponse) get_files() ?[]File","name":"get_files","parent_name":"MessageInteractionResponse","return_type":"?[]File","pos":{"len":57,"line_nr":534,"pos":12968,"col":0,"last_line":536},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (mir MessageInteractionResponse) build() json2.Any","name":"build","parent_name":"MessageInteractionResponse","return_type":"x.json2.Any","pos":{"len":57,"line_nr":538,"pos":13067,"col":0,"last_line":543},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct MessageInteractionResponse {\n\tMessageResponseData\n}","name":"MessageInteractionResponse","parent_name":"","return_type":"","pos":{"len":37,"line_nr":528,"pos":12840,"col":0,"last_line":530},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (r UpdateMessageInteractionResponse) get_files() ?[]File","name":"get_files","parent_name":"UpdateMessageInteractionResponse","return_type":"?[]File","pos":{"len":63,"line_nr":551,"pos":13403,"col":0,"last_line":553},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (umir UpdateMessageInteractionResponse) build() json2.Any","name":"build","parent_name":"UpdateMessageInteractionResponse","return_type":"x.json2.Any","pos":{"len":64,"line_nr":555,"pos":13514,"col":0,"last_line":560},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct UpdateMessageInteractionResponse {\n\tMessageResponseData\n}","name":"UpdateMessageInteractionResponse","parent_name":"","return_type":"","pos":{"len":43,"line_nr":545,"pos":13263,"col":0,"last_line":547},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (air AutocompleteInteractionResponse) get_files() ?[]File","name":"get_files","parent_name":"AutocompleteInteractionResponse","return_type":"?[]File","pos":{"len":64,"line_nr":568,"pos":13848,"col":0,"last_line":570},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (air AutocompleteInteractionResponse) build() json2.Any","name":"build","parent_name":"AutocompleteInteractionResponse","return_type":"x.json2.Any","pos":{"len":62,"line_nr":572,"pos":13967,"col":0,"last_line":577},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct AutocompleteInteractionResponse {\n\tAutocompleteResponseData\n}","name":"AutocompleteInteractionResponse","parent_name":"","return_type":"","pos":{"len":42,"line_nr":562,"pos":13705,"col":0,"last_line":564},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (_ ModalInteractionResponse) get_files() ?[]File","name":"get_files","parent_name":"ModalInteractionResponse","return_type":"?[]File","pos":{"len":55,"line_nr":591,"pos":14536,"col":0,"last_line":593},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"fn (mir ModalInteractionResponse) build() json2.Any","name":"build","parent_name":"ModalInteractionResponse","return_type":"x.json2.Any","pos":{"len":55,"line_nr":595,"pos":14610,"col":0,"last_line":604},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\interaction.v","content":"struct ModalInteractionResponse {\npub:\n\t// a developer-defined identifier for the modal, max 100 characters\n\tcustom_id string\n\t// the title of the popup modal, max 45 characters\n\ttitle string\n\t// between 1 and 5 (inclusive) components that make up the modal\n\tcomponents []Component\n}","name":"ModalInteractionResponse","parent_name":"","return_type":"","pos":{"len":35,"line_nr":579,"pos":14185,"col":0,"last_line":587},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\invite.v","content":"enum InviteTargetType {\n\tstream               = 1\n\tembedded_application\n}","name":"InviteTargetType","parent_name":"","return_type":"","pos":{"len":25,"line_nr":6,"pos":62,"col":0,"last_line":9},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Represents a code that when used, adds a user to a guild or group DM channel.","is_multi":false,"pos":{"len":79,"line_nr":11,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\invite.v","content":"struct Invite {\npub:\n\t// the invite code (unique ID)\n\tcode string\n\t// the guild this invite is for\n\tguild ?PartialGuild\n\t// the channel this invite is for\n\tchannel ?PartialChannel\n\t// the user who created the invite\n\tinviter ?User\n\t// the type of target for this voice channel invite\n\ttarget_type ?InviteTargetType\n\t// the user whose stream to display for this voice channel stream invite\n\ttarget_user ?User\n\t// the embedded application to open for this voice channel embedded application invite\n\ttarget_application ?PartialApplication\n\t// approximate count of online members, returned from the `GET /invites/<code>` endpoint when `with_counts` is `true`\n\tapproximate_presence_count ?int\n\t// approximate count of total members, returned from the `GET /invites/<code>` endpoint when `with_counts` is `true`\n\tapproximate_member_count ?int\n\t// the expiration date of this invite, returned from the `GET /invites/<code>` endpoint when `with_expiration` is `true`\n\texpires_at ?time.Time\n\t// guild scheduled event data, only included if `guild_scheduled_event_id` contains a valid guild scheduled event id\n\tguild_scheduled_event ?GuildScheduledEvent\n}","name":"Invite","parent_name":"","return_type":"","pos":{"len":17,"line_nr":12,"pos":222,"col":0,"last_line":36},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Extra information about an invite, will extend the invite object.","is_multi":false,"pos":{"len":67,"line_nr":38,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\invite.v","content":"struct InviteMetadata {\n\tInvite\npub:\n\t// number of times this invite has been used\n\tuses int\n\t// max number of times this invite can be used\n\tmax_uses int\n\t// duration after which the invite expires\n\tmax_age time.Duration\n\t// whether this invite only grants temporary membership\n\ttemporary bool\n\t// when this invite was created\n\tcreated_at time.Time\n}","name":"InviteMetadata","parent_name":"","return_type":"","pos":{"len":25,"line_nr":39,"pos":1442,"col":0,"last_line":52},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\invite.v","content":"fn InviteMetadata.parse(j json2.Any) !InviteMetadata","name":"InviteMetadata.parse","parent_name":"","return_type":"!InviteMetadata","pos":{"len":56,"line_nr":54,"pos":1799,"col":0,"last_line":70},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\invite.v","content":"fn Invite.parse(j json2.Any) !Invite","name":"Invite.parse","parent_name":"","return_type":"!Invite","pos":{"len":40,"line_nr":72,"pos":2267,"col":0,"last_line":141},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\invite.v","content":"fn (params FetchInviteParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchInviteParams","return_type":"net.urllib.Values","pos":{"len":68,"line_nr":154,"pos":3987,"col":0,"last_line":166},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\invite.v","content":"struct FetchInviteParams {\npub mut:\n\t// whether the invite should contain approximate member counts\n\twith_counts ?bool\n\t// whether the invite should contain the expiration date\n\twith_expiration ?bool\n\t// the guild scheduled event to include with the invite\n\tguild_scheduled_event_id ?Snowflake\n}","name":"FetchInviteParams","parent_name":"","return_type":"","pos":{"len":28,"line_nr":144,"pos":3686,"col":0,"last_line":152},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct ChannelMention {\npub:\n\t// id of the channel\n\tid Snowflake\n\t// id of the guild containing the channel\n\tguild_id Snowflake\n\t// the type of channel\n\ttyp ChannelType\n\t// the name of the channel\n\tname string\n}","name":"ChannelMention","parent_name":"","return_type":"","pos":{"len":25,"line_nr":7,"pos":76,"col":0,"last_line":17},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn ChannelMention.parse(j json2.Any) !ChannelMention","name":"ChannelMention.parse","parent_name":"","return_type":"!ChannelMention","pos":{"len":56,"line_nr":19,"pos":293,"col":0,"last_line":33},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (et EmbedThumbnail) build() json2.Any","name":"build","parent_name":"EmbedThumbnail","return_type":"x.json2.Any","pos":{"len":44,"line_nr":75,"pos":1418,"col":0,"last_line":79},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct EmbedThumbnail {\npub:\n\t// source url of thumbnail (only supports http(s) and attachments)\n\turl string\n\t// a proxied url of the thumbnail\n\tproxy_url ?string\n\t// height of thumbnail\n\theight ?int\n\t// width of thumbnail\n\twidth ?int\n}","name":"EmbedThumbnail","parent_name":"","return_type":"","pos":{"len":25,"line_nr":35,"pos":684,"col":0,"last_line":45},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn EmbedThumbnail.parse(j json2.Any) !EmbedThumbnail","name":"EmbedThumbnail.parse","parent_name":"","return_type":"!EmbedThumbnail","pos":{"len":56,"line_nr":47,"pos":926,"col":0,"last_line":73},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (ev EmbedVideo) build() json2.Any","name":"build","parent_name":"EmbedVideo","return_type":"x.json2.Any","pos":{"len":40,"line_nr":125,"pos":2212,"col":0,"last_line":129},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct EmbedVideo {\npub:\n\t// source url of video\n\turl ?string\n\t// a proxied url of the video\n\tproxy_url ?string\n\t// height of video\n\theight ?int\n\t// width of video\n\twidth ?int\n}","name":"EmbedVideo","parent_name":"","return_type":"","pos":{"len":21,"line_nr":81,"pos":1508,"col":0,"last_line":91},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn EmbedVideo.parse(j json2.Any) !EmbedVideo","name":"EmbedVideo.parse","parent_name":"","return_type":"!EmbedVideo","pos":{"len":48,"line_nr":93,"pos":1691,"col":0,"last_line":123},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (ei EmbedImage) build() json2.Any","name":"build","parent_name":"EmbedImage","return_type":"x.json2.Any","pos":{"len":40,"line_nr":171,"pos":2996,"col":0,"last_line":175},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct EmbedImage {\npub:\n\t// source url of image (only supports http(s) and attachments)\n\turl string\n\t// a proxied url of the image\n\tproxy_url ?string\n\t// height of image\n\theight ?int\n\t// width of image\n\twidth ?int\n}","name":"EmbedImage","parent_name":"","return_type":"","pos":{"len":21,"line_nr":131,"pos":2298,"col":0,"last_line":141},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn EmbedImage.parse(j json2.Any) !EmbedImage","name":"EmbedImage.parse","parent_name":"","return_type":"!EmbedImage","pos":{"len":48,"line_nr":143,"pos":2520,"col":0,"last_line":169},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (ep EmbedProvider) build() json2.Any","name":"build","parent_name":"EmbedProvider","return_type":"x.json2.Any","pos":{"len":43,"line_nr":203,"pos":3512,"col":0,"last_line":211},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct EmbedProvider {\npub:\n\t// name of provider\n\tname string\n\t// url of provider\n\turl ?string\n}","name":"EmbedProvider","parent_name":"","return_type":"","pos":{"len":24,"line_nr":177,"pos":3082,"col":0,"last_line":183},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn EmbedProvider.parse(j json2.Any) !EmbedProvider","name":"EmbedProvider.parse","parent_name":"","return_type":"!EmbedProvider","pos":{"len":54,"line_nr":185,"pos":3184,"col":0,"last_line":201},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (ea EmbedAuthor) build() json2.Any","name":"build","parent_name":"EmbedAuthor","return_type":"x.json2.Any","pos":{"len":41,"line_nr":253,"pos":4413,"col":0,"last_line":264},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct EmbedAuthor {\npub:\n\t// name of author\n\tname string\n\t// url of author (only supports http(s))\n\turl ?string\n\t// url of author icon (only supports http(s) and attachments)\n\ticon_url ?string\n\t// a proxied url of author icon\n\tproxy_icon_url ?string\n}","name":"EmbedAuthor","parent_name":"","return_type":"","pos":{"len":22,"line_nr":213,"pos":3655,"col":0,"last_line":223},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn EmbedAuthor.parse(j json2.Any) !EmbedAuthor","name":"EmbedAuthor.parse","parent_name":"","return_type":"!EmbedAuthor","pos":{"len":50,"line_nr":225,"pos":3913,"col":0,"last_line":251},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (ef EmbedFooter) build() json2.Any","name":"build","parent_name":"EmbedFooter","return_type":"x.json2.Any","pos":{"len":41,"line_nr":299,"pos":5240,"col":0,"last_line":307},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct EmbedFooter {\npub:\n\t// footer text\n\ttext string\n\t// url of footer icon (only supports http(s) and attachments)\n\ticon_url ?string\n\t// a proxied url of footer icon\n\tproxy_icon_url ?string\n}","name":"EmbedFooter","parent_name":"","return_type":"","pos":{"len":22,"line_nr":266,"pos":4614,"col":0,"last_line":274},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn EmbedFooter.parse(j json2.Any) !EmbedFooter","name":"EmbedFooter.parse","parent_name":"","return_type":"!EmbedFooter","pos":{"len":50,"line_nr":276,"pos":4814,"col":0,"last_line":297},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (ef EmbedField) build() json2.Any","name":"build","parent_name":"EmbedField","return_type":"x.json2.Any","pos":{"len":40,"line_nr":338,"pos":5924,"col":0,"last_line":347},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct EmbedField {\npub:\n\t// name of the field\n\tname string\n\t// value of the field\n\tvalue string\n\t// whether or not this field should display inline\n\tinline ?bool\n}","name":"EmbedField","parent_name":"","return_type":"","pos":{"len":21,"line_nr":309,"pos":5401,"col":0,"last_line":317},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn EmbedField.parse(j json2.Any) !EmbedField","name":"EmbedField.parse","parent_name":"","return_type":"!EmbedField","pos":{"len":48,"line_nr":319,"pos":5571,"col":0,"last_line":336},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (e Embed) build() json2.Any","name":"build","parent_name":"Embed","return_type":"x.json2.Any","pos":{"len":34,"line_nr":458,"pos":8119,"col":0,"last_line":500},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct Embed {\npub:\n\t// title of embed\n\ttitle ?string\n\t// type of embed (always \"rich\" for webhook embeds)\n\ttyp ?string\n\t// description of embed\n\tdescription ?string\n\t// url of embed\n\turl ?string\n\t// timestamp of embed content\n\ttimestamp ?time.Time\n\t// color code of the embed\n\tcolor ?int\n\t// footer information\n\tfooter ?EmbedFooter\n\t// image information\n\timage ?EmbedImage\n\t// thumbnail information\n\tthumbnail ?EmbedThumbnail\n\t// video information\n\tvideo ?EmbedVideo\n\t// provider information\n\tprovider ?EmbedProvider\n\t// author information\n\tauthor ?EmbedAuthor\n\t// fields information\n\tfields ?[]EmbedField\n}","name":"Embed","parent_name":"","return_type":"","pos":{"len":16,"line_nr":349,"pos":6097,"col":0,"last_line":377},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn Embed.parse(j json2.Any) !Embed","name":"Embed.parse","parent_name":"","return_type":"!Embed","pos":{"len":38,"line_nr":379,"pos":6711,"col":0,"last_line":456},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"type Nonce = int | string","name":"Nonce","parent_name":"","return_type":"","pos":{"len":14,"line_nr":502,"pos":8961,"col":0,"last_line":502},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"enum MessageType {\n\tdefault\n\trecipient_add\n\trecipient_remove\n\tcall\n\tchannel_name_change\n\tchannel_icon_change\n\tchannel_pinned_message\n\tuser_join\n\tguild_boost\n\tguild_boost_tier_1\n\tguild_boost_tier_2\n\tguild_boost_tier_3\n\tchannel_follow_add\n\tguild_discovery_disqualified                = 14\n\tguild_discovery_requalified\n\tguild_discovery_grace_period_inital_warning\n\tguild_discovery_grace_period_final_warning\n\tthread_created\n\treply\n\tchat_input_command\n\tthread_starter_message\n\tguild_invite_reminder\n\tcontext_menu_command\n\tauto_moderation_action\n\trole_subscription_purchase\n\tinteraction_premium_upsell\n\tstage_start\n\tstage_end\n\tstage_speaker\n\tstage_topic                                 = 31\n\tguild_application_premium_subscription\n}","name":"MessageType","parent_name":"","return_type":"","pos":{"len":20,"line_nr":504,"pos":8992,"col":0,"last_line":536},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"enum MessageActivityType {\n\tjoin         = 1\n\tspectate\n\tlisten\n\tjoin_request\n}","name":"MessageActivityType","parent_name":"","return_type":"","pos":{"len":28,"line_nr":538,"pos":9725,"col":0,"last_line":543},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct MessageActivity {\npub:\n\t// type of message activity\n\ttyp MessageActivityType\n\t// party_id from a Rich Presence event\n\tparty_id ?Snowflake\n}","name":"MessageActivity","parent_name":"","return_type":"","pos":{"len":26,"line_nr":545,"pos":9809,"col":0,"last_line":551},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn MessageActivity.parse(j json2.Any) !MessageActivity","name":"MessageActivity.parse","parent_name":"","return_type":"!MessageActivity","pos":{"len":58,"line_nr":553,"pos":9961,"col":0,"last_line":569},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (mr MessageReference) build() json2.Any","name":"build","parent_name":"MessageReference","return_type":"x.json2.Any","pos":{"len":46,"line_nr":610,"pos":11252,"col":0,"last_line":625},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct MessageReference {\npub:\n\t// id of the originating message\n\tmessage_id ?Snowflake\n\t// id of the originating message's channel\n\tchannel_id ?Snowflake\n\t// id of the originating message's guild\n\tguild_id ?Snowflake\n\t// when sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true\n\tfail_if_not_exists ?bool\n}","name":"MessageReference","parent_name":"","return_type":"","pos":{"len":27,"line_nr":571,"pos":10342,"col":0,"last_line":581},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn MessageReference.parse(j json2.Any) !MessageReference","name":"MessageReference.parse","parent_name":"","return_type":"!MessageReference","pos":{"len":60,"line_nr":583,"pos":10733,"col":0,"last_line":608},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"enum MessageFlags {\n\tcrossposted\n\tis_crosspost\n\tsuppress_embeds\n\tsource_message_deleted\n\turgent\n\thas_thread\n\tephemeral\n\tloading\n\tfailed_to_mention_some_roles_in_thread\n\treserved_9\n\treserved_10\n\treserved_11\n\tsuppress_notifications\n\tis_voice_message\n}","name":"MessageFlags","parent_name":"","return_type":"","pos":{"len":21,"line_nr":628,"pos":11675,"col":0,"last_line":643},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct MessageInteraction {\npub:\n\t// ID of the interaction\n\tid Snowflake\n\t// Type of interaction\n\ttyp InteractionType\n\t// Name of the application command, including subcommands and subcommand groups\n\tname string\n\t// User who invoked the interaction\n\tuser User\n\t// Member who invoked the interaction in the guild\n\tmember ?PartialGuildMember\n}","name":"MessageInteraction","parent_name":"","return_type":"","pos":{"len":29,"line_nr":645,"pos":11930,"col":0,"last_line":657},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn MessageInteraction.parse(j json2.Any) !MessageInteraction","name":"MessageInteraction.parse","parent_name":"","return_type":"!MessageInteraction","pos":{"len":64,"line_nr":659,"pos":12277,"col":0,"last_line":678},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct RoleSubscriptionData {\npub:\n\t// the id of the [Sku](#Sku) and listing that the user is subscribed to\n\trole_subscription_listing_id Snowflake\n\t// the name of the tier that the user is subscribed to\n\ttier_name string\n\t// the cumulative number of months that the user has been subscribed for\n\ttotal_months_subscribed int\n\t// whether this notification is for a renewal rather than a new purchase\n\tis_renewal bool\n}","name":"RoleSubscriptionData","parent_name":"","return_type":"","pos":{"len":31,"line_nr":680,"pos":12771,"col":0,"last_line":690},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn RoleSubscriptionData.parse(j json2.Any) !RoleSubscriptionData","name":"RoleSubscriptionData.parse","parent_name":"","return_type":"!RoleSubscriptionData","pos":{"len":68,"line_nr":692,"pos":13194,"col":0,"last_line":706},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct Message {\npub:\n\t// id of the message\n\tid Snowflake\n\t// id of the channel the message was sent in\n\tchannel_id Snowflake\n\t// the author of this message (not guaranteed to be a valid user, see below)\n\tauthor User\n\t// contents of the message\n\tcontent string\n\t// when this message was sent\n\ttimestamp time.Time\n\t// when this message was edited (or null if never)\n\tedited_timestamp ?time.Time\n\t// whether this was a TTS message\n\ttts bool\n\t// whether this message mentions everyone\n\tmention_everyone bool\n\t// users specifically mentioned in the message\n\tmentions []User\n\t// roles specifically mentioned in this message\n\tmention_roles []Snowflake\n\t// channels specifically mentioned in this message\n\tmention_channels ?[]ChannelMention\n\t// any attached files\n\tattachments []Attachment\n\t// any embedded content\n\tembeds []Embed\n\t// reactions to the message\n\treactions ?[]Reaction\n\t// used for validating a message was sent\n\tnonce ?Nonce\n\t// whether this message is pinned\n\tpinned bool\n\t// if the message is generated by a webhook, this is the webhook's id\n\twebhook_id ?Snowflake\n\t// type of message\n\ttyp MessageType\n\t// sent with Rich Presence-related chat embeds\n\tactivity ?MessageActivity\n\t// sent with Rich Presence-related chat embeds\n\tapplication ?PartialApplication\n\t// if the message is an Interaction or application-owned webhook, this is the id of the application\n\tapplication_id ?Snowflake\n\t// data showing the source of a crosspost, channel follow add, pin, or reply message\n\tmessage_reference ?MessageReference\n\t// message flags combined as a bitfield\n\tflags ?MessageFlags\n\t// the message associated with the message_reference\n\t// > May be nil\n\treferenced_message ?&Message\n\t// sent if the message is a response to an Interaction\n\tinteraction ?MessageInteraction\n\t// the thread that was started from this message, includes thread member object\n\tthread ?Channel\n\t// sent if the message contains components like buttons, action rows, or other interactive components\n\tcomponents ?[]Component\n\t// sent if the message contains stickers\n\tsticker_items ?[]StickerItem\n\t// A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread\n\tposition ?int\n\t// data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message\n\trole_subscription_data ?RoleSubscriptionData\n\t// data for users, members, channels, and roles in the message's auto-populated select menus\n\tresolved ?Resolved\n}","name":"Message","parent_name":"","return_type":"","pos":{"len":18,"line_nr":709,"pos":13687,"col":0,"last_line":774},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn Message.parse(j json2.Any) !Message","name":"Message.parse","parent_name":"","return_type":"!Message","pos":{"len":42,"line_nr":776,"pos":16312,"col":0,"last_line":920},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct Message2 {\n\tMessage\npub:\n\t// ID of the guild the message was sent in - unless it is an ephemeral message\n\tguild_id ?Snowflake\n\t// Member properties for this message's author. Missing for ephemeral messages and messages from webhooks\n\tmember ?PartialGuildMember\n}","name":"Message2","parent_name":"","return_type":"","pos":{"len":19,"line_nr":922,"pos":19935,"col":0,"last_line":929},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn Message2.parse(j json2.Any) !Message2","name":"Message2.parse","parent_name":"","return_type":"!Message2","pos":{"len":44,"line_nr":931,"pos":20210,"col":0,"last_line":952},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct PartialMessage {\npub:\n\t// id of the message\n\tid Snowflake\n\t// id of the channel the message was sent in\n\tchannel_id Snowflake\n\t// the author of this message (not guaranteed to be a valid user, see below)\n\tauthor User\n\t// contents of the message\n\tcontent ?string\n\t// when this message was sent\n\ttimestamp ?time.Time\n\t// when this message was edited (or null if never)\n\tedited_timestamp ?time.Time\n\t// whether this was a TTS message\n\ttts ?bool\n\t// whether this message mentions everyone\n\tmention_everyone ?bool\n\t// users specifically mentioned in the message\n\tmentions ?[]User\n\t// roles specifically mentioned in this message\n\tmention_roles ?[]Snowflake\n\t// channels specifically mentioned in this message\n\tmention_channels ?[]ChannelMention\n\t// any attached files\n\tattachments ?[]Attachment\n\t// any embedded content\n\tembeds ?[]Embed\n\t// reactions to the message\n\treactions ?[]Reaction\n\t// used for validating a message was sent\n\tnonce ?Nonce\n\t// whether this message is pinned\n\tpinned ?bool\n\t// if the message is generated by a webhook, this is the webhook's id\n\twebhook_id ?Snowflake\n\t// type of message\n\ttyp ?MessageType\n\t// sent with Rich Presence-related chat embeds\n\tactivity ?MessageActivity\n\t// sent with Rich Presence-related chat embeds\n\tapplication ?PartialApplication\n\t// if the message is an Interaction or application-owned webhook, this is the id of the application\n\tapplication_id ?Snowflake\n\t// data showing the source of a crosspost, channel follow add, pin, or reply message\n\tmessage_reference ?MessageReference\n\t// message flags combined as a bitfield\n\tflags ?MessageFlags\n\t// the message associated with the message_reference\n\treferenced_message ?&Message\n\t// sent if the message is a response to an Interaction\n\tinteraction ?MessageInteraction\n\t// the thread that was started from this message, includes thread member object\n\tthread ?Channel\n\t// sent if the message contains components like buttons, action rows, or other interactive components\n\tcomponents ?[]Component\n\t// sent if the message contains stickers\n\tsticker_items ?[]StickerItem\n\t// A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread\n\tposition ?int\n\t// data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message\n\trole_subscription_data ?RoleSubscriptionData\n}","name":"PartialMessage","parent_name":"","return_type":"","pos":{"len":25,"line_nr":954,"pos":20633,"col":0,"last_line":1016},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn PartialMessage.parse(j json2.Any) !PartialMessage","name":"PartialMessage.parse","parent_name":"","return_type":"!PartialMessage","pos":{"len":56,"line_nr":1018,"pos":23144,"col":0,"last_line":1201},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (params GetChannelMessagesParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"GetChannelMessagesParams","return_type":"net.urllib.Values","pos":{"len":75,"line_nr":1216,"pos":27432,"col":0,"last_line":1231},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct GetChannelMessagesParams {\npub mut:\n\t// Get messages around this message ID\n\taround ?Snowflake\n\t// Get messages before this message ID\n\tbefore ?Snowflake\n\t// Get messages after this message ID\n\tafter ?Snowflake\n\t// Max number of messages to return (1-100)\n\tlimit ?int\n}","name":"GetChannelMessagesParams","parent_name":"","return_type":"","pos":{"len":35,"line_nr":1204,"pos":27150,"col":0,"last_line":1214},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (amt AllowedMentionType) build() string","name":"build","parent_name":"AllowedMentionType","return_type":"string","pos":{"len":46,"line_nr":1254,"pos":28639,"col":0,"last_line":1260},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"enum AllowedMentionType {\n\t// Controls role mentions\n\troles\n\t// Controls user mentions\n\tusers\n\t// Controls @everyone and @here mentions\n\teveryone\n}","name":"AllowedMentionType","parent_name":"","return_type":"","pos":{"len":27,"line_nr":1245,"pos":28486,"col":0,"last_line":1252},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (am AllowedMentions) build() json2.Any","name":"build","parent_name":"AllowedMentions","return_type":"x.json2.Any","pos":{"len":45,"line_nr":1274,"pos":29171,"col":0,"last_line":1289},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct AllowedMentions {\npub:\n\t// An array of allowed mention types to parse from the content.\n\tparse ?[]AllowedMentionType\n\t// Array of role_ids to mention (Max size of 100)\n\troles ?[]Snowflake\n\t// Array of user_ids to mention (Max size of 100)\n\tusers ?[]Snowflake\n\t// For replies, whether to mention the author of the message being replied to (default false)\n\treplied_user ?bool\n}","name":"AllowedMentions","parent_name":"","return_type":"","pos":{"len":26,"line_nr":1262,"pos":28783,"col":0,"last_line":1272},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (params CreateMessageParams) build() json2.Any","name":"build","parent_name":"CreateMessageParams","return_type":"x.json2.Any","pos":{"len":53,"line_nr":1316,"pos":30411,"col":0,"last_line":1354},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct CreateMessageParams {\npub mut:\n\t// Message contents (up to 2000 characters)\n\tcontent ?string\n\t// Can be used to verify a message was sent (up to 25 characters). Value will appear in the Message Create event.\n\tnonce ?Nonce\n\t// `true` if this is a TTS message\n\ttts ?bool\n\t// Up to 10 embeds (up to 6000 characters)\n\tembeds ?[]Embed\n\t// Allowed mentions for the message\n\tallowed_mentions ?AllowedMentions\n\t// Include to make your message a reply\n\tmessage_reference ?MessageReference\n\t// Components to include with the message\n\tcomponents ?[]Component\n\t// IDs of up to 3 stickers in the server to send in the message\n\tsticker_ids ?[]Snowflake\n\t// Contents of the file being sent. See Uploading Files\n\tfiles ?[]File\n\t// Message flags combined as a bitfield (only SUPPRESS_EMBEDS and SUPPRESS_NOTIFICATIONS can be set)\n\tflags ?MessageFlags\n}","name":"CreateMessageParams","parent_name":"","return_type":"","pos":{"len":30,"line_nr":1292,"pos":29563,"col":0,"last_line":1314},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (params ReactionParams) build() string","name":"build","parent_name":"ReactionParams","return_type":"string","pos":{"len":45,"line_nr":1385,"pos":32734,"col":0,"last_line":1391},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct ReactionParams {\npub mut:\n\tid   ?Snowflake\n\tname string     @[required]\n}","name":"ReactionParams","parent_name":"","return_type":"","pos":{"len":25,"line_nr":1379,"pos":32648,"col":0,"last_line":1383},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (params FetchReactionsParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchReactionsParams","return_type":"net.urllib.Values","pos":{"len":71,"line_nr":1416,"pos":34532,"col":0,"last_line":1425},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct FetchReactionsParams {\n\tReactionParams\npub mut:\n\tafter ?Snowflake\n\tlimit ?int\n}","name":"FetchReactionsParams","parent_name":"","return_type":"","pos":{"len":31,"line_nr":1409,"pos":34440,"col":0,"last_line":1414},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (params EditMessageParams) build() json2.Any","name":"build","parent_name":"EditMessageParams","return_type":"x.json2.Any","pos":{"len":51,"line_nr":1463,"pos":36764,"col":0,"last_line":1490},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct EditMessageParams {\npub mut:\n\t// Message contents (up to 2000 characters)\n\tcontent ?string = discord.sentinel_string\n\t// Up to 10 embeds (up to 6000 characters)\n\tembeds ?[]Embed\n\t// Edit the flags of a message (only SUPPRESS_EMBEDS can currently be set/unset)\n\tflags ?MessageFlags\n\t// Allowed mentions for the message\n\tallowed_mentions ?AllowedMentions\n\t// Components to include with the message\n\tcomponents ?[]Component\n\t// Contents of the file being sent/edited. See Uploading Files\n\tfiles ?[]File\n}","name":"EditMessageParams","parent_name":"","return_type":"","pos":{"len":28,"line_nr":1447,"pos":36258,"col":0,"last_line":1461},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (params ForumThreadMessageParams) build() json2.Any","name":"build","parent_name":"ForumThreadMessageParams","return_type":"x.json2.Any","pos":{"len":58,"line_nr":1569,"pos":42205,"col":0,"last_line":1592},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct ForumThreadMessageParams {\npub mut:\n\t// Message contents (up to 2000 characters)\n\tcontent ?string\n\t// Up to 10 rich embeds (up to 6000 characters)\n\tembeds ?[]Embed\n\t// Allowed mentions for the message\n\tallowed_mentions ?AllowedMentions\n\t// Components to include with the message\n\tcomponents ?[]Component\n\t// IDs of up to 3 stickers in the server to send in the message\n\tsticker_ids ?[]Snowflake\n\t// Contents of the file being sent. See Uploading Files\n\tfiles ?[]File\n\t// Message flags combined as a bitfield (only `.suppress_embeds` and `.suppress_notifications` can be set)\n\tflags ?MessageFlags\n}","name":"ForumThreadMessageParams","parent_name":"","return_type":"","pos":{"len":35,"line_nr":1551,"pos":41595,"col":0,"last_line":1567},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"fn (params StartThreadInForumChannelParams) build() json2.Any","name":"build","parent_name":"StartThreadInForumChannelParams","return_type":"x.json2.Any","pos":{"len":65,"line_nr":1610,"pos":43524,"col":0,"last_line":1629},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\message.v","content":"struct StartThreadInForumChannelParams {\npub mut:\n\t// 1-100 character channel name\n\tname string @[required]\n\t// duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080\n\tauto_archive_duration ?time.Duration\n\t// amount of seconds a user has to wait before sending another message (0-21600)\n\trate_limit_per_user ?time.Duration = discord.sentinel_duration\n\t// contents of the first message in the forum/media thread\n\tmessage ForumThreadMessageParams @[required]\n\t// the IDs of the set of tags that have been applied to a thread in a `.guild_forum` or a `.guild_media` channel\n\tapplied_tags ?[]Snowflake\n\treason       ?string\n}","name":"StartThreadInForumChannelParams","parent_name":"","return_type":"","pos":{"len":42,"line_nr":1595,"pos":42844,"col":0,"last_line":1608},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\permissions.v","content":"enum Permissions as u64 {\n\t// Allows creation of instant invites\n\tcreate_instant_invite\n\t// Allows kicking members\n\tkick_members\n\t// Allows banning members\n\tban_members\n\t// Allows all permissions and bypasses channel permission overwrites\n\tadministrator\n\t// Allows management and editing of channels\n\tmanage_channels\n\t// Allows management and editing of the guild\n\tmanage_guild\n\t// Allows for the addition of reactions to messages\n\tadd_reactions\n\t// Allows for viewing of audit logs\n\tview_audit_log\n\t// Allows for using priority speaker in a voice channel\n\tpriority_speaker\n\t// Allows the user to go live\n\tstream\n\t// Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels\n\tview_channel\n\t// Allows for sending messages in a channel and creating threads in a forum (does not allow sending messages in threads)\n\tsend_messages\n\t// Allows for sending of `/tts` messages\n\tsend_tts_messages\n\t// Allows for deletion of other users messages\n\tmanage_messages\n\t// Links sent by users with this permission will be auto-embedded\n\tembed_links\n\t// Allows for uploading images and files\n\tattach_files\n\t// Allows for reading of message history\n\tread_message_history\n\t// Allows for using the `@everyone` tag to notify all users in a channel, and the `@here` tag to notify all online users in a channel\n\tmention_everyone\n\t// Allows the usage of custom emojis from other servers\n\tuse_external_emojis\n\t// Allows for viewing guild insights\n\tview_guild_insights\n\t// Allows for joining of a voice channel\n\tconnect\n\t// Allows for speaking in a voice channel\n\tspeak\n\t// Allows for muting members in a voice channel\n\tmute_members\n\t// Allows for deafening of members in a voice channel\n\tdeafen_members\n\t// Allows for moving of members between voice channels\n\tmove_members\n\t// Allows for using voice-activity-detection in a voice channel\n\tuse_vad\n\t// Allows for modification of own nickname\n\tchange_nickname\n\t// Allows for modification of other users nicknames\n\tmanage_nicknames\n\t// Allows management and editing of roles\n\tmanage_roles\n\t// Allows management and editing of webhooks\n\tmanage_webhooks\n\t// Allows for editing and deleting emojis, stickers, and soundboard sounds created by all users\n\tmanage_guild_expressions\n\t// Allows members to use application commands, including slash commands and context menu commands.\n\tuse_application_commands\n\t// Allows for requesting to speak in stage channels. (This permission is under active development and may be changed or removed.)\n\trequest_to_speak\n\t// Allows for editing and deleting scheduled events created by all users\n\tmanage_events\n\t// Allows for deleting and archiving threads, and viewing all private threads\n\tmanage_threads\n\t// Allows for creating public and announcement threads\n\tcreate_public_threads\n\t// Allows for creating private threads\n\tcreate_private_threads\n\t// Allows the usage of custom stickers from other servers\n\tuse_external_stickers\n\t// Allows for sending messages in threads\n\tsend_messages_in_threads\n\t// Allows for using Activities (applications with the `EMBEDDED` flag) in a voice channel\n\tuse_embedded_activities\n\t// Allows for timing out users to prevent them from sending or reacting to messages in chat and threads, and from speaking in voice and stage channels\n\tmoderate_members\n\t// Allows for viewing role subscription insights\n\tview_creator_monetization_analytics\n\t// Allows for using soundboard in a voice channel\n\tuse_soundboard\n\t// Allows for creating emojis, stickers, and soundboard sounds, and editing and deleting those created by the current user\n\tcreate_guild_expressions\n\t// Allows for creating scheduled events, and editing and deleting those created by the current user\n\tcreate_events\n\t// Allows the usage of custom soundboard sounds from other servers\n\tuse_external_sounds\n\t// Allows sending voice messages\n\tsend_voice_messages\n}","name":"Permissions","parent_name":"","return_type":"","pos":{"len":20,"line_nr":5,"pos":40,"col":0,"last_line":100},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\permissions.v","content":"fn Permissions.all() Permissions","name":"Permissions.all","parent_name":"","return_type":"Permissions","pos":{"len":36,"line_nr":102,"pos":3904,"col":0,"last_line":107},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\permissions.v","content":"fn Permissions.all_except(permissions Permissions) Permissions","name":"Permissions.all_except","parent_name":"","return_type":"Permissions","pos":{"len":66,"line_nr":109,"pos":4974,"col":0,"last_line":113},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\permissions.v","content":"fn Permissions.parse(j json2.Any) !Permissions","name":"Permissions.parse","parent_name":"","return_type":"!Permissions","pos":{"len":50,"line_nr":115,"pos":5124,"col":0,"last_line":120},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"enum ActivityType {\n\t// Playing {name}: \"Playing Rocket League\"\n\tgame      = 0\n\t// Streaming {details}: \"Streaming Rocket League\"\n\tstreaming\n\t// Listening to {name}: \"Listening to Spotify\"\n\tlistening\n\t// Watching {name}: \"Watching YouTube Together\"\n\twatching\n\t// {emoji} {state}: \":smiley: I am cool\"\n\tcustom\n\t// Competing in {name}: \"Competing in Arena World Champions\"\n\tcompeting\n}","name":"ActivityType","parent_name":"","return_type":"","pos":{"len":21,"line_nr":5,"pos":44,"col":0,"last_line":18},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"struct ActivityTimestamps {\npub:\n\t// Unix time (in milliseconds) of when the activity started\n\tstart ?time.Time\n\t// Unix time (in milliseconds) of when the activity ends\n\tend ?time.Time\n}","name":"ActivityTimestamps","parent_name":"","return_type":"","pos":{"len":29,"line_nr":20,"pos":433,"col":0,"last_line":26},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn ActivityTimestamps.parse(j json2.Any) !ActivityTimestamps","name":"ActivityTimestamps.parse","parent_name":"","return_type":"!ActivityTimestamps","pos":{"len":64,"line_nr":28,"pos":626,"col":0,"last_line":48},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"struct ActivityParty {\npub:\n\t// ID of the party\n\tid ?string\n\t// Used to show the party's current size\n\tcurrent_size ?int\n\t// Used to show the party's maximum size\n\tmax_size ?int\n}","name":"ActivityParty","parent_name":"","return_type":"","pos":{"len":24,"line_nr":50,"pos":1057,"col":0,"last_line":58},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn ActivityParty.parse(j json2.Any) !ActivityParty","name":"ActivityParty.parse","parent_name":"","return_type":"!ActivityParty","pos":{"len":54,"line_nr":60,"pos":1242,"col":0,"last_line":84},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"struct ActivityAssets {\npub:\n\t// See [Activity Asset Image](https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-asset-image)\n\tlarge_image ?string\n\t// Text displayed when hovering over the large image of the activity\n\tlarge_text ?string\n\t// // See [Activity Asset Image](https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-asset-image)\n\tsmall_image ?string\n\t// Text displayed when hovering over the small image of the activity\n\tsmall_text ?string\n}","name":"ActivityAssets","parent_name":"","return_type":"","pos":{"len":25,"line_nr":86,"pos":1765,"col":0,"last_line":96},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn ActivityAssets.parse(j json2.Any) !ActivityAssets","name":"ActivityAssets.parse","parent_name":"","return_type":"!ActivityAssets","pos":{"len":56,"line_nr":98,"pos":2280,"col":0,"last_line":128},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"struct ActivitySecrets {\npub:\n\t// Secret for joining a party\n\tjoin ?string\n\t// Secret for spectating a game\n\tspectate ?string\n\t// Secret for a specific instanced match\n\tmatch_ ?string\n}","name":"ActivitySecrets","parent_name":"","return_type":"","pos":{"len":26,"line_nr":130,"pos":2863,"col":0,"last_line":138},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn ActivitySecrets.parse(j json2.Any) !ActivitySecrets","name":"ActivitySecrets.parse","parent_name":"","return_type":"!ActivitySecrets","pos":{"len":58,"line_nr":140,"pos":3054,"col":0,"last_line":165},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"enum ActivityFlags {\n\tinstance\n\tjoin\n\tspectate\n\tjoin_request\n\tsync\n\tplay\n\tparty_privacy_frineds\n\tparty_privacy_voice_channel\n\tembedded\n}","name":"ActivityFlags","parent_name":"","return_type":"","pos":{"len":22,"line_nr":168,"pos":3532,"col":0,"last_line":178},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"struct ActivityButton {\npub:\n\t// Text shown on the button (1-32 characters)\n\tlabel string\n\t// URL opened when clicking the button (1-512 characters)\n\turl string\n}","name":"ActivityButton","parent_name":"","return_type":"","pos":{"len":25,"line_nr":180,"pos":3674,"col":0,"last_line":186},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn ActivityButton.parse(j json2.Any) !ActivityButton","name":"ActivityButton.parse","parent_name":"","return_type":"!ActivityButton","pos":{"len":56,"line_nr":188,"pos":3842,"col":0,"last_line":200},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"struct ActivityEmoji {\npub:\n\t// Name of the emoji\n\tname string\n\t// ID of the emoji\n\tid ?Snowflake\n\t// Whether the emoji is animated\n\tanimated ?bool\n}","name":"ActivityEmoji","parent_name":"","return_type":"","pos":{"len":24,"line_nr":202,"pos":4131,"col":0,"last_line":210},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn ActivityEmoji.parse(j json2.Any) !ActivityEmoji","name":"ActivityEmoji.parse","parent_name":"","return_type":"!ActivityEmoji","pos":{"len":54,"line_nr":212,"pos":4286,"col":0,"last_line":233},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn (a Activity) build() json2.Any","name":"build","parent_name":"Activity","return_type":"x.json2.Any","pos":{"len":37,"line_nr":362,"pos":7661,"col":0,"last_line":382},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"struct Activity {\npub:\n\t// Activity's name\n\tname string\n\t// Activity type\n\ttyp ActivityType @[required]\n\t// Stream URL, is validated when type is 1\n\turl ?NullOr[string]\n\t// Unix timestamp (in milliseconds) of when the activity was added to the user's session\n\tcreated_at time.Time\n\t// Unix timestamps for start and/or end of the game\n\ttimestamps ?ActivityTimestamps\n\t// Application ID for the game\n\tapplication_id ?Snowflake\n\t// What the player is currently doing\n\tdetails ?NullOr[string]\n\t// User's current party status, or text used for a custom status\n\tstate ?NullOr[string]\n\t// Emoji used for a custom status\n\temoji ?NullOr[ActivityEmoji]\n\t// Information for the current party of the player\n\tparty ?ActivityParty\n\t// Images for the presence and their hover texts\n\tassets ?ActivityAssets\n\t// Secrets for Rich Presence joining and spectating\n\tsecrets ?ActivitySecrets\n\t// Whether or not the activity is an instanced game session\n\tinstance ?bool\n\t// Activity flags `OR`d together, describes what the payload includes\n\tflags ?ActivityFlags\n\t// Custom buttons shown in the Rich Presence (max 2)\n\tbuttons ?[]ActivityButton\n}","name":"Activity","parent_name":"","return_type":"","pos":{"len":19,"line_nr":235,"pos":4702,"col":0,"last_line":267},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn Activity.parse(j json2.Any) !Activity","name":"Activity.parse","parent_name":"","return_type":"!Activity","pos":{"len":44,"line_nr":269,"pos":5830,"col":0,"last_line":360},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn (s Status) build() string","name":"build","parent_name":"Status","return_type":"string","pos":{"len":32,"line_nr":427,"pos":8588,"col":0,"last_line":435},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"enum Status {\n\t// Online (Green)\n\tonline\n\t// Do Not Disturb (Red)\n\tdnd\n\t// AFK (Yellow)\n\tidle\n\t// Invisible and shown as offline (Gray)\n\tinvisible\n\t// Offline (Gray)\n\toffline\n}","name":"Status","parent_name":"","return_type":"","pos":{"len":15,"line_nr":384,"pos":7996,"col":0,"last_line":395},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn Status.parse(j json2.Any) !Status","name":"Status.parse","parent_name":"","return_type":"!Status","pos":{"len":40,"line_nr":397,"pos":8178,"col":0,"last_line":425},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"struct ClientStatus {\npub:\n\t// User's status set for an active desktop (Windows, Linux, Mac) application session\n\tdesktop ?Status\n\t// User's status set for an active mobile (iOS, Android) application session\n\tmobile ?Status\n\t// User's status set for an active web (browser, bot user) application session\n\tweb ?Status\n}","name":"ClientStatus","parent_name":"","return_type":"","pos":{"len":23,"line_nr":437,"pos":8759,"col":0,"last_line":445},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn ClientStatus.parse(j json2.Any) !ClientStatus","name":"ClientStatus.parse","parent_name":"","return_type":"!ClientStatus","pos":{"len":52,"line_nr":447,"pos":9083,"col":0,"last_line":472},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"struct Presence {\npub:\n\t// User whose presence is being updated\n\tuser PartialUser\n\t// ID of the guild\n\tguild_id Snowflake\n\t// Either \"idle\", \"dnd\", \"online\", or \"offline\"\n\tstatus Status\n\t// User's current activities\n\tactivities []Activity\n\t// User's platform-dependent status\n\tclient_status ClientStatus\n}","name":"Presence","parent_name":"","return_type":"","pos":{"len":19,"line_nr":474,"pos":9553,"col":0,"last_line":486},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\presence.v","content":"fn Presence.parse(j json2.Any) !Presence","name":"Presence.parse","parent_name":"","return_type":"!Presence","pos":{"len":44,"line_nr":488,"pos":9864,"col":0,"last_line":505},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\resolved.v","content":"struct Resolved {\npub:\n\t// the ids and User objects\n\tusers ?map[Snowflake]User\n\t// the ids and partial Member objects\n\tmembers ?map[Snowflake]PartialGuildMember\n\t// the ids and Role objects\n\troles ?map[Snowflake]Role\n\t// the ids and partial Channel objects\n\tchannels ?map[Snowflake]PartialChannel\n\t// the ids and partial Message objects\n\tmessages ?map[Snowflake]PartialMessage\n\t// the ids and attachment objects\n\tattachments ?map[Snowflake]Attachment\n}","name":"Resolved","parent_name":"","return_type":"","pos":{"len":19,"line_nr":4,"pos":32,"col":0,"last_line":18},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\resolved.v","content":"fn Resolved.parse(j json2.Any) !Resolved","name":"Resolved.parse","parent_name":"","return_type":"!Resolved","pos":{"len":44,"line_nr":20,"pos":490,"col":0,"last_line":78},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"fn (mut rpc RPC) send(op int, data []u8) !","name":"send","parent_name":"RPC","return_type":"!","pos":{"len":46,"line_nr":17,"pos":164,"col":0,"last_line":23},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"fn (mut rpc RPC) recv() !RPCPacket","name":"recv","parent_name":"RPC","return_type":"!RPCPacket","pos":{"len":38,"line_nr":25,"pos":414,"col":0,"last_line":37},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"fn (rpc RPC) get_connection() io.ReaderWriter","name":"get_connection","parent_name":"RPC","return_type":"io.ReaderWriter","pos":{"len":49,"line_nr":39,"pos":720,"col":0,"last_line":41},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"fn (mut rpc RPC) send_json(op int, j json2.Any) !","name":"send_json","parent_name":"RPC","return_type":"!","pos":{"len":53,"line_nr":43,"pos":792,"col":0,"last_line":45},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"fn (mut rpc RPC) recv_json() !RPCJSONPacket","name":"recv_json","parent_name":"RPC","return_type":"!RPCJSONPacket","pos":{"len":47,"line_nr":53,"pos":949,"col":0,"last_line":59},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"fn (mut rpc RPC) handshake(client_id Snowflake) !","name":"handshake","parent_name":"RPC","return_type":"!","pos":{"len":53,"line_nr":67,"pos":1192,"col":0,"last_line":74},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"struct RPC {\nmut:\n\tconn io.ReaderWriter\n}","name":"RPC","parent_name":"","return_type":"","pos":{"len":14,"line_nr":6,"pos":65,"col":0,"last_line":9},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"struct RPCPacket {\npub:\n\top   int\n\tdata []u8\n}","name":"RPCPacket","parent_name":"","return_type":"","pos":{"len":20,"line_nr":11,"pos":112,"col":0,"last_line":15},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"struct RPCJSONPacket {\npub:\n\top   int\n\tdata json2.Any\n}","name":"RPCJSONPacket","parent_name":"","return_type":"","pos":{"len":24,"line_nr":47,"pos":888,"col":0,"last_line":51},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\rpc.v","content":"fn new_rpc(file io.ReaderWriter) !RPC","name":"new_rpc","parent_name":"","return_type":"!RPC","pos":{"len":41,"line_nr":61,"pos":1116,"col":0,"last_line":65},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"struct NullOr[T] {\npub:\n\tis_null bool\n\tval     T\n}","name":"NullOr","parent_name":"","return_type":"","pos":{"len":17,"line_nr":24,"pos":609,"col":0,"last_line":28},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 we are not going to support JavaScript","is_multi":false,"pos":{"len":40,"line_nr":30,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"fn null[T]() NullOr[T]","name":"null","parent_name":"","return_type":"NullOr[T]","pos":{"len":26,"line_nr":31,"pos":707,"col":0,"last_line":33},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"fn some[T](val T) NullOr[T]","name":"some","parent_name":"","return_type":"NullOr[T]","pos":{"len":31,"line_nr":35,"pos":759,"col":0,"last_line":40},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"fn (no NullOr[T]) is_present[T]() bool","name":"is_present","parent_name":"NullOr[T]","return_type":"bool","pos":{"len":42,"line_nr":42,"pos":845,"col":0,"last_line":44},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"fn (no NullOr[T]) value[T]() T","name":"value","parent_name":"NullOr[T]","return_type":"T","pos":{"len":34,"line_nr":46,"pos":913,"col":0,"last_line":51},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"NullOr[T]","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 is_sentinel reports whether `target` is sentinel","is_multi":false,"pos":{"len":50,"line_nr":53,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sentinels.v","content":"fn is_sentinel[T](target T) bool","name":"is_sentinel","parent_name":"","return_type":"bool","pos":{"len":36,"line_nr":54,"pos":1097,"col":0,"last_line":84},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sku.v","content":"enum SkuType {\n\t// Represents a recurring subscription\n\tsubscription       = 5\n\t// System-generated group for each SUBSCRIPTION SKU created\n\tsubscription_group\n}","name":"SkuType","parent_name":"","return_type":"","pos":{"len":16,"line_nr":5,"pos":50,"col":0,"last_line":10},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sku.v","content":"enum SkuFlags {\n\treserved_0\n\treserved_1\n\t// SKU is available for purchase\n\tavailable\n\treserved_3\n\treserved_4\n\treserved_5\n\treserved_6\n\t// Recurring SKU that can be purchased by a user and applied to a single server. Grants access to every user in that server.\n\tguild_subscription\n\t// Recurring SKU purchased by a user for themselves. Grants access to the purchasing user in every server.\n\tuser_subscription\n}","name":"SkuFlags","parent_name":"","return_type":"","pos":{"len":17,"line_nr":13,"pos":226,"col":0,"last_line":26},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sku.v","content":"struct Sku {\npub:\n\t// ID of SKU\n\tid Snowflake\n\t// Type of SKU\n\ttyp SkuType\n\t// ID of the parent application\n\tapplication_id Snowflake\n\t// Customer-facing name of your premium offering\n\tname string\n\t// System-generated URL slug based on the SKU's name\n\tslug string\n\t// SKU flags combined as a bitfield\n\tflags SkuFlags\n}","name":"Sku","parent_name":"","return_type":"","pos":{"len":14,"line_nr":28,"pos":639,"col":0,"last_line":42},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sku.v","content":"fn Sku.parse(j json2.Any) !Sku","name":"Sku.parse","parent_name":"","return_type":"!Sku","pos":{"len":34,"line_nr":44,"pos":963,"col":0,"last_line":60},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"fn (s Snowflake) raw_timestamp() u64","name":"raw_timestamp","parent_name":"Snowflake","return_type":"u64","pos":{"len":40,"line_nr":10,"pos":128,"col":0,"last_line":12},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"fn (s Snowflake) timestamp() time.Time","name":"timestamp","parent_name":"Snowflake","return_type":"time.Time","pos":{"len":42,"line_nr":14,"pos":218,"col":0,"last_line":16},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"fn (s Snowflake) build() json2.Any","name":"build","parent_name":"Snowflake","return_type":"x.json2.Any","pos":{"len":38,"line_nr":26,"pos":511,"col":0,"last_line":28},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"fn (mut s Snowflake) from_json(f json2.Any)","name":"from_json","parent_name":"Snowflake","return_type":"void","pos":{"len":47,"line_nr":38,"pos":814,"col":0,"last_line":40},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"fn (s Snowflake) str() string","name":"str","parent_name":"Snowflake","return_type":"string","pos":{"len":33,"line_nr":42,"pos":905,"col":0,"last_line":44},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"fn (s Snowflake) json_str() string","name":"json_str","parent_name":"Snowflake","return_type":"string","pos":{"len":38,"line_nr":46,"pos":965,"col":0,"last_line":48},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"type Snowflake = u64","name":"Snowflake","parent_name":"","return_type":"","pos":{"len":18,"line_nr":7,"pos":92,"col":0,"last_line":7},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"fn Snowflake.from(t time.Time) Snowflake","name":"Snowflake.from","parent_name":"","return_type":"Snowflake","pos":{"len":44,"line_nr":18,"pos":323,"col":0,"last_line":20},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"fn Snowflake.now() Snowflake","name":"Snowflake.now","parent_name":"","return_type":"Snowflake","pos":{"len":32,"line_nr":22,"pos":438,"col":0,"last_line":24},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\snowflake.v","content":"fn Snowflake.parse(j json2.Any) !Snowflake","name":"Snowflake.parse","parent_name":"","return_type":"!Snowflake","pos":{"len":46,"line_nr":30,"pos":571,"col":0,"last_line":36},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"enum PrivacyLevel {\n\t// The Stage instance is visible to only guild members.\n\tguild_only = 2\n}","name":"PrivacyLevel","parent_name":"","return_type":"","pos":{"len":21,"line_nr":5,"pos":50,"col":0,"last_line":8},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 A Stage Instance holds information about a live stage.","is_multi":false,"pos":{"len":56,"line_nr":10,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"struct StageInstance {\npub:\n\t// The id of this Stage instance\n\tid Snowflake\n\t// The guild id of the associated Stage channel\n\tguild_id Snowflake\n\t// The id of the associated Stage channel\n\tchannel_id Snowflake\n\t// The topic of the Stage instance (1-120 characters)\n\ttopic string\n\t// The privacy level of the Stage instance\n\tprivacy_level PrivacyLevel\n\t// The id of the scheduled event for this Stage instance\n\tguild_scheduled_event_id ?Snowflake\n}","name":"StageInstance","parent_name":"","return_type":"","pos":{"len":24,"line_nr":11,"pos":208,"col":0,"last_line":25},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"fn StageInstance.parse(j json2.Any) !StageInstance","name":"StageInstance.parse","parent_name":"","return_type":"!StageInstance","pos":{"len":54,"line_nr":27,"pos":661,"col":0,"last_line":47},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"fn (params CreateStageInstanceParams) build() json2.Any","name":"build","parent_name":"CreateStageInstanceParams","return_type":"x.json2.Any","pos":{"len":59,"line_nr":65,"pos":1751,"col":0,"last_line":80},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"struct CreateStageInstanceParams {\npub mut:\n\treason ?string\n\t// The id of the Stage channel\n\tchannel_id Snowflake @[required]\n\t// The topic of the Stage instance (1-120 characters)\n\ttopic string @[required]\n\t// The privacy level of the Stage instance (default GUILD_ONLY)\n\tprivacy_level ?PrivacyLevel\n\t// Notify @everyone that a Stage instance has started\n\tsend_start_notification ?bool\n\t// The guild scheduled event associated with this Stage instance\n\tguild_scheduled_event_id ?Snowflake\n}","name":"CreateStageInstanceParams","parent_name":"","return_type":"","pos":{"len":36,"line_nr":50,"pos":1254,"col":0,"last_line":63},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"fn (params EditStageInstanceParams) build() json2.Any","name":"build","parent_name":"EditStageInstanceParams","return_type":"x.json2.Any","pos":{"len":57,"line_nr":106,"pos":3229,"col":0,"last_line":115},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\stage_instance.v","content":"struct EditStageInstanceParams {\npub mut:\n\treason ?string\n\t// The topic of the Stage instance (1-120 characters)\n\ttopic ?string\n\t// The privacy level of the Stage instance\n\tprivacy_level ?PrivacyLevel\n}","name":"EditStageInstanceParams","parent_name":"","return_type":"","pos":{"len":34,"line_nr":97,"pos":3021,"col":0,"last_line":104},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"enum StickerType {\n\tstandard\n\tguild\n}","name":"StickerType","parent_name":"","return_type":"","pos":{"len":20,"line_nr":6,"pos":66,"col":0,"last_line":9},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"enum StickerFormatType {\n\tpng\n\tapng\n\tlottie\n\tgif\n}","name":"StickerFormatType","parent_name":"","return_type":"","pos":{"len":26,"line_nr":11,"pos":109,"col":0,"last_line":16},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"struct Sticker {\npub:\n\tid          Snowflake\n\tpack_id     ?Snowflake\n\tname        string\n\tdescription ?string\n\ttags        ?string\n\ttyp         StickerType\n\tformat_type StickerFormatType\n\tavailable   ?bool\n\tguild_id    ?Snowflake\n\tuser        ?User\n\tsort_value  ?int\n}","name":"Sticker","parent_name":"","return_type":"","pos":{"len":18,"line_nr":18,"pos":165,"col":0,"last_line":31},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn Sticker.parse(j json2.Any) !Sticker","name":"Sticker.parse","parent_name":"","return_type":"!Sticker","pos":{"len":42,"line_nr":33,"pos":439,"col":0,"last_line":79},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 The smallest amount of data required to render a sticker. A partial sticker object.","is_multi":false,"pos":{"len":85,"line_nr":81,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"struct StickerItem {\npub:\n\t// id of the sticker\n\tid Snowflake\n\t// name of the sticker\n\tname string\n\t// type of sticker format\n\tformat_type StickerFormatType\n}","name":"StickerItem","parent_name":"","return_type":"","pos":{"len":22,"line_nr":82,"pos":1513,"col":0,"last_line":90},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn StickerItem.parse(j json2.Any) !StickerItem","name":"StickerItem.parse","parent_name":"","return_type":"!StickerItem","pos":{"len":50,"line_nr":92,"pos":1677,"col":0,"last_line":105},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Represents a pack of standard stickers.","is_multi":false,"pos":{"len":41,"line_nr":107,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"struct StickerPack {\npub:\n\t// id of the sticker pack\n\tid Snowflake\n\t// the stickers in the pack\n\tstickers []Sticker\n\t// name of the sticker pack\n\tname string\n\t// id of the pack's SKU\n\tsku_id Snowflake\n\t// id of a sticker in the pack which is shown as the pack's icon\n\tcover_sticker_id ?Snowflake\n\t// description of the sticker pack\n\tdescription string\n\t// id of the sticker pack's banner image\n\tbanner_asset_id ?Snowflake\n}","name":"StickerPack","parent_name":"","return_type":"","pos":{"len":22,"line_nr":108,"pos":2072,"col":0,"last_line":124},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn StickerPack.parse(j json2.Any) !StickerPack","name":"StickerPack.parse","parent_name":"","return_type":"!StickerPack","pos":{"len":50,"line_nr":126,"pos":2501,"col":0,"last_line":153},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn (params CreateGuildStickerParams) build() map[string][]http.FileData","name":"build","parent_name":"CreateGuildStickerParams","return_type":"map[string][]net.http.FileData","pos":{"len":75,"line_nr":195,"pos":5125,"col":0,"last_line":214},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"struct CreateGuildStickerParams {\npub mut:\n\treason ?string\n\t// name of the sticker (2-30 characters)\n\tname string @[required]\n\t// description of the sticker (empty or 2-100 characters)\n\tdescription string\n\t// autocomplete/suggestion tags for the sticker (max 200 characters)\n\ttags string @[required]\n\t// the sticker file to upload, must be a PNG, APNG, GIF, or Lottie JSON file, max 512 KiB\n\tfile Image @[required]\n}","name":"CreateGuildStickerParams","parent_name":"","return_type":"","pos":{"len":35,"line_nr":182,"pos":4703,"col":0,"last_line":193},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"fn (params EditGuildStickerParams) build() json2.Any","name":"build","parent_name":"EditGuildStickerParams","return_type":"x.json2.Any","pos":{"len":56,"line_nr":242,"pos":6780,"col":0,"last_line":258},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\sticker.v","content":"struct EditGuildStickerParams {\npub mut:\n\treason ?string\n\t// name of the sticker (2-30 characters)\n\tname ?string\n\t// description of the sticker (2-100 characters)\n\tdescription ?string = discord.sentinel_string\n\t// autocomplete/suggestion tags for the sticker (max 200 characters)\n\ttags ?string\n}","name":"EditGuildStickerParams","parent_name":"","return_type":"","pos":{"len":33,"line_nr":231,"pos":6487,"col":0,"last_line":240},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"enum UserFlags {\n\t// Discord Employee\n\tstaff\n\t// Partnered Server Owner\n\tpartner\n\t// HypeSquad Events Member\n\thypesquad\n\t// Bug Hunter Level 1\n\tbug_hunter_level_1\n\treserved_4\n\treserved_5\n\t// House Bravery Member\n\thypesquad_online_house_1\n\t// House Brilliance Member\n\thypesquad_online_house_2\n\t// House Balance Member\n\thypesquad_online_house_3\n\t// Early Nitro Supporter\n\tpremium_early_supporter\n\t// User is a team\n\tteam_pseudo_user\n\treserved_11\n\treserved_12\n\treserved_13\n\t// Bug Hunter Level 2\n\tbug_hunter_level_2\n\treserved_15\n\t// Verified Bot\n\tverified_bot\n\t// Early Verified Bot Developer\n\tverified_developer\n\t// Moderator Programs Alumni\n\tcertified_moderator\n\t// Bot uses only HTTP interactions and is shown in the online member list\n\tbot_http_interactions\n\treserved_20\n\treserved_21\n\t// User is an Active Developer\n\tactive_developer\n}","name":"UserFlags","parent_name":"","return_type":"","pos":{"len":18,"line_nr":7,"pos":70,"col":0,"last_line":46},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"enum PremiumType {\n\t// None\n\tnone_\n\t// Nitro Classic\n\tnitro_classic\n\t// Nitro\n\tnitro\n\t// Nitro Basic\n\tnitro_basic\n}","name":"PremiumType","parent_name":"","return_type":"","pos":{"len":20,"line_nr":48,"pos":912,"col":0,"last_line":57},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"struct AvatarDecorationData {\npub:\n\tasset  string\n\tsku_id Snowflake\n}","name":"AvatarDecorationData","parent_name":"","return_type":"","pos":{"len":31,"line_nr":59,"pos":1033,"col":0,"last_line":63},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn AvatarDecorationData.parse(j json2.Any) !AvatarDecorationData","name":"AvatarDecorationData.parse","parent_name":"","return_type":"!AvatarDecorationData","pos":{"len":68,"line_nr":65,"pos":1108,"col":0,"last_line":77},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"struct User {\npub:\n\t// the user's id\n\tid Snowflake\n\t// the user's username, not unique across the platform\n\tusername string\n\t// the user's Discord-tag\n\tdiscriminator string\n\t// the user's display name, if it is set. For bots, this is the application name\n\tglobal_name ?string\n\t// the user's avatar hash\n\tavatar ?string\n\t// whether the user belongs to an OAuth2 application\n\tbot ?bool\n\t// whether the user is an Official Discord System user (part of the urgent message system)\n\tsystem ?bool\n\t// whether the user has two factor enabled on their account\n\tmfa_enabled ?bool\n\t// the user's banner hash\n\tbanner ?string\n\t// the user's banner color encoded as an integer representation of hexadecimal color code\n\taccent_color ?int\n\t// the user's chosen [language option](#Locale)\n\tlocale ?string\n\t// whether the email on this account has been verified\n\tverified ?bool\n\t// the user's email\n\temail ?string\n\t// the flags on a user's account\n\tflags ?UserFlags\n\t// the type of Nitro subscription on a user's account\n\tpremium_type ?PremiumType\n\t// the public flags on a user's account\n\tpublic_flags ?UserFlags\n\t// data for the user's avatar decoration\n\tavatar_decoration_data ?AvatarDecorationData\n}","name":"User","parent_name":"","return_type":"","pos":{"len":15,"line_nr":79,"pos":1435,"col":0,"last_line":115},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn User.parse(j json2.Any) !User","name":"User.parse","parent_name":"","return_type":"!User","pos":{"len":36,"line_nr":117,"pos":2626,"col":0,"last_line":218},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (params EditMyUserParams) build() json2.Any","name":"build","parent_name":"EditMyUserParams","return_type":"x.json2.Any","pos":{"len":50,"line_nr":239,"pos":5337,"col":0,"last_line":252},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"struct EditMyUserParams {\npub mut:\n\t// user's username, if changed may cause the user's discriminator to be randomized.\n\tusername ?string\n\t// if passed, modifies the user's avatar\n\tavatar ?Image = discord.sentinel_image\n}","name":"EditMyUserParams","parent_name":"","return_type":"","pos":{"len":27,"line_nr":231,"pos":5118,"col":0,"last_line":237},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (params CreateGroupDMParams) build() json2.Any","name":"build","parent_name":"CreateGroupDMParams","return_type":"x.json2.Any","pos":{"len":53,"line_nr":288,"pos":7345,"col":0,"last_line":296},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"struct CreateGroupDMParams {\npub mut:\n\t// access tokens of users that have granted your app the `gdm.join` scope\n\taccess_tokens []string @[required]\n\t// a dictionary of user ids to their respective nicknames\n\tnicks map[Snowflake]string @[required]\n}","name":"CreateGroupDMParams","parent_name":"","return_type":"","pos":{"len":30,"line_nr":280,"pos":7090,"col":0,"last_line":286},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"struct PartialUser {\npub:\n\t// the user's id\n\tid Snowflake\n\t// the user's username, not unique across the platform\n\tusername ?string\n\t// the user's Discord-tag\n\tdiscriminator ?string\n\t// the user's display name, if it is set. For bots, this is the application name\n\tglobal_name ?string\n\t// the user's avatar hash\n\tavatar ?string\n\t// whether the user belongs to an OAuth2 application\n\tbot ?bool\n\t// whether the user is an Official Discord System user (part of the urgent message system)\n\tsystem ?bool\n\t// whether the user has two factor enabled on their account\n\tmfa_enabled ?bool\n\t// the user's banner hash\n\tbanner ?string\n\t// the user's banner color encoded as an integer representation of hexadecimal color code\n\taccent_color ?int\n\t// the user's chosen [language option](#Locale)\n\tlocale ?string\n\t// whether the email on this account has been verified\n\tverified ?bool\n\t// the user's email\n\temail ?string\n\t// the flags on a user's account\n\tflags ?UserFlags\n\t// the type of Nitro subscription on a user's account\n\tpremium_type ?PremiumType\n\t// the public flags on a user's account\n\tpublic_flags ?UserFlags\n\t// data for the user's avatar decoration\n\tavatar_decoration_data ?AvatarDecorationData\n}","name":"PartialUser","parent_name":"","return_type":"","pos":{"len":22,"line_nr":305,"pos":8069,"col":0,"last_line":341},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn PartialUser.parse(j json2.Any) !PartialUser","name":"PartialUser.parse","parent_name":"","return_type":"!PartialUser","pos":{"len":50,"line_nr":343,"pos":9269,"col":0,"last_line":449},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"type ConnectionService = string","name":"ConnectionService","parent_name":"","return_type":"","pos":{"len":26,"line_nr":451,"pos":11172,"col":0,"last_line":451},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"enum Visibility {\n\t// invisible to everyone except the user themselves\n\tnone_\n\t// visible to everyone\n\teveryone\n}","name":"Visibility","parent_name":"","return_type":"","pos":{"len":19,"line_nr":453,"pos":11209,"col":0,"last_line":458},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 The connection object that the user has attached.","is_multi":false,"pos":{"len":51,"line_nr":460,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"struct Connection {\npub:\n\t// id of the connection account\n\tid string\n\t// the username of the connection account\n\tname string\n\t// the service of this connection\n\ttyp ConnectionService\n\t// whether the connection is revoked\n\trevoked ?bool\n\t// an array of partial [server integrations](#PartialIntegration)\n\tintegrations ?[]PartialIntegration\n\t// whether the connection is verified\n\tverified bool\n\t// whether friend sync is enabled for this connection\n\tfriend_sync bool\n\t// whether activities related to this connection will be shown in presence updates\n\tshow_activity bool\n\t// whether this connection has a corresponding third party OAuth2 token\n\ttwo_way_link bool\n\t// visibility of this connection\n\tvisibility Visibility\n}","name":"Connection","parent_name":"","return_type":"","pos":{"len":21,"line_nr":461,"pos":11381,"col":0,"last_line":483},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn Connection.parse(j json2.Any) !Connection","name":"Connection.parse","parent_name":"","return_type":"!Connection","pos":{"len":48,"line_nr":485,"pos":12107,"col":0,"last_line":515},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"struct ApplicationRoleConnection {\npub:\n\t// the vanity name of the platform a bot has connected (max 50 characters)\n\tplatform_name ?string\n\t// the username on the platform a bot has connected (max 100 characters)\n\tplatform_username ?string\n\t// object mapping [application role connection metadata](#ApplicationRoleConnectionMetadata) keys to their string-ified value (max 100 characters) for the user on the platform a bot has connected\n\tmetadata map[string]string\n}","name":"ApplicationRoleConnection","parent_name":"","return_type":"","pos":{"len":36,"line_nr":525,"pos":13268,"col":0,"last_line":533},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn ApplicationRoleConnection.parse(j json2.Any) !ApplicationRoleConnection","name":"ApplicationRoleConnection.parse","parent_name":"","return_type":"!ApplicationRoleConnection","pos":{"len":78,"line_nr":535,"pos":13740,"col":0,"last_line":561},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"fn (params UpdateMyApplicationRoleConnectionParams) build() json2.Any","name":"build","parent_name":"UpdateMyApplicationRoleConnectionParams","return_type":"x.json2.Any","pos":{"len":73,"line_nr":579,"pos":15506,"col":0,"last_line":593},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\user.v","content":"struct UpdateMyApplicationRoleConnectionParams {\npub mut:\n\t// the vanity name of the platform a bot has connected (max 50 characters)\n\tplatform_name ?string\n\t// the username on the platform a bot has connected (max 100 characters)\n\tplatform_username ?string\n\t// object mapping [application role connection metadata](#ApplicationRoleConnectionMetadata) keys to their string-ified value (max 100 characters) for the user on the platform a bot has connected\n\tmetadata ?map[string]string\n}","name":"UpdateMyApplicationRoleConnectionParams","parent_name":"","return_type":"","pos":{"len":50,"line_nr":569,"pos":15015,"col":0,"last_line":577},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 2015-04-26T06:26:56.936000+00:00","is_multi":false,"pos":{"len":34,"line_nr":11,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"fn format_iso8601(t time.Time) string","name":"format_iso8601","parent_name":"","return_type":"string","pos":{"len":41,"line_nr":12,"pos":188,"col":0,"last_line":15},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"fn extract_id_from_token(token string) !Snowflake","name":"extract_id_from_token","parent_name":"","return_type":"!Snowflake","pos":{"len":53,"line_nr":17,"pos":396,"col":0,"last_line":34},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"fn maybe_map[T, X](a []T, f fn (T) !X) ![]X","name":"maybe_map","parent_name":"","return_type":"![]X","pos":{"len":47,"line_nr":36,"pos":875,"col":0,"last_line":42},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"fn maybe_map_map[T, U, X, Y](m map[T]U, f fn (T, U) !(X, Y)) !map[X]Y","name":"maybe_map_map","parent_name":"","return_type":"!map[X]Y","pos":{"len":73,"line_nr":44,"pos":994,"col":0,"last_line":51},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"fn verify_request(public_key ed25519.PublicKey, req http.Request) bool","name":"verify_request","parent_name":"","return_type":"bool","pos":{"len":74,"line_nr":53,"pos":1157,"col":0,"last_line":60},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"fn milliseconds_as_time(ts i64) time.Time","name":"milliseconds_as_time","parent_name":"","return_type":"time.Time","pos":{"len":45,"line_nr":62,"pos":1598,"col":0,"last_line":64},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"fn bulk_delete_in_map[K, V](mut m map[K]V, a []K)","name":"bulk_delete_in_map","parent_name":"","return_type":"void","pos":{"len":53,"line_nr":66,"pos":1713,"col":0,"last_line":70},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\util.v","content":"type Locale = string","name":"Locale","parent_name":"","return_type":"","pos":{"len":15,"line_nr":72,"pos":1803,"col":0,"last_line":72},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Used to represent a user's voice connection status.","is_multi":false,"pos":{"len":53,"line_nr":5,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\voice.v","content":"struct VoiceState {\npub:\n\t// the guild id this voice state is for\n\tguild_id ?Snowflake\n\t// the channel id this user is connected to\n\tchannel_id ?Snowflake\n\t// the user id this voice state is for\n\tuser_id Snowflake\n\t// the guild member this voice state is for\n\tmember ?GuildMember\n\t// the session id for this voice state\n\tsession_id string\n\t// whether this user is deafened by the server\n\tdeaf bool\n\t// whether this user is muted by the server\n\tmute bool\n\t// whether this user is locally deafened\n\tself_deaf bool\n\t// whether this user is locally muted\n\tself_mute bool\n\t// whether this user is streaming using \"Go Live\"\n\tself_stream ?bool\n\t// whether this user's camera is enabled\n\tself_video bool\n\t// whether this user's permission to speak is denied\n\tsuppress bool\n\t// the time at which the user requested to speak\n\trequest_to_speak_timestamp ?time.Time\n}","name":"VoiceState","parent_name":"","return_type":"","pos":{"len":21,"line_nr":6,"pos":99,"col":0,"last_line":34},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\voice.v","content":"fn VoiceState.parse(j json2.Any) !VoiceState","name":"VoiceState.parse","parent_name":"","return_type":"!VoiceState","pos":{"len":48,"line_nr":36,"pos":960,"col":0,"last_line":81},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\voice.v","content":"struct VoiceRegion {\npub:\n\t// unique ID for the region\n\tid string\n\t// name of the region\n\tname string\n\t// true for a single server that is closest to the current user's client\n\toptimal bool\n\t// whether this is a deprecated voice region (avoid switching to these)\n\tdeprecated bool\n\t// whether this is a custom voice region (used for events/etc)\n\tcustom bool\n}","name":"VoiceRegion","parent_name":"","return_type":"","pos":{"len":22,"line_nr":83,"pos":2124,"col":0,"last_line":95},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\voice.v","content":"fn VoiceRegion.parse(j json2.Any) !VoiceRegion","name":"VoiceRegion.parse","parent_name":"","return_type":"!VoiceRegion","pos":{"len":50,"line_nr":97,"pos":2488,"col":0,"last_line":112},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"enum WebhookType {\n\t// Incoming Webhooks can post messages to channels with a generated token\n\tincoming         = 1\n\t// Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels\n\tchannel_follower\n\t// Application webhooks are webhooks used with Interactions\n\tapplication\n}","name":"WebhookType","parent_name":"","return_type":"","pos":{"len":20,"line_nr":6,"pos":64,"col":0,"last_line":13},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (webhook &Webhook) edit(params EditWebhookParams) !Webhook","name":"edit","parent_name":"Webhook","return_type":"!Webhook","pos":{"len":65,"line_nr":231,"pos":7411,"col":0,"last_line":236},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (webhook &Webhook) delete(params ReasonParam) !","name":"delete","parent_name":"Webhook","return_type":"!","pos":{"len":54,"line_nr":257,"pos":8790,"col":0,"last_line":261},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (webhook &Webhook) execute(params ExecuteWebhookParams) !&Message","name":"execute","parent_name":"Webhook","return_type":"Message","pos":{"len":72,"line_nr":380,"pos":13702,"col":0,"last_line":384},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"struct Webhook {\npub:\n\t// the id of the webhook\n\tid Snowflake\n\t// the type of the webhook\n\ttyp WebhookType\n\t// the guild id this webhook is for, if any\n\tguild_id ?Snowflake\n\t// the channel id this webhook is for, if any\n\tchannel_id ?Snowflake\n\t// the user this webhook was created by (not returned when getting a webhook with its token)\n\tuser ?User\n\t// the default name of the webhook\n\tname ?string\n\t// the default user avatar hash of the webhook\n\tavatar ?string\n\t// the secure token of the webhook (returned for Incoming Webhooks)\n\ttoken ?string\n\t// the bot/OAuth2 application that created this webhook\n\tapplication_id ?Snowflake\n\t// the guild of the channel that this webhook is following (returned for Channel Follower Webhooks)\n\tsource_guild ?PartialGuild\n\t// the channel that this webhook is following (returned for Channel Follower Webhooks)\n\tsource_channel ?PartialChannel\n\t// the url used for executing the webhook (returned by the webhooks OAuth2 flow)\n\turl ?string\n}","name":"Webhook","parent_name":"","return_type":"","pos":{"len":18,"line_nr":15,"pos":394,"col":0,"last_line":41},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn Webhook.parse(j json2.Any) !Webhook","name":"Webhook.parse","parent_name":"","return_type":"!Webhook","pos":{"len":42,"line_nr":43,"pos":1376,"col":0,"last_line":113},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (params CreateWebhookParams) build() json2.Any","name":"build","parent_name":"CreateWebhookParams","return_type":"x.json2.Any","pos":{"len":53,"line_nr":125,"pos":3005,"col":0,"last_line":137},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"struct CreateWebhookParams {\npub mut:\n\treason ?string\n\t// name of the webhook (1-80 characters)\n\tname string @[required]\n\t// image for the default webhook avatar\n\tavatar ?Image = discord.sentinel_image\n}","name":"CreateWebhookParams","parent_name":"","return_type":"","pos":{"len":30,"line_nr":116,"pos":2804,"col":0,"last_line":123},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (params EditWebhookParams) build() json2.Any","name":"build","parent_name":"EditWebhookParams","return_type":"x.json2.Any","pos":{"len":51,"line_nr":190,"pos":5782,"col":0,"last_line":206},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"struct EditWebhookParams {\npub mut:\n\treason ?string\n\t// the default name of the webhook\n\tname ?string\n\t// image for the default webhook avatar\n\tavatar ?Image = discord.sentinel_image\n\t// the new channel id this webhook should be moved to\n\tchannel_id ?Snowflake\n}","name":"EditWebhookParams","parent_name":"","return_type":"","pos":{"len":28,"line_nr":179,"pos":5522,"col":0,"last_line":188},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Same as above, except this call does not require authentication, does not accept a `channel_id` parameter in the body, and does not return a user in the webhook object.","is_multi":false,"pos":{"len":170,"line_nr":216,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn REST.edit_webhook_with_token(webhook_id Snowflake, webhook_token string, params EditWebhookParams) !Webhook","name":"REST.edit_webhook_with_token","parent_name":"","return_type":"!Webhook","pos":{"len":114,"line_nr":217,"pos":6747,"col":0,"last_line":223},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Same as above, except this call does not require authentication.","is_multi":false,"pos":{"len":66,"line_nr":243,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn REST.delete_webhook_with_token(webhook_id Snowflake, webhook_token string, params ReasonParam) !","name":"REST.delete_webhook_with_token","parent_name":"","return_type":"!","pos":{"len":103,"line_nr":244,"pos":8218,"col":0,"last_line":249},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (params ExecuteWebhookParams) build() json2.Any","name":"build","parent_name":"ExecuteWebhookParams","return_type":"x.json2.Any","pos":{"len":54,"line_nr":293,"pos":10257,"col":0,"last_line":331},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (params ExecuteWebhookParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"ExecuteWebhookParams","return_type":"net.urllib.Values","pos":{"len":71,"line_nr":333,"pos":11237,"col":0,"last_line":342},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"struct ExecuteWebhookParams {\npub mut:\n\t// waits for server confirmation of message send before response, and returns the created message body (defaults to `false`; when `false` a message that is not saved does not return an error)\n\twait ?bool\n\t// Send a message to the specified thread within a webhook's channel. The thread will automatically be unarchived.\n\tthread_id ?Snowflake\n\t// the message contents (up to 2000 characters)\n\tcontent ?string\n\t// override the default username of the webhook\n\tusername ?string\n\t// override the default avatar of the webhook\n\tavatar_url ?string\n\t// true if this is a TTS message\n\ttts ?bool\n\t// embedded `rich` content\n\tembeds ?[]Embed\n\t// allowed mentions for the message\n\tallowed_mentions ?AllowedMentions\n\t// the components to include with the message\n\tcomponents ?[]Component\n\t// the contents of the file being sent, attachment objects with filename and description\n\tfiles ?[]File\n\t// message flags combined as a bitfield (only `.suppress_embeds` can be set)\n\tflags ?MessageFlags\n\t// name of thread to create (requires the webhook channel to be a forum or media channel)\n\tthread_name ?string\n\t// array of tag ids to apply to the thread (requires the webhook channel to be a forum or media channel)\n\tapplied_tags ?[]Snowflake\n}","name":"ExecuteWebhookParams","parent_name":"","return_type":"","pos":{"len":31,"line_nr":263,"pos":8985,"col":0,"last_line":291},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Returns a message or `204 No Content` depending on the `wait` query parameter.","is_multi":false,"pos":{"len":80,"line_nr":344,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > i Note that when sending a message, you must provide a value for at least one of `content`, `embeds`, `components`, or `files`.","is_multi":false,"pos":{"len":131,"line_nr":345,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > i If the webhook channel is a forum or media channel, you must provide either `thread_id` in the query string params, or `thread_name` in the JSON/form params. If `thread_id` is provided, the message will send in that thread. If `thread_name` is provided, a thread with that name will be created in the channel.","is_multi":false,"pos":{"len":315,"line_nr":346,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 > ! Discord may strip certain characters from message content, like invalid unicode characters or characters which cause unexpected message formatting. If you are passing user-generated strings into message content, consider sanitizing the data to prevent unexpected behavior and using `allowed_mentions` to prevent unexpected mentions.","is_multi":false,"pos":{"len":338,"line_nr":347,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 pub fn (rest &REST) execute_webhook(webhook_id Snowflake, webhook_token string, params ExecuteWebhookParams) !&Message {","is_multi":false,"pos":{"len":122,"line_nr":348,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn REST.execute_webhook(webhook_id Snowflake, webhook_token string, params ExecuteWebhookParams) !&Message","name":"REST.execute_webhook","parent_name":"","return_type":"Message","pos":{"len":110,"line_nr":349,"pos":12528,"col":0,"last_line":372},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (params FetchWebhookMessageParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"FetchWebhookMessageParams","return_type":"net.urllib.Values","pos":{"len":76,"line_nr":393,"pos":14034,"col":0,"last_line":399},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"struct FetchWebhookMessageParams {\npub mut:\n\t// id of the thread the message is in\n\tthread_id ?Snowflake\n}","name":"FetchWebhookMessageParams","parent_name":"","return_type":"","pos":{"len":36,"line_nr":387,"pos":13922,"col":0,"last_line":391},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (params EditWebhookMessageParams) build() json2.Any","name":"build","parent_name":"EditWebhookMessageParams","return_type":"x.json2.Any","pos":{"len":58,"line_nr":435,"pos":15464,"col":0,"last_line":455},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (params EditWebhookMessageParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"EditWebhookMessageParams","return_type":"net.urllib.Values","pos":{"len":75,"line_nr":457,"pos":16036,"col":0,"last_line":463},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"struct EditWebhookMessageParams {\npub mut:\n\t// id of the thread the message is in\n\tthread_id ?Snowflake\n\t// the message contents (up to 2000 characters)\n\tcontent ?string\n\t// embedded `rich` content\n\tembeds ?[]Embed\n\t// allowed mentions for the message\n\tallowed_mentions ?AllowedMentions\n\t// the components to include with the message\n\tcomponents ?[]Component\n\t// the contents of the file being sent/edited, attached files to keep and possible descriptions for new files\n\tfiles ?[]File\n}","name":"EditWebhookMessageParams","parent_name":"","return_type":"","pos":{"len":35,"line_nr":419,"pos":14972,"col":0,"last_line":433},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"fn (params DeleteWebhookMessageParams) build_query_values() urllib.Values","name":"build_query_values","parent_name":"DeleteWebhookMessageParams","return_type":"net.urllib.Values","pos":{"len":77,"line_nr":497,"pos":17904,"col":0,"last_line":503},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\webhook.v","content":"struct DeleteWebhookMessageParams {\npub mut:\n\t// id of the thread the message is in\n\tthread_id ?Snowflake\n}","name":"DeleteWebhookMessageParams","parent_name":"","return_type":"","pos":{"len":37,"line_nr":491,"pos":17791,"col":0,"last_line":495},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\ws.v","content":"enum WSMessageOpcode {\n\t// An event was dispatched.\n\tdispatch              = 0\n\t// Fired periodically by the client to keep the connection alive.\n\theartbeat\n\t// Starts a new session during the initial handshake.\n\tidentify\n\t// Update the client's presence.\n\tupdate_presence\n\t// Used to join/leave or move between voice channels.\n\tvoice_state_update\n\t// Resume a previous session that was disconnected.\n\tresume                = 6\n\t// You should attempt to reconnect and resume immediately.\n\treconnect\n\t// Request information about offline guild members in a large guild.\n\trequest_guild_members\n\t// The session has been invalidated. You should reconnect and identify/resume accordingly.\n\tinvalid_session\n\t// Sent immediately after connecting, contains the `heartbeat_interval` to use.\n\thello\n\t// Sent in response to receiving a heartbeat to acknowledge that it has been received.\n\theartbeat_ack\n}","name":"WSMessageOpcode","parent_name":"","return_type":"","pos":{"len":24,"line_nr":5,"pos":53,"col":0,"last_line":28},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"C:\\Users\\mclr\\.vmodules\\discord\\src\\ws.v","content":"struct WSMessage {\npub:\n\topcode WSMessageOpcode\n\tdata   json2.Any\n\tseq    ?int\n\tevent  string\n}","name":"WSMessage","parent_name":"","return_type":"","pos":{"len":20,"line_nr":30,"pos":952,"col":0,"last_line":36},"platform":"cross","kind":"struct_","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-02-05 19:45:46"}