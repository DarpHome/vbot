{"module_name":"wasm","description":"## Description:\n\nThe `wasm` module is a pure V implementation of the WebAssembly bytecode module format, available in the form of a builder.\n\nIt allows users to generate WebAssembly modules in memory.\n\nWith the V wasm module, users can create functions, opcodes, and utilize the entire wasm specification without the need for a large dependency like binaryen. All of this functionality is available within V itself, making the module a valuable resource for V developers seeking to build high-performance web applications.\n\nThe module is designed to generate a `[]u8`, which can be written to a `.wasm` file or executed in memory.\n\nExamples are present in `examples/wasm_codegen`.\n\n\n```v\nimport wasm\nimport os\n\nfn main() {\nmut m := wasm.Module{}\nmut func := m.new_function('add', [.i32_t, .i32_t], [.i32_t])\n{\nfunc.local_get(0) // | local.get 0\nfunc.local_get(1) // | local.get 1\nfunc.add(.i32_t) // | i32.add\n}\nm.commit(func, true) // `export: true`\n\nmod := m.compile() // []u8\n\nos.write_file_array('add.wasm', mod)!\n}\n```\n\nThis module does not perform verification of the WebAssembly output.\nUse a tool like `wasm-validate` to validate, and `wasm-dis` to show a decompiled form.\n","contents":[{"attributes":{},"comments":[{"text":"\u0001 constexpr_value returns a constant expression that evaluates to a single value.","is_multi":false,"pos":{"len":81,"line_nr":7,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn constexpr_value[T](v T) ConstExpression","name":"constexpr_value","parent_name":"","return_type":"ConstExpression","pos":{"len":46,"line_nr":8,"pos":271,"col":0,"last_line":24},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 constexpr_value_zero returns a constant expression that evaluates to zero.","is_multi":false,"pos":{"len":76,"line_nr":26,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn constexpr_value_zero(v ValType) ConstExpression","name":"constexpr_value_zero","parent_name":"","return_type":"ConstExpression","pos":{"len":54,"line_nr":27,"pos":698,"col":0,"last_line":52},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 constexpr_ref_null returns a constant expression that evaluates to a null reference.","is_multi":false,"pos":{"len":86,"line_nr":54,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn constexpr_ref_null(rt RefType) ConstExpression","name":"constexpr_ref_null","parent_name":"","return_type":"ConstExpression","pos":{"len":53,"line_nr":55,"pos":1197,"col":0,"last_line":61},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 WebAssembly constant expressions are permitted to use a subset of valid instructions.","is_multi":false,"pos":{"len":87,"line_nr":63,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 i32_const places a constant i32 value on the stack.","is_multi":false,"pos":{"len":53,"line_nr":70,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32.const`.","is_multi":false,"pos":{"len":39,"line_nr":71,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) i32_const(v i32)","name":"i32_const","parent_name":"ConstExpression","return_type":"void","pos":{"len":50,"line_nr":72,"pos":1588,"col":0,"last_line":75},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64_const places a constant i64 value on the stack.","is_multi":false,"pos":{"len":53,"line_nr":77,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i64.const`.","is_multi":false,"pos":{"len":39,"line_nr":78,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) i64_const(v i64)","name":"i64_const","parent_name":"ConstExpression","return_type":"void","pos":{"len":50,"line_nr":79,"pos":1807,"col":0,"last_line":82},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32_const places a constant f32 value on the stack.","is_multi":false,"pos":{"len":53,"line_nr":84,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32.const`.","is_multi":false,"pos":{"len":39,"line_nr":85,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) f32_const(v f32)","name":"f32_const","parent_name":"ConstExpression","return_type":"void","pos":{"len":50,"line_nr":86,"pos":2026,"col":0,"last_line":89},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64_const places a constant f64 value on the stack.","is_multi":false,"pos":{"len":53,"line_nr":91,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f64.const`.","is_multi":false,"pos":{"len":39,"line_nr":92,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) f64_const(v f64)","name":"f64_const","parent_name":"ConstExpression","return_type":"void","pos":{"len":50,"line_nr":93,"pos":2238,"col":0,"last_line":96},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 add adds two values on the stack with type `typ`.","is_multi":false,"pos":{"len":51,"line_nr":98,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.add`.","is_multi":false,"pos":{"len":42,"line_nr":99,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) add(typ NumType)","name":"add","parent_name":"ConstExpression","return_type":"void","pos":{"len":50,"line_nr":100,"pos":2451,"col":0,"last_line":108},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sub subtracts two values on the stack with type `typ`.","is_multi":false,"pos":{"len":56,"line_nr":110,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.sub`.","is_multi":false,"pos":{"len":42,"line_nr":111,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) sub(typ NumType)","name":"sub","parent_name":"ConstExpression","return_type":"void","pos":{"len":50,"line_nr":112,"pos":2752,"col":0,"last_line":120},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 mul multiplies two values on the stack with type `typ`.","is_multi":false,"pos":{"len":57,"line_nr":122,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.mul`.","is_multi":false,"pos":{"len":42,"line_nr":123,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) mul(typ NumType)","name":"mul","parent_name":"ConstExpression","return_type":"void","pos":{"len":50,"line_nr":124,"pos":3054,"col":0,"last_line":132},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 global_get places the value of the global at the index `global` on the stack.","is_multi":false,"pos":{"len":79,"line_nr":134,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Constant expressions are only allowed to refer to imported globals.","is_multi":false,"pos":{"len":69,"line_nr":135,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `global.get`.","is_multi":false,"pos":{"len":40,"line_nr":136,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) global_get(global GlobalImportIndex)","name":"global_get","parent_name":"ConstExpression","return_type":"void","pos":{"len":70,"line_nr":137,"pos":3447,"col":0,"last_line":140},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ref_null places a null reference on the stack.","is_multi":false,"pos":{"len":48,"line_nr":142,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `ref.null`.","is_multi":false,"pos":{"len":38,"line_nr":143,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) ref_null(rt RefType)","name":"ref_null","parent_name":"ConstExpression","return_type":"void","pos":{"len":54,"line_nr":144,"pos":3691,"col":0,"last_line":147},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ref_func places a reference to a function with `name` on the stack.","is_multi":false,"pos":{"len":69,"line_nr":149,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If this function does not exist when calling `compile` on the module, it will panic.","is_multi":false,"pos":{"len":86,"line_nr":150,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `ref.func`.","is_multi":false,"pos":{"len":38,"line_nr":151,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) ref_func(name string)","name":"ref_func","parent_name":"ConstExpression","return_type":"void","pos":{"len":55,"line_nr":152,"pos":4002,"col":0,"last_line":158},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ref_func places a reference to an imported function with `name` on the stack.","is_multi":false,"pos":{"len":79,"line_nr":160,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If the imported function does not exist when calling `compile` on the module, it will panic.","is_multi":false,"pos":{"len":94,"line_nr":161,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `ref.func`.","is_multi":false,"pos":{"len":38,"line_nr":162,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"fn (mut expr ConstExpression) ref_func_import(mod string, name string)","name":"ref_func_import","parent_name":"ConstExpression","return_type":"void","pos":{"len":74,"line_nr":163,"pos":4389,"col":0,"last_line":170},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\constant.v","content":"struct ConstExpression {\nmut:\n\tcall_patches []CallPatch\n\tcode         []u8\n}","name":"ConstExpression","parent_name":"","return_type":"","pos":{"len":26,"line_nr":64,"pos":1410,"col":0,"last_line":68},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Module contains the WebAssembly module.","is_multi":false,"pos":{"len":41,"line_nr":57,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Use the `compile` method to compile the module into a pure byte array.","is_multi":false,"pos":{"len":72,"line_nr":58,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 assign_global_init assigns a global with the constant expression `init`.","is_multi":false,"pos":{"len":74,"line_nr":275,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See `new_global`.","is_multi":false,"pos":{"len":19,"line_nr":276,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) assign_global_init(global GlobalIndex, init ConstExpression)","name":"assign_global_init","parent_name":"Module","return_type":"void","pos":{"len":84,"line_nr":277,"pos":6207,"col":0,"last_line":279},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 assign_memory assigns memory to the current module.","is_multi":false,"pos":{"len":53,"line_nr":174,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) assign_memory(name string, export bool, min u32, max ?u32)","name":"assign_memory","parent_name":"Module","return_type":"void","pos":{"len":82,"line_nr":175,"pos":3413,"col":0,"last_line":182},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 assign_start assigns the start function to the current module.","is_multi":false,"pos":{"len":64,"line_nr":184,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) assign_start(name string)","name":"assign_start","parent_name":"Module","return_type":"void","pos":{"len":49,"line_nr":185,"pos":3644,"col":0,"last_line":187},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 commit commits a function to the module, use `export` to export the function.","is_multi":false,"pos":{"len":79,"line_nr":215,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) commit(func Function, export bool)","name":"commit","parent_name":"Module","return_type":"void","pos":{"len":58,"line_nr":216,"pos":4562,"col":0,"last_line":223},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 compile serialises the WebAssembly module into a byte array.","is_multi":false,"pos":{"len":62,"line_nr":131,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The returned byte array can be written out into a `.wasm`, or executed in memory.","is_multi":false,"pos":{"len":83,"line_nr":132,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\encoding.v","content":"fn (mut mod Module) compile() []u8","name":"compile","parent_name":"Module","return_type":"[]u8","pos":{"len":38,"line_nr":133,"pos":2813,"col":0,"last_line":451},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 enable_debug sets whether to emit debug information for not.","is_multi":false,"pos":{"len":62,"line_nr":168,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) enable_debug(mod_name ?string)","name":"enable_debug","parent_name":"Module","return_type":"void","pos":{"len":54,"line_nr":169,"pos":3255,"col":0,"last_line":172},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_data_segment inserts a new data segment at the memory index `pos`.","is_multi":false,"pos":{"len":72,"line_nr":225,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `name` is optional, it is used for debug info.","is_multi":false,"pos":{"len":48,"line_nr":226,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) new_data_segment(name ?string, pos int, data []u8) DataSegmentIndex","name":"new_data_segment","parent_name":"Module","return_type":"DataSegmentIndex","pos":{"len":91,"line_nr":227,"pos":4862,"col":0,"last_line":235},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_debug_function creates a function struct with extra debug information.","is_multi":false,"pos":{"len":76,"line_nr":150,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `argument_names` must be the same length as the parameters in the function type `typ`.","is_multi":false,"pos":{"len":88,"line_nr":151,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) new_debug_function(name string, typ FuncType, argument_names []?string) Function","name":"new_debug_function","parent_name":"Module","return_type":"Function","pos":{"len":104,"line_nr":152,"pos":2768,"col":0,"last_line":166},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_function creates a function struct.","is_multi":false,"pos":{"len":41,"line_nr":134,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) new_function(name string, parameters []ValType, results []ValType) Function","name":"new_function","parent_name":"Module","return_type":"Function","pos":{"len":99,"line_nr":135,"pos":2213,"col":0,"last_line":148},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_function_import imports a new function into the current module.","is_multi":false,"pos":{"len":69,"line_nr":189,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) new_function_import(modn string, name string, parameters []ValType, results []ValType)","name":"new_function_import","parent_name":"Module","return_type":"void","pos":{"len":110,"line_nr":190,"pos":3788,"col":0,"last_line":200},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_function_import_debug imports a new function into the current module with extra debug information.","is_multi":false,"pos":{"len":104,"line_nr":202,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) new_function_import_debug(modn string, name string, typ FuncType)","name":"new_function_import_debug","parent_name":"Module","return_type":"void","pos":{"len":89,"line_nr":203,"pos":4214,"col":0,"last_line":213},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_global creates a global and returns it's index.","is_multi":false,"pos":{"len":53,"line_nr":246,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See `global_get`, `global_set`.","is_multi":false,"pos":{"len":33,"line_nr":247,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) new_global(name string, export bool, typ ValType, is_mut bool, init ConstExpression) GlobalIndex","name":"new_global","parent_name":"Module","return_type":"GlobalIndex","pos":{"len":120,"line_nr":248,"pos":5408,"col":0,"last_line":258},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_global_import imports a new global into the current module and returns it's index.","is_multi":false,"pos":{"len":88,"line_nr":260,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See `global_get`, `global_set`.","is_multi":false,"pos":{"len":33,"line_nr":261,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) new_global_import(modn string, name string, typ ValType, is_mut bool) GlobalImportIndex","name":"new_global_import","parent_name":"Module","return_type":"GlobalImportIndex","pos":{"len":111,"line_nr":262,"pos":5793,"col":0,"last_line":273},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_passive_data_segment inserts a new passive data segment.","is_multi":false,"pos":{"len":62,"line_nr":237,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 `name` is optional, it is used for debug info.","is_multi":false,"pos":{"len":48,"line_nr":238,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"fn (mut mod Module) new_passive_data_segment(name ?string, data []u8)","name":"new_passive_data_segment","parent_name":"Module","return_type":"void","pos":{"len":73,"line_nr":239,"pos":5180,"col":0,"last_line":244},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"struct Module {\nmut:\n\tbuf            []u8\n\tfunctypes      []FuncType\n\tfunctions      map[string]Function\n\tglobals        []Global\n\tmemory         ?Memory\n\tstart          ?string\n\tfn_imports     []FunctionImport\n\tglobal_imports []GlobalImport\n\tsegments       []DataSegment\n\tdebug          bool\n\tmod_name       ?string\n}","name":"Module","parent_name":"","return_type":"","pos":{"len":17,"line_nr":60,"pos":1052,"col":0,"last_line":73},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 abs gets the absolute value of a float with type `typ`.","is_multi":false,"pos":{"len":57,"line_nr":422,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.abs`.","is_multi":false,"pos":{"len":41,"line_nr":423,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) abs(typ NumType)","name":"abs","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":424,"pos":10677,"col":0,"last_line":432},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 add adds two values on the stack with type `typ`.","is_multi":false,"pos":{"len":51,"line_nr":206,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64|f32|f64.add`.","is_multi":false,"pos":{"len":50,"line_nr":207,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) add(typ NumType)","name":"add","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":208,"pos":5247,"col":0,"last_line":215},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 and takes the bitwise and of two values on the stack with type `typ`.","is_multi":false,"pos":{"len":71,"line_nr":290,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.and`.","is_multi":false,"pos":{"len":41,"line_nr":291,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) b_and(typ NumType)","name":"b_and","parent_name":"Function","return_type":"void","pos":{"len":45,"line_nr":292,"pos":7388,"col":0,"last_line":300},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 or takes the bitwise or of two values on the stack with type `typ`.","is_multi":false,"pos":{"len":69,"line_nr":302,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.or`.","is_multi":false,"pos":{"len":40,"line_nr":303,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) b_or(typ NumType)","name":"b_or","parent_name":"Function","return_type":"void","pos":{"len":44,"line_nr":304,"pos":7695,"col":0,"last_line":312},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 shl performs bitwise left-shift on a value with type `typ`.","is_multi":false,"pos":{"len":61,"line_nr":326,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.shl`.","is_multi":false,"pos":{"len":41,"line_nr":327,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) b_shl(typ NumType)","name":"b_shl","parent_name":"Function","return_type":"void","pos":{"len":45,"line_nr":328,"pos":8302,"col":0,"last_line":336},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 shr performs bitwise right-shift on a value with type `typ`, with respect to `is_signed`.","is_multi":false,"pos":{"len":91,"line_nr":338,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.shr_s`, `i32|i64.shr_u`.","is_multi":false,"pos":{"len":61,"line_nr":339,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) b_shr(typ NumType, is_signed bool)","name":"b_shr","parent_name":"Function","return_type":"void","pos":{"len":61,"line_nr":340,"pos":8652,"col":0,"last_line":360},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 xor takes the bitwise xor of two values on the stack with type `typ`.","is_multi":false,"pos":{"len":71,"line_nr":314,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.xor`.","is_multi":false,"pos":{"len":41,"line_nr":315,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) b_xor(typ NumType)","name":"b_xor","parent_name":"Function","return_type":"void","pos":{"len":45,"line_nr":316,"pos":8002,"col":0,"last_line":324},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 c_block creates a label that can later be branched out of with `c_br` and `c_br_if`.","is_multi":false,"pos":{"len":86,"line_nr":916,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Blocks are strongly typed, you must supply a list of types for `parameters` and `results`.","is_multi":false,"pos":{"len":92,"line_nr":917,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 All blocks must be ended, see the `c_end` function.","is_multi":false,"pos":{"len":53,"line_nr":918,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) c_block(parameters []ValType, results []ValType) LabelIndex","name":"c_block","parent_name":"Function","return_type":"LabelIndex","pos":{"len":86,"line_nr":919,"pos":23037,"col":0,"last_line":924},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 c_br branches to a loop or block with the label passed in at `label`.","is_multi":false,"pos":{"len":71,"line_nr":968,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `br`.","is_multi":false,"pos":{"len":32,"line_nr":969,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) c_br(label LabelIndex)","name":"c_br","parent_name":"Function","return_type":"void","pos":{"len":49,"line_nr":970,"pos":25150,"col":0,"last_line":975},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 c_br_if branches to a loop or block with the label passed in at `label`, based on an i32 condition.","is_multi":false,"pos":{"len":101,"line_nr":977,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `br_if`.","is_multi":false,"pos":{"len":35,"line_nr":978,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) c_br_if(label LabelIndex)","name":"c_br_if","parent_name":"Function","return_type":"void","pos":{"len":52,"line_nr":979,"pos":25459,"col":0,"last_line":984},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 c_else opens the else case of an if expression, it must be closed by calling `c_end`.","is_multi":false,"pos":{"len":87,"line_nr":948,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) c_else(label LabelIndex)","name":"c_else","parent_name":"Function","return_type":"void","pos":{"len":51,"line_nr":949,"pos":24396,"col":0,"last_line":952},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 c_end ends the block, loop or if expression with the label passed in at `label`.","is_multi":false,"pos":{"len":82,"line_nr":960,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) c_end(label LabelIndex)","name":"c_end","parent_name":"Function","return_type":"void","pos":{"len":50,"line_nr":961,"pos":24780,"col":0,"last_line":966},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 c_if opens an if expression. It executes a statement if the last item on the stack is true.","is_multi":false,"pos":{"len":93,"line_nr":936,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It creates a label that can later be branched out of with `c_br` and `c_br_if`.","is_multi":false,"pos":{"len":81,"line_nr":937,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If expressions are strongly typed, you must supply a list of types for `parameters` and `results`.","is_multi":false,"pos":{"len":100,"line_nr":938,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Call `c_else` to open the else case of an if expression, or close it by calling `c_end_if`.","is_multi":false,"pos":{"len":93,"line_nr":939,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 All if expressions must be ended, see the `c_end` function.","is_multi":false,"pos":{"len":61,"line_nr":940,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) c_if(parameters []ValType, results []ValType) LabelIndex","name":"c_if","parent_name":"Function","return_type":"LabelIndex","pos":{"len":83,"line_nr":941,"pos":24108,"col":0,"last_line":946},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 c_loop creates a label that can later be branched to with `c_br` and `c_br_if`.","is_multi":false,"pos":{"len":81,"line_nr":926,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Loops are strongly typed, you must supply a list of types for `parameters` and `results`.","is_multi":false,"pos":{"len":91,"line_nr":927,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 All loops must be ended, see the `c_end` function.","is_multi":false,"pos":{"len":52,"line_nr":928,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) c_loop(parameters []ValType, results []ValType) LabelIndex","name":"c_loop","parent_name":"Function","return_type":"LabelIndex","pos":{"len":85,"line_nr":929,"pos":23469,"col":0,"last_line":934},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 c_return returns from a function.","is_multi":false,"pos":{"len":35,"line_nr":954,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `return`.","is_multi":false,"pos":{"len":36,"line_nr":955,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) c_return()","name":"c_return","parent_name":"Function","return_type":"void","pos":{"len":37,"line_nr":956,"pos":24624,"col":0,"last_line":958},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 c_select selects one of its first two operands based on an i32 condition.","is_multi":false,"pos":{"len":75,"line_nr":200,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `select`.","is_multi":false,"pos":{"len":36,"line_nr":201,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) c_select()","name":"c_select","parent_name":"Function","return_type":"void","pos":{"len":37,"line_nr":202,"pos":5080,"col":0,"last_line":204},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 call calls a locally defined function.","is_multi":false,"pos":{"len":40,"line_nr":986,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If this function does not exist when calling `compile` on the module, it will panic.","is_multi":false,"pos":{"len":86,"line_nr":987,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `call`.","is_multi":false,"pos":{"len":34,"line_nr":988,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) call(name string)","name":"call","parent_name":"Function","return_type":"void","pos":{"len":44,"line_nr":989,"pos":25803,"col":0,"last_line":995},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 call calls an imported function.","is_multi":false,"pos":{"len":34,"line_nr":997,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If the imported function does not exist when calling `compile` on the module, it will panic.","is_multi":false,"pos":{"len":94,"line_nr":998,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `call`.","is_multi":false,"pos":{"len":34,"line_nr":999,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) call_import(mod string, name string)","name":"call_import","parent_name":"Function","return_type":"void","pos":{"len":63,"line_nr":1000,"pos":26132,"col":0,"last_line":1007},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 cast casts a value of type `a` with respect to `is_signed`, to type `b`.","is_multi":false,"pos":{"len":74,"line_nr":714,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 A generic utility function over a large amount of WebAssembly instructions.","is_multi":false,"pos":{"len":77,"line_nr":715,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: This function uses non-trapping float conversion operators, see `cast_trapping` to use opcodes that cause a runtime exception.","is_multi":false,"pos":{"len":134,"line_nr":716,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions:","is_multi":false,"pos":{"len":27,"line_nr":717,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `i32|i64.trunc_sat_f32_s`, `i32|i64.trunc_sat_f64_s`.","is_multi":false,"pos":{"len":57,"line_nr":718,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `f32.demote_f64`, `f64.promote_f32`.","is_multi":false,"pos":{"len":40,"line_nr":719,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `i32.wrap_i64`, `i64.extend_i32_s`, `i64.extend_i32_u`.","is_multi":false,"pos":{"len":59,"line_nr":720,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `f32|f64.convert_i32_s`, `f32|f64.convert_i32_u`.","is_multi":false,"pos":{"len":53,"line_nr":721,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `f32|f64.convert_i64_s`, `f32|f64.convert_i64_u`.","is_multi":false,"pos":{"len":53,"line_nr":722,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) cast(a NumType, is_signed bool, b NumType)","name":"cast","parent_name":"Function","return_type":"void","pos":{"len":69,"line_nr":723,"pos":18759,"col":0,"last_line":823},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 cast_trapping casts a value of type `a` with respect to `is_signed`, to type `b`.","is_multi":false,"pos":{"len":83,"line_nr":825,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 A generic utility function over a large amount of WebAssembly instructions.","is_multi":false,"pos":{"len":77,"line_nr":826,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: This function uses trapping float conversion operators, see `cast` to use opcodes that do NOT cause a runtime exception.","is_multi":false,"pos":{"len":128,"line_nr":827,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions:","is_multi":false,"pos":{"len":27,"line_nr":828,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `i32|i64.trunc_f32_s`, `i32|i64.trunc_f64_s`.","is_multi":false,"pos":{"len":49,"line_nr":829,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - See function `cast` for the rest.","is_multi":false,"pos":{"len":37,"line_nr":830,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) cast_trapping(a NumType, is_signed bool, b NumType)","name":"cast_trapping","parent_name":"Function","return_type":"void","pos":{"len":78,"line_nr":831,"pos":20934,"col":0,"last_line":889},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ceil rounds up the value of a float with type `typ` to the nearest integer.","is_multi":false,"pos":{"len":77,"line_nr":446,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.ceil`.","is_multi":false,"pos":{"len":42,"line_nr":447,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) ceil(typ NumType)","name":"ceil","parent_name":"Function","return_type":"void","pos":{"len":44,"line_nr":448,"pos":11280,"col":0,"last_line":456},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 clz counts the amount of leading zeros in the numbers binary representation.","is_multi":false,"pos":{"len":78,"line_nr":362,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.clz`.","is_multi":false,"pos":{"len":41,"line_nr":363,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) clz(typ NumType)","name":"clz","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":364,"pos":9141,"col":0,"last_line":372},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 copysign copies the sign bit of one float value to another float, both with type `typ`.","is_multi":false,"pos":{"len":89,"line_nr":530,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.copysign`.","is_multi":false,"pos":{"len":46,"line_nr":531,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) copysign(typ NumType)","name":"copysign","parent_name":"Function","return_type":"void","pos":{"len":48,"line_nr":532,"pos":13495,"col":0,"last_line":540},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ctz counts the amount of trailing zeros in the numbers binary representation.","is_multi":false,"pos":{"len":79,"line_nr":374,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.ctz`.","is_multi":false,"pos":{"len":41,"line_nr":375,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) ctz(typ NumType)","name":"ctz","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":376,"pos":9457,"col":0,"last_line":384},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 data_drop prevents further use of a passive memory segment.","is_multi":false,"pos":{"len":61,"line_nr":1158,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `data.drop`.","is_multi":false,"pos":{"len":39,"line_nr":1159,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) data_drop(idx DataSegmentIndex)","name":"data_drop","parent_name":"Function","return_type":"void","pos":{"len":58,"line_nr":1160,"pos":30457,"col":0,"last_line":1164},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 div divides two values on the stack with type `typ`, with respect to `is_signed`.","is_multi":false,"pos":{"len":83,"line_nr":239,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.div_s`, `i32|i64.div_u`, `f32|f64.div`.","is_multi":false,"pos":{"len":76,"line_nr":240,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) div(typ NumType, is_signed bool)","name":"div","parent_name":"Function","return_type":"void","pos":{"len":59,"line_nr":241,"pos":6330,"col":0,"last_line":264},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 drop drops the value on the stack","is_multi":false,"pos":{"len":35,"line_nr":194,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `drop`.","is_multi":false,"pos":{"len":34,"line_nr":195,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) drop()","name":"drop","parent_name":"Function","return_type":"void","pos":{"len":33,"line_nr":196,"pos":4907,"col":0,"last_line":198},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 eq checks if two values with type `typ` are equal, places an i32 boolean value on the stack.","is_multi":false,"pos":{"len":94,"line_nr":554,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64|f32|f64.eq`.","is_multi":false,"pos":{"len":48,"line_nr":555,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) eq(typ NumType)","name":"eq","parent_name":"Function","return_type":"void","pos":{"len":42,"line_nr":556,"pos":14186,"col":0,"last_line":563},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 eqz checks if the value with type `typ` is equal to zero, places an i32 boolean value on the stack.","is_multi":false,"pos":{"len":101,"line_nr":542,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.eqz`.","is_multi":false,"pos":{"len":41,"line_nr":543,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) eqz(typ NumType)","name":"eqz","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":544,"pos":13848,"col":0,"last_line":552},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 export_name sets the export name of the function to `name`","is_multi":false,"pos":{"len":60,"line_nr":49,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\functions.v","content":"fn (mut func Function) export_name(name string)","name":"export_name","parent_name":"Function","return_type":"void","pos":{"len":51,"line_nr":50,"pos":809,"col":0,"last_line":52},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32_const places a constant f32 value on the stack.","is_multi":false,"pos":{"len":53,"line_nr":123,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32.const`.","is_multi":false,"pos":{"len":39,"line_nr":124,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) f32_const(v f32)","name":"f32_const","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":125,"pos":2946,"col":0,"last_line":128},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64_const places a constant f64 value on the stack.","is_multi":false,"pos":{"len":53,"line_nr":130,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f64.const`.","is_multi":false,"pos":{"len":39,"line_nr":131,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) f64_const(v f64)","name":"f64_const","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":132,"pos":3151,"col":0,"last_line":135},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 floor rounds down the value of a float with type `typ` to the nearest integer.","is_multi":false,"pos":{"len":80,"line_nr":458,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.floor`.","is_multi":false,"pos":{"len":43,"line_nr":459,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) floor(typ NumType)","name":"floor","parent_name":"Function","return_type":"void","pos":{"len":45,"line_nr":460,"pos":11602,"col":0,"last_line":468},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ge checks if two values with type `typ` with respect to `is_signed` are greater than or equal to another, places an i32 boolean value on the stack.","is_multi":false,"pos":{"len":149,"line_nr":657,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.ge_s`, `i32|i64.ge_u`, `f32|f64.ge`.","is_multi":false,"pos":{"len":73,"line_nr":658,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) ge(typ NumType, is_signed bool)","name":"ge","parent_name":"Function","return_type":"void","pos":{"len":58,"line_nr":659,"pos":16890,"col":0,"last_line":682},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 global_get places the value of the global at the index `global` on the stack.","is_multi":false,"pos":{"len":79,"line_nr":160,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `global.get`.","is_multi":false,"pos":{"len":40,"line_nr":161,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) global_get(global GlobalIndices)","name":"global_get","parent_name":"Function","return_type":"void","pos":{"len":59,"line_nr":162,"pos":4169,"col":0,"last_line":175},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 global_set sets the global at the index `global` to the value on the stack.","is_multi":false,"pos":{"len":77,"line_nr":177,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `global.set`.","is_multi":false,"pos":{"len":40,"line_nr":178,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) global_set(global GlobalIndices)","name":"global_set","parent_name":"Function","return_type":"void","pos":{"len":59,"line_nr":179,"pos":4562,"col":0,"last_line":192},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 gt checks if two values with type `typ` with respect to `is_signed` are greater than another, places an i32 boolean value on the stack.","is_multi":false,"pos":{"len":137,"line_nr":603,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.gt_s`, `i32|i64.gt_u`, `f32|f64.gt`.","is_multi":false,"pos":{"len":73,"line_nr":604,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) gt(typ NumType, is_signed bool)","name":"gt","parent_name":"Function","return_type":"void","pos":{"len":58,"line_nr":605,"pos":15625,"col":0,"last_line":628},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i32_const places a constant i32 value on the stack.","is_multi":false,"pos":{"len":53,"line_nr":109,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32.const`.","is_multi":false,"pos":{"len":39,"line_nr":110,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) i32_const(v i32)","name":"i32_const","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":111,"pos":2522,"col":0,"last_line":114},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64_const places a constant i64 value on the stack.","is_multi":false,"pos":{"len":53,"line_nr":116,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i64.const`.","is_multi":false,"pos":{"len":39,"line_nr":117,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) i64_const(v i64)","name":"i64_const","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":118,"pos":2734,"col":0,"last_line":121},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 le checks if two values with type `typ` with respect to `is_signed` are less than or equal to another, places an i32 boolean value on the stack.","is_multi":false,"pos":{"len":146,"line_nr":630,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.le_s`, `i32|i64.le_u`, `f32|f64.le`.","is_multi":false,"pos":{"len":73,"line_nr":631,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) le(typ NumType, is_signed bool)","name":"le","parent_name":"Function","return_type":"void","pos":{"len":58,"line_nr":632,"pos":16256,"col":0,"last_line":655},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 load loads a value with type `typ` from memory.","is_multi":false,"pos":{"len":49,"line_nr":1009,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64|f32|f64.load`.","is_multi":false,"pos":{"len":50,"line_nr":1010,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) load(typ NumType, align int, offset int)","name":"load","parent_name":"Function","return_type":"void","pos":{"len":67,"line_nr":1011,"pos":26424,"col":0,"last_line":1020},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 load16 loads a 16-bit value with type `typ` with respect to `is_signed` from memory.","is_multi":false,"pos":{"len":86,"line_nr":1048,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.load16_s`, `i32|i64.load16_u`.","is_multi":false,"pos":{"len":67,"line_nr":1049,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) load16(typ NumType, is_signed bool, align int, offset int)","name":"load16","parent_name":"Function","return_type":"void","pos":{"len":85,"line_nr":1050,"pos":27482,"col":0,"last_line":1072},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 load32_i64 loads a 32-bit value of type i64 with respect to `is_signed` from memory.","is_multi":false,"pos":{"len":86,"line_nr":1074,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i64.load32_s`, `i64.load32_u`.","is_multi":false,"pos":{"len":59,"line_nr":1075,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) load32_i64(is_signed bool, align int, offset int)","name":"load32_i64","parent_name":"Function","return_type":"void","pos":{"len":76,"line_nr":1076,"pos":28078,"col":0,"last_line":1084},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 load8 loads a 8-bit value with type `typ` with respect to `is_signed` from memory.","is_multi":false,"pos":{"len":84,"line_nr":1022,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.load8_s`, `i32|i64.load8_u`.","is_multi":false,"pos":{"len":65,"line_nr":1023,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) load8(typ NumType, is_signed bool, align int, offset int)","name":"load8","parent_name":"Function","return_type":"void","pos":{"len":84,"line_nr":1024,"pos":26883,"col":0,"last_line":1046},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 local_get places the value of the local at the index `local` on the stack.","is_multi":false,"pos":{"len":76,"line_nr":137,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `local.get`.","is_multi":false,"pos":{"len":39,"line_nr":138,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) local_get(local LocalIndex)","name":"local_get","parent_name":"Function","return_type":"void","pos":{"len":54,"line_nr":139,"pos":3379,"col":0,"last_line":142},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 local_get sets the local at the index `local` to the value on the stack.","is_multi":false,"pos":{"len":74,"line_nr":144,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `local.set`.","is_multi":false,"pos":{"len":39,"line_nr":145,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) local_set(local LocalIndex)","name":"local_set","parent_name":"Function","return_type":"void","pos":{"len":54,"line_nr":146,"pos":3610,"col":0,"last_line":149},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 local_tee sets the local at the index `local` to the value on the stack, then places it's value on the stack.","is_multi":false,"pos":{"len":111,"line_nr":151,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `local.tee`.","is_multi":false,"pos":{"len":39,"line_nr":152,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) local_tee(local LocalIndex)","name":"local_tee","parent_name":"Function","return_type":"void","pos":{"len":54,"line_nr":153,"pos":3878,"col":0,"last_line":156},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 lt checks if two values with type `typ` with respect to `is_signed` are less than another, places an i32 boolean value on the stack.","is_multi":false,"pos":{"len":134,"line_nr":576,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.lt_s`, `i32|i64.lt_u`, `f32|f64.lt`.","is_multi":false,"pos":{"len":73,"line_nr":577,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) lt(typ NumType, is_signed bool)","name":"lt","parent_name":"Function","return_type":"void","pos":{"len":58,"line_nr":578,"pos":15003,"col":0,"last_line":601},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 max gets the higher value of two floats with type `typ`.","is_multi":false,"pos":{"len":58,"line_nr":518,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.max`.","is_multi":false,"pos":{"len":41,"line_nr":519,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) max(typ NumType)","name":"max","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":520,"pos":13164,"col":0,"last_line":528},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 memory_copy copies one region of memory to another.","is_multi":false,"pos":{"len":53,"line_nr":1166,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Similar to `memcpy` and `memmove`, memory regions can overlap.","is_multi":false,"pos":{"len":64,"line_nr":1167,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `memory.copy`.","is_multi":false,"pos":{"len":41,"line_nr":1168,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) memory_copy()","name":"memory_copy","parent_name":"Function","return_type":"void","pos":{"len":40,"line_nr":1169,"pos":30743,"col":0,"last_line":1171},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 memory_fill sets a memory region to a byte value.","is_multi":false,"pos":{"len":51,"line_nr":1173,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Similar to `memset`.","is_multi":false,"pos":{"len":22,"line_nr":1174,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `memory.copy`.","is_multi":false,"pos":{"len":41,"line_nr":1175,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) memory_fill()","name":"memory_fill","parent_name":"Function","return_type":"void","pos":{"len":40,"line_nr":1176,"pos":30952,"col":0,"last_line":1178},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 memory_grow increases the size of the memory instance.","is_multi":false,"pos":{"len":56,"line_nr":1142,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `memory.grow`.","is_multi":false,"pos":{"len":41,"line_nr":1143,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) memory_grow()","name":"memory_grow","parent_name":"Function","return_type":"void","pos":{"len":40,"line_nr":1144,"pos":30007,"col":0,"last_line":1147},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 memory_init copies from a passive memory segment to the memory instance.","is_multi":false,"pos":{"len":74,"line_nr":1149,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `memory.init`.","is_multi":false,"pos":{"len":41,"line_nr":1150,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) memory_init(idx DataSegmentIndex)","name":"memory_init","parent_name":"Function","return_type":"void","pos":{"len":60,"line_nr":1151,"pos":30210,"col":0,"last_line":1156},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 memory_size gets the size of the memory instance.","is_multi":false,"pos":{"len":51,"line_nr":1135,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `memory.size`.","is_multi":false,"pos":{"len":41,"line_nr":1136,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) memory_size()","name":"memory_size","parent_name":"Function","return_type":"void","pos":{"len":40,"line_nr":1137,"pos":29822,"col":0,"last_line":1140},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 min gets the smaller value of two floats with type `typ`.","is_multi":false,"pos":{"len":59,"line_nr":506,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.min`.","is_multi":false,"pos":{"len":41,"line_nr":507,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) min(typ NumType)","name":"min","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":508,"pos":12869,"col":0,"last_line":516},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 mul multiplies two values on the stack with type `typ`.","is_multi":false,"pos":{"len":57,"line_nr":228,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64|f32|f64.mul`.","is_multi":false,"pos":{"len":50,"line_nr":229,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) mul(typ NumType)","name":"mul","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":230,"pos":5934,"col":0,"last_line":237},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ne checks if two values with type `typ` are not equal, places an i32 boolean value on the stack.","is_multi":false,"pos":{"len":98,"line_nr":565,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64|f32|f64.ne`.","is_multi":false,"pos":{"len":48,"line_nr":566,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) ne(typ NumType)","name":"ne","parent_name":"Function","return_type":"void","pos":{"len":42,"line_nr":567,"pos":14564,"col":0,"last_line":574},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 nearest rounds the value of a float with type `typ` to the nearest integer.","is_multi":false,"pos":{"len":77,"line_nr":482,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.nearest`.","is_multi":false,"pos":{"len":45,"line_nr":483,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) nearest(typ NumType)","name":"nearest","parent_name":"Function","return_type":"void","pos":{"len":47,"line_nr":484,"pos":12248,"col":0,"last_line":492},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 neg negates the value of a float with type `typ`.","is_multi":false,"pos":{"len":51,"line_nr":434,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.neg`.","is_multi":false,"pos":{"len":41,"line_nr":435,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) neg(typ NumType)","name":"neg","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":436,"pos":10965,"col":0,"last_line":444},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_local creates a function local and returns it's index.","is_multi":false,"pos":{"len":60,"line_nr":87,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See `local_get`, `local_set`, `local_tee`.","is_multi":false,"pos":{"len":44,"line_nr":88,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) new_local(v ValType) LocalIndex","name":"new_local","parent_name":"Function","return_type":"LocalIndex","pos":{"len":58,"line_nr":89,"pos":1920,"col":0,"last_line":95},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_local_named creates a function local with a name and returns it's index.","is_multi":false,"pos":{"len":78,"line_nr":97,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The `name` is used in debug information, where applicable.","is_multi":false,"pos":{"len":60,"line_nr":98,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See `local_get`, `local_set`, `local_tee`.","is_multi":false,"pos":{"len":44,"line_nr":99,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) new_local_named(v ValType, name string) LocalIndex","name":"new_local_named","parent_name":"Function","return_type":"LocalIndex","pos":{"len":77,"line_nr":100,"pos":2251,"col":0,"last_line":107},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 nop instruction, does nothing.","is_multi":false,"pos":{"len":32,"line_nr":908,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `nop`.","is_multi":false,"pos":{"len":33,"line_nr":909,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) nop()","name":"nop","parent_name":"Function","return_type":"void","pos":{"len":32,"line_nr":910,"pos":22716,"col":0,"last_line":912},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 patch \"patches\" the code generated starting from the last `patch_pos` call in `begin` to `loc`.","is_multi":false,"pos":{"len":97,"line_nr":34,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":35,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```v","is_multi":false,"pos":{"len":6,"line_nr":36,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 start := func.patch_pos()","is_multi":false,"pos":{"len":27,"line_nr":37,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":38,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ...","is_multi":false,"pos":{"len":5,"line_nr":39,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":40,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 patch_block := func.patch_pos()","is_multi":false,"pos":{"len":33,"line_nr":41,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 {","is_multi":false,"pos":{"len":3,"line_nr":42,"pos":0,"col":0,"last_line":0}},{"text":"\u0001     func.i32_const(10)","is_multi":false,"pos":{"len":24,"line_nr":43,"pos":0,"col":0,"last_line":0}},{"text":"\u0001     func.local_set(idx)","is_multi":false,"pos":{"len":25,"line_nr":44,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 }","is_multi":false,"pos":{"len":3,"line_nr":45,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 func.patch(start, patch_block) // will patch code to the `start`.","is_multi":false,"pos":{"len":67,"line_nr":46,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 // func.code[patch_block..]","is_multi":false,"pos":{"len":29,"line_nr":47,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```","is_multi":false,"pos":{"len":5,"line_nr":48,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) patch(loc PatchPos, begin PatchPos)","name":"patch","parent_name":"Function","return_type":"void","pos":{"len":62,"line_nr":49,"pos":1145,"col":0,"last_line":85},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 patch_pos returns a `PatchPos` for use with `patch`.","is_multi":false,"pos":{"len":54,"line_nr":29,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (func Function) patch_pos() PatchPos","name":"patch_pos","parent_name":"Function","return_type":"PatchPos","pos":{"len":43,"line_nr":30,"pos":717,"col":0,"last_line":32},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 popcnt counts the amount of 1s in a numbers binary representation.","is_multi":false,"pos":{"len":68,"line_nr":386,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.popcnt`.","is_multi":false,"pos":{"len":44,"line_nr":387,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) popcnt(typ NumType)","name":"popcnt","parent_name":"Function","return_type":"void","pos":{"len":46,"line_nr":388,"pos":9765,"col":0,"last_line":396},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ref_func places a reference to a function with `name` on the stack.","is_multi":false,"pos":{"len":69,"line_nr":1193,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If this function does not exist when calling `compile` on the module, it will panic.","is_multi":false,"pos":{"len":86,"line_nr":1194,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `ref.func`.","is_multi":false,"pos":{"len":38,"line_nr":1195,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) ref_func(name string)","name":"ref_func","parent_name":"Function","return_type":"void","pos":{"len":48,"line_nr":1196,"pos":31671,"col":0,"last_line":1202},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ref_func_import places a reference to an imported function with `name` on the stack.","is_multi":false,"pos":{"len":86,"line_nr":1204,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If the imported function does not exist when calling `compile` on the module, it will panic.","is_multi":false,"pos":{"len":94,"line_nr":1205,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `ref.func`.","is_multi":false,"pos":{"len":38,"line_nr":1206,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) ref_func_import(mod string, name string)","name":"ref_func_import","parent_name":"Function","return_type":"void","pos":{"len":67,"line_nr":1207,"pos":32064,"col":0,"last_line":1214},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ref_is_null checks if the reference value on the stack is null, places an i32 boolean value on the stack.","is_multi":false,"pos":{"len":107,"line_nr":1187,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `ref_is_null`.","is_multi":false,"pos":{"len":41,"line_nr":1188,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) ref_is_null(rt RefType)","name":"ref_is_null","parent_name":"Function","return_type":"void","pos":{"len":50,"line_nr":1189,"pos":31382,"col":0,"last_line":1191},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ref_null places a null reference on the stack.","is_multi":false,"pos":{"len":48,"line_nr":1180,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `ref.null`.","is_multi":false,"pos":{"len":38,"line_nr":1181,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) ref_null(rt RefType)","name":"ref_null","parent_name":"Function","return_type":"void","pos":{"len":47,"line_nr":1182,"pos":31125,"col":0,"last_line":1185},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reinterpret returns a value which has the same bit-pattern as its operand value, in its result type.","is_multi":false,"pos":{"len":102,"line_nr":891,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32.reinterpret_i32`, `i32.reinterpret_f32`, `f64.reinterpret_i64`, `i64.reinterpret_f64`.","is_multi":false,"pos":{"len":118,"line_nr":892,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) reinterpret(a NumType)","name":"reinterpret","parent_name":"Function","return_type":"void","pos":{"len":49,"line_nr":893,"pos":22156,"col":0,"last_line":900},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rem takes the remainder of two values on the stack with type `typ`, with respect to `is_signed`.","is_multi":false,"pos":{"len":98,"line_nr":266,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64.rem_s`, `i32|i64.rem_u`.","is_multi":false,"pos":{"len":61,"line_nr":267,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) rem(typ NumType, is_signed bool)","name":"rem","parent_name":"Function","return_type":"void","pos":{"len":59,"line_nr":268,"pos":6908,"col":0,"last_line":288},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rotl performs bitwise left-rotate on a value with type `typ`.","is_multi":false,"pos":{"len":63,"line_nr":398,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.rotl`.","is_multi":false,"pos":{"len":42,"line_nr":399,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) rotl(typ NumType)","name":"rotl","parent_name":"Function","return_type":"void","pos":{"len":44,"line_nr":400,"pos":10075,"col":0,"last_line":408},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rotr performs bitwise right-rotate on a value with type `typ`.","is_multi":false,"pos":{"len":64,"line_nr":410,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.rotr`.","is_multi":false,"pos":{"len":42,"line_nr":411,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) rotr(typ NumType)","name":"rotr","parent_name":"Function","return_type":"void","pos":{"len":44,"line_nr":412,"pos":10380,"col":0,"last_line":420},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sign_extend16 extends the value of a 16-bit integer of type `typ`.","is_multi":false,"pos":{"len":68,"line_nr":696,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.extend16_s`.","is_multi":false,"pos":{"len":48,"line_nr":697,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) sign_extend16(typ ValType)","name":"sign_extend16","parent_name":"Function","return_type":"void","pos":{"len":53,"line_nr":698,"pos":17748,"col":0,"last_line":706},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sign_extend32_i64 extends the value of a 32-bit integer of type i64.","is_multi":false,"pos":{"len":70,"line_nr":708,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i64.extend32_s`.","is_multi":false,"pos":{"len":44,"line_nr":709,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) sign_extend32()","name":"sign_extend32","parent_name":"Function","return_type":"void","pos":{"len":42,"line_nr":710,"pos":18082,"col":0,"last_line":712},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sign_extend8 extends the value of a 8-bit integer of type `typ`.","is_multi":false,"pos":{"len":66,"line_nr":684,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.extend8_s`.","is_multi":false,"pos":{"len":47,"line_nr":685,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) sign_extend8(typ ValType)","name":"sign_extend8","parent_name":"Function","return_type":"void","pos":{"len":52,"line_nr":686,"pos":17415,"col":0,"last_line":694},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sqrt performs the square root on the value of a float with type `typ`.","is_multi":false,"pos":{"len":72,"line_nr":494,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.sqrt`.","is_multi":false,"pos":{"len":42,"line_nr":495,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) sqrt(typ NumType)","name":"sqrt","parent_name":"Function","return_type":"void","pos":{"len":44,"line_nr":496,"pos":12570,"col":0,"last_line":504},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 store stores a value with type `typ` into memory.","is_multi":false,"pos":{"len":51,"line_nr":1086,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64|f32|f64.store`.","is_multi":false,"pos":{"len":51,"line_nr":1087,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) store(typ NumType, align int, offset int)","name":"store","parent_name":"Function","return_type":"void","pos":{"len":68,"line_nr":1088,"pos":28412,"col":0,"last_line":1097},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 store16 stores a 16-bit value with type `typ` into memory.","is_multi":false,"pos":{"len":60,"line_nr":1113,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.store16`.","is_multi":false,"pos":{"len":45,"line_nr":1114,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) store16(typ NumType, align int, offset int)","name":"store16","parent_name":"Function","return_type":"void","pos":{"len":70,"line_nr":1115,"pos":29207,"col":0,"last_line":1125},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 store16 stores a 32-bit value of type i64 into memory.","is_multi":false,"pos":{"len":56,"line_nr":1127,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i64.store32`.","is_multi":false,"pos":{"len":41,"line_nr":1128,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) store32_i64(align int, offset int)","name":"store32_i64","parent_name":"Function","return_type":"void","pos":{"len":61,"line_nr":1129,"pos":29580,"col":0,"last_line":1133},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 store8 stores a 8-bit value with type `typ` into memory.","is_multi":false,"pos":{"len":58,"line_nr":1099,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `i32|i64.store8`.","is_multi":false,"pos":{"len":44,"line_nr":1100,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) store8(typ NumType, align int, offset int)","name":"store8","parent_name":"Function","return_type":"void","pos":{"len":69,"line_nr":1101,"pos":28829,"col":0,"last_line":1111},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sub subtracts two values on the stack with type `typ`.","is_multi":false,"pos":{"len":56,"line_nr":217,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instructions: `i32|i64|f32|f64.sub`.","is_multi":false,"pos":{"len":50,"line_nr":218,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) sub(typ NumType)","name":"sub","parent_name":"Function","return_type":"void","pos":{"len":43,"line_nr":219,"pos":5590,"col":0,"last_line":226},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 trunc discards the fractional part of the value of a float with type `typ`.","is_multi":false,"pos":{"len":77,"line_nr":470,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `f32|f64.trunc`.","is_multi":false,"pos":{"len":43,"line_nr":471,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) trunc(typ NumType)","name":"trunc","parent_name":"Function","return_type":"void","pos":{"len":45,"line_nr":472,"pos":11924,"col":0,"last_line":480},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 unreachable denotes a point in code that should not be reachable, it is an unconditional trap.","is_multi":false,"pos":{"len":96,"line_nr":902,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 WebAssembly instruction: `unreachable`.","is_multi":false,"pos":{"len":41,"line_nr":903,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"fn (mut func Function) unreachable()","name":"unreachable","parent_name":"Function","return_type":"void","pos":{"len":40,"line_nr":904,"pos":22582,"col":0,"last_line":906},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\functions.v","content":"struct Function {\n\ttidx int\n\tidx  int\nmut:\n\tpatches []FunctionPatch // sorted\n\tlabel   int\n\texport  bool\n\tmod     &Module = unsafe { nil }\n\tcode    []u8\n\tlocals  []FunctionLocal\npub:\n\tname string\npub mut:\n\texport_name ?string\n}","name":"Function","parent_name":"","return_type":"","pos":{"len":19,"line_nr":33,"pos":514,"col":0,"last_line":47},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"type PatchPos = int","name":"PatchPos","parent_name":"","return_type":"","pos":{"len":17,"line_nr":27,"pos":636,"col":0,"last_line":27},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\instructions.v","content":"type LabelIndex = int","name":"LabelIndex","parent_name":"","return_type":"","pos":{"len":19,"line_nr":914,"pos":22773,"col":0,"last_line":914},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"enum NumType as u8 {\n\ti32_t = 0x7f\n\ti64_t = 0x7e\n\tf32_t = 0x7d\n\tf64_t = 0x7c\n}","name":"NumType","parent_name":"","return_type":"","pos":{"len":16,"line_nr":35,"pos":607,"col":0,"last_line":40},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"enum ValType as u8 {\n\ti32_t       = 0x7f\n\ti64_t       = 0x7e\n\tf32_t       = 0x7d\n\tf64_t       = 0x7c\n\tv128_t      = 0x7b\n\tfuncref_t   = 0x70\n\texternref_t = 0x6f\n}","name":"ValType","parent_name":"","return_type":"","pos":{"len":16,"line_nr":42,"pos":691,"col":0,"last_line":50},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"enum RefType as u8 {\n\tfuncref_t   = 0x70\n\texternref_t = 0x6f\n}","name":"RefType","parent_name":"","return_type":"","pos":{"len":16,"line_nr":52,"pos":859,"col":0,"last_line":55},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"type LocalIndex = int","name":"LocalIndex","parent_name":"","return_type":"","pos":{"len":19,"line_nr":110,"pos":1758,"col":0,"last_line":110},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"type GlobalIndex = int","name":"GlobalIndex","parent_name":"","return_type":"","pos":{"len":20,"line_nr":111,"pos":1784,"col":0,"last_line":111},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"type GlobalImportIndex = int","name":"GlobalImportIndex","parent_name":"","return_type":"","pos":{"len":26,"line_nr":112,"pos":1811,"col":0,"last_line":112},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"type DataSegmentIndex = int","name":"DataSegmentIndex","parent_name":"","return_type":"","pos":{"len":25,"line_nr":113,"pos":1844,"col":0,"last_line":113},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\wasm\\module.v","content":"struct FuncType {\npub:\n\tparameters []ValType\n\tresults    []ValType\n\tname       ?string\n}","name":"FuncType","parent_name":"","return_type":"","pos":{"len":19,"line_nr":115,"pos":1877,"col":0,"last_line":120},"platform":"cross","kind":"struct_","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:44"}