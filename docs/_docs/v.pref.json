{"module_name":"v.pref","contents":[{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"const supported_test_runners = ['normal', 'simple', 'tap', 'dump', 'teamcity']","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":94,"pos":1884,"col":0,"last_line":94},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\default.v","content":"const default_module_path = os.vmodules_dir()","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":8,"pos":210,"col":0,"last_line":8},"platform":"cross","kind":"const_group","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"const list_of_flags_with_param = ['b', 'd', 'e', 'o', 'define', 'backend', 'cc', 'os', 'cflags',\n\t'ldflags', 'path', 'arch']","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":91,"pos":1754,"col":0,"last_line":92},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\default.v","content":"fn new_preferences() &Preferences","name":"new_preferences","parent_name":"","return_type":"Preferences","pos":{"len":37,"line_nr":10,"pos":261,"col":0,"last_line":14},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\default.v","content":"fn (mut p Preferences) default_c_compiler()","name":"default_c_compiler","parent_name":"Preferences","return_type":"void","pos":{"len":47,"line_nr":243,"pos":7656,"col":0,"last_line":268},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\default.v","content":"fn (mut p Preferences) default_cpp_compiler()","name":"default_cpp_compiler","parent_name":"Preferences","return_type":"void","pos":{"len":49,"line_nr":270,"pos":8504,"col":0,"last_line":276},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\default.v","content":"fn (mut p Preferences) fill_with_defaults()","name":"fill_with_defaults","parent_name":"Preferences","return_type":"void","pos":{"len":47,"line_nr":55,"pos":1367,"col":0,"last_line":197},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\should_compile.v","content":"fn (prefs &Preferences) should_compile_asm(path string) bool","name":"should_compile_asm","parent_name":"Preferences","return_type":"bool","pos":{"len":64,"line_nr":253,"pos":6649,"col":0,"last_line":269},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\should_compile.v","content":"fn (prefs &Preferences) should_compile_c(file string) bool","name":"should_compile_c","parent_name":"Preferences","return_type":"bool","pos":{"len":62,"line_nr":160,"pos":3583,"col":0,"last_line":251},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\should_compile.v","content":"fn (prefs &Preferences) should_compile_filtered_files(dir string, files_ []string) []string","name":"should_compile_filtered_files","parent_name":"Preferences","return_type":"[]string","pos":{"len":95,"line_nr":4,"pos":24,"col":0,"last_line":116},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\should_compile.v","content":"fn (prefs &Preferences) should_compile_js(file string) bool","name":"should_compile_js","parent_name":"Preferences","return_type":"bool","pos":{"len":63,"line_nr":271,"pos":7192,"col":0,"last_line":277},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\should_compile.v","content":"fn (prefs &Preferences) should_compile_native(file string) bool","name":"should_compile_native","parent_name":"Preferences","return_type":"bool","pos":{"len":67,"line_nr":154,"pos":3357,"col":0,"last_line":158},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn (pref &Preferences) should_output_to_stdout() bool","name":"should_output_to_stdout","parent_name":"Preferences","return_type":"bool","pos":{"len":57,"line_nr":1078,"pos":37268,"col":0,"last_line":1080},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\default.v","content":"fn (p &Preferences) vcross_compiler_name() string","name":"vcross_compiler_name","parent_name":"Preferences","return_type":"string","pos":{"len":53,"line_nr":300,"pos":9087,"col":0,"last_line":326},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn (pref &Preferences) vrun_elog(s string)","name":"vrun_elog","parent_name":"Preferences","return_type":"void","pos":{"len":46,"line_nr":1072,"pos":37161,"col":0,"last_line":1076},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"struct Preferences {\npub mut:\n\tos          OS // the OS to compile for\n\tbackend     Backend\n\tbuild_mode  BuildMode\n\tarch        Arch\n\toutput_mode OutputMode = .stdout\n\t// verbosity           VerboseLevel\n\tis_verbose bool\n\t// nofmt            bool   // disable vfmt\n\tis_glibc           bool   // if GLIBC will be linked\n\tis_musl            bool   // if MUSL will be linked\n\tis_test            bool   // `v test string_test.v`\n\tis_script          bool   // single file mode (`v program.v`), main function can be skipped\n\tis_vsh             bool   // v script (`file.vsh`) file, the `os` module should be made global\n\traw_vsh_tmp_prefix string // The prefix used for executables, when a script lacks the .vsh extension\n\tis_livemain        bool   // main program that contains live/hot code\n\tis_liveshared      bool   // a shared library, that will be used in a -live main program\n\tis_shared          bool   // an ordinary shared library, -shared, no matter if it is live or not\n\tis_o               bool   // building an .o file\n\tis_prof            bool   // benchmark every function\n\tis_prod            bool   // use \"-O2\"\n\tis_repl            bool\n\tis_eval_argument   bool // true for `v -e 'println(2+2)'`. `println(2+2)` will be in pref.eval_argument .\n\tis_run             bool // compile and run a v program, passing arguments to it, and deleting the executable afterwards\n\tis_crun            bool // similar to run, but does not recompile the executable, if there were no changes to the sources\n\tis_debug           bool // turned on by -g or -cg, it tells v to pass -g to the C backend compiler.\n\tis_vlines          bool // turned on by -g (it slows down .tmp.c generation slightly).\n\tis_stats           bool // `v -stats file_test.v` will produce more detailed statistics for the tests that were run\n\tshow_timings       bool // show how much time each compiler stage took\n\tis_fmt             bool\n\tis_vet             bool\n\tis_vweb            bool // skip _ var warning in templates\n\tis_ios_simulator   bool\n\tis_apk             bool     // build as Android .apk format\n\tis_help            bool     // -h, -help or --help was passed\n\tis_quiet           bool     // do not show the repetitive explanatory messages like the one for `v -prod run file.v` .\n\tis_cstrict         bool     // turn on more C warnings; slightly slower\n\tis_callstack       bool     // turn on callstack registers on each call when v.debug is imported\n\teval_argument      string   // `println(2+2)` on `v -e \"println(2+2)\"`. Note that this source code, will be evaluated in vsh mode, so 'v -e 'println(ls(\".\")!)' is valid.\n\ttest_runner        string   // can be 'simple' (fastest, but much less detailed), 'tap', 'normal'\n\tprofile_file       string   // the profile results will be stored inside profile_file\n\tprofile_no_inline  bool     // when true, [inline] functions would not be profiled\n\tprofile_fns        []string // when set, profiling will be off by default, but inside these functions (and what they call) it will be on.\n\ttranslated         bool     // `v translate doom.v` are we running V code translated from C? allow globals, ++ expressions, etc\n\tobfuscate          bool     // `v -obf program.v`, renames functions to \"f_XXX\"\n\t// Note: passing -cg instead of -g will set is_vlines to false and is_debug to true, thus making v generate cleaner C files,\n\t// which are sometimes easier to debug / inspect manually than the .tmp.c files by plain -g (when/if v line number generation breaks).\n\tsanitize               bool   // use Clang's new \"-fsanitize\" option\n\tsourcemap              bool   // JS Backend: -sourcemap will create a source map - default false\n\tsourcemap_inline       bool = true // JS Backend: -sourcemap-inline will embed the source map in the generated JaaScript file -  currently default true only implemented\n\tsourcemap_src_included bool   // JS Backend: -sourcemap-src-included includes V source code in source map -  default false\n\tshow_cc                bool   // -showcc, print cc command\n\tshow_c_output          bool   // -show-c-output, print all cc output even if the code was compiled correctly\n\tshow_callgraph         bool   // -show-callgraph, print the program callgraph, in a Graphviz DOT format to stdout\n\tshow_depgraph          bool   // -show-depgraph, print the program module dependency graph, in a Graphviz DOT format to stdout\n\tdump_c_flags           string // `-dump-c-flags file.txt` - let V store all C flags, passed to the backend C compiler in `file.txt`, one C flag/value per line.\n\tdump_modules           string // `-dump-modules modules.txt` - let V store all V modules, that were used by the compiled program in `modules.txt`, one module per line.\n\tdump_files             string // `-dump-files files.txt` - let V store all V or .template file paths, that were used by the compiled program in `files.txt`, one path per line.\n\tdump_defines           string // `-dump-defines defines.txt` - let V store all the defines that affect the current program and their values, one define per line + `,` + its value.\n\tuse_cache              bool   // when set, use cached modules to speed up subsequent compilations, at the cost of slower initial ones (while the modules are cached)\n\tretry_compilation      bool = true // retry the compilation with another C compiler, if tcc fails.\n\tuse_os_system_to_run   bool   // when set, use os.system() to run the produced executable, instead of os.new_process; works around segfaults on macos, that may happen when xcode is updated\n\tmacosx_version_min     string = '0' // relevant only for macos and ios targets\n\t// TODO Convert this into a []string\n\tcflags  string // Additional options which will be passed to the C compiler *before* other options.\n\tldflags string // Additional options which will be passed to the C compiler *after* everything else.\n\t// For example, passing -cflags -Os will cause the C compiler to optimize the generated binaries for size.\n\t// You could pass several -cflags XXX arguments. They will be merged with each other.\n\t// You can also quote several options at the same time: -cflags '-Os -fno-inline-small-functions'.\n\tm64                bool         // true = generate 64-bit code, defaults to x64\n\tccompiler          string       // the name of the C compiler used\n\tccompiler_type     CompilerType // the type of the C compiler used\n\tcppcompiler        string       // the name of the CPP compiler used\n\tthird_party_option string\n\tbuilding_v         bool\n\tno_bounds_checking bool // `-no-bounds-checking` turns off *all* bounds checks for all functions at runtime, as if they all had been tagged with `[direct_array_access]`\n\tautofree           bool // `v -manualfree` => false, `v -autofree` => true; false by default for now.\n\t// Disabling `free()` insertion results in better performance in some applications (e.g. compilers)\n\ttrace_calls bool // -trace-calls true = the transformer stage will generate and inject print calls for tracing function calls\n\tcompress    bool // when set, use `upx` to compress the generated executable\n\t// generating_vh    bool\n\tno_builtin       bool   // Skip adding the `builtin` module implicitly. The generated C code may not compile.\n\tenable_globals   bool   // allow __global for low level code\n\tis_bare          bool   // set by -freestanding\n\tbare_builtin_dir string // Set by -bare-builtin-dir xyz/ . The xyz/ module should contain implementations of malloc, memset, etc, that are used by the rest of V's `builtin` module. That option is only useful with -freestanding (i.e. when is_bare is true).\n\tno_preludes      bool   // Prevents V from generating preludes in resulting .c files\n\tcustom_prelude   string // Contents of custom V prelude that will be prepended before code in resulting .c files\n\tcmain            string // The name of the generated C main function. Useful with framework like code, that uses macros to re-define `main`, like SDL2 does. When set, V will always generate `int THE_NAME(int ___argc, char** ___argv){`, *no matter* the platform.\n\tlookup_path      []string\n\toutput_cross_c   bool // true, when the user passed `-os cross` or `-cross`\n\toutput_es5       bool\n\tprealloc         bool\n\tvroot            string\n\tvlib             string   // absolute path to the vlib/ folder\n\tvmodules_paths   []string // absolute paths to the vmodules folders, by default ['/home/user/.vmodules'], can be overridden by setting VMODULES\n\tout_name_c       string   // full os.real_path to the generated .tmp.c file; set by builder.\n\tout_name         string\n\tpath             string // Path to file/folder to compile\n\tline_info        string // `-line-info=\"file.v:28\"`: for \"mini VLS\" (shows information about objects on provided line)\n\tlinfo            LineInfo\n\t//\n\trun_only []string // VTEST_ONLY_FN and -run-only accept comma separated glob patterns.\n\texclude  []string // glob patterns for excluding .v files from the list of .v files that otherwise would have been used for a compilation, example: `-exclude @vlib/math/*.c.v`\n\t// Only test_ functions that match these patterns will be run. -run-only is valid only for _test.v files.\n\t//\n\t// -d vfmt and -d another=0 for `$if vfmt { will execute }` and `$if another ? { will NOT get here }`\n\tcompile_defines     []string // just ['vfmt']\n\tcompile_defines_all []string // contains both: ['vfmt','another']\n\t//\n\trun_args     []string // `v run x.v 1 2 3` => `1 2 3`\n\tprintfn_list []string // a list of generated function names, whose source should be shown, for debugging\n\t//\n\tprint_v_files       bool // when true, just print the list of all parsed .v files then stop.\n\tprint_watched_files bool // when true, just print the list of all parsed .v files + all the compiled $tmpl files, then stop. Used by `v watch run webserver.v`\n\t//\n\tskip_running     bool // when true, do no try to run the produced file (set by b.cc(), when -o x.c or -o x.js)\n\tskip_warnings    bool // like C's \"-w\", forces warnings to be ignored.\n\tskip_notes       bool // force notices to be ignored/not shown.\n\twarn_impure_v    bool // -Wimpure-v, force a warning for JS.fn()/C.fn(), outside of .js.v/.c.v files. TODO: turn to an error by default\n\twarns_are_errors bool // -W, like C's \"-Werror\", treat *every* warning is an error\n\tnotes_are_errors bool // -N, treat *every* notice as an error\n\tfatal_errors     bool // unconditionally exit after the first error with exit(1)\n\treuse_tmpc       bool // do not use random names for .tmp.c and .tmp.c.rsp files, and do not remove them\n\tno_rsp           bool // when true, pass C backend options directly on the CLI (do not use `.rsp` files for them, some older C compilers do not support them)\n\tno_std           bool // when true, do not pass -std=gnu99(linux)/-std=c99 to the C backend\n\t//\n\tno_parallel       bool // do not use threads when compiling; slower, but more portable and sometimes less buggy\n\tparallel_cc       bool // whether to split the resulting .c file into many .c files + a common .h file, that are then compiled in parallel, then linked together.\n\tonly_check_syntax bool // when true, just parse the files, then stop, before running checker\n\tcheck_only        bool // same as only_check_syntax, but also runs the checker\n\texperimental      bool // enable experimental features\n\tskip_unused       bool // skip generating C code for functions, that are not used\n\t//\n\tuse_color           ColorOutput // whether the warnings/errors should use ANSI color escapes.\n\tcleanup_files       []string    // list of temporary *.tmp.c and *.tmp.c.rsp files. Cleaned up on successful builds.\n\tbuild_options       []string    // list of options, that should be passed down to `build-module`, if needed for -usecache\n\tcache_manager       vcache.CacheManager\n\tgc_mode             GarbageCollectionMode = .unknown // .no_gc, .boehm, .boehm_leak, ...\n\tassert_failure_mode AssertFailureMode     // whether to call abort() or print_backtrace() after an assertion failure\n\tmessage_limit       int = 150 // the maximum amount of warnings/errors/notices that will be accumulated\n\tnofloat             bool // for low level code, like kernels: replaces f32 with u32 and f64 with u64\n\tuse_coroutines      bool // experimental coroutines\n\tfast_math           bool // -fast-math will pass either -ffast-math or /fp:fast (for msvc) to the C backend\n\t// checker settings:\n\tchecker_match_exhaustive_cutoff_limit int = 12\n\tthread_stack_size                     int = 8388608 // Change with `-thread-stack-size 4194304`. Note: on macos it was 524288, which is too small for more complex programs with many nested callexprs.\n\t// wasm settings:\n\twasm_stack_top int = 1024 + (16 * 1024) // stack size for webassembly backend\n\twasm_validate  bool // validate webassembly code, by calling `wasm-validate`\n\t// temp\n\t// use_64_int bool\n}","name":"Preferences","parent_name":"","return_type":"","pos":{"len":22,"line_nr":97,"pos":1984,"col":0,"last_line":249},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\default.v","content":"fn default_tcc_compiler() string","name":"default_tcc_compiler","parent_name":"","return_type":"string","pos":{"len":36,"line_nr":233,"pos":7450,"col":0,"last_line":241},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\default.v","content":"fn vexe_path() string","name":"vexe_path","parent_name":"","return_type":"string","pos":{"len":25,"line_nr":278,"pos":8658,"col":0,"last_line":298},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\line_info.v","content":"fn add_line_info_expr_to_program_text(raw_text string, linfo LineInfo) string","name":"add_line_info_expr_to_program_text","parent_name":"","return_type":"string","pos":{"len":81,"line_nr":59,"pos":1384,"col":0,"last_line":71},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\os.v","content":"fn (o OS) str() string","name":"str","parent_name":"OS","return_type":"string","pos":{"len":26,"line_nr":141,"pos":2112,"col":0,"last_line":171},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\os.v","content":"enum OS {\n\t_auto // Reserved so .macos cannot be misunderstood as auto\n\tios\n\tmacos\n\tlinux\n\twindows\n\tfreebsd\n\topenbsd\n\tnetbsd\n\tdragonfly\n\tjs_node\n\tjs_browser\n\tjs_freestanding\n\tandroid\n\ttermux // like android, but compiling/running natively on the devices\n\tsolaris\n\tqnx\n\tserenity\n\tplan9\n\tvinix\n\thaiku\n\twasm32\n\twasm32_emscripten\n\twasm32_wasi\n\tbrowser // -b wasm -os browser\n\twasi // -b wasm -os wasi\n\traw\n\tall\n}","name":"OS","parent_name":"","return_type":"","pos":{"len":11,"line_nr":7,"pos":194,"col":0,"last_line":35},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Helper function to convert string names to OS enum","is_multi":false,"pos":{"len":52,"line_nr":37,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\os.v","content":"fn os_from_string(os_str string) !OS","name":"os_from_string","parent_name":"","return_type":"!OS","pos":{"len":40,"line_nr":38,"pos":662,"col":0,"last_line":139},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\os.v","content":"fn get_host_os() OS","name":"get_host_os","parent_name":"","return_type":"OS","pos":{"len":23,"line_nr":173,"pos":3041,"col":0,"last_line":240},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"enum BuildMode {\n\t// `v program.v'\n\t// Build user code only, and add pre-compiled vlib (`cc program.o builtin.o os.o...`)\n\tdefault_mode // `v -lib ~/v/os`\n\t// build any module (generate os.o + os.vh)\n\tbuild_module\n}","name":"BuildMode","parent_name":"","return_type":"","pos":{"len":18,"line_nr":12,"pos":378,"col":0,"last_line":18},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"enum AssertFailureMode {\n\tdefault\n\taborts\n\tbacktraces\n\tcontinues\n}","name":"AssertFailureMode","parent_name":"","return_type":"","pos":{"len":26,"line_nr":20,"pos":599,"col":0,"last_line":25},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"enum GarbageCollectionMode {\n\tunknown\n\tno_gc\n\tboehm_full // full garbage collection mode\n\tboehm_incr // incremental garbage collection mode\n\tboehm_full_opt // full garbage collection mode\n\tboehm_incr_opt // incremental garbage collection mode\n\tboehm_leak // leak detection mode (makes `gc_check_leaks()` work)\n}","name":"GarbageCollectionMode","parent_name":"","return_type":"","pos":{"len":30,"line_nr":27,"pos":671,"col":0,"last_line":35},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"enum OutputMode {\n\tstdout\n\tsilent\n}","name":"OutputMode","parent_name":"","return_type":"","pos":{"len":19,"line_nr":37,"pos":988,"col":0,"last_line":40},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"enum ColorOutput {\n\tauto\n\talways\n\tnever\n}","name":"ColorOutput","parent_name":"","return_type":"","pos":{"len":20,"line_nr":42,"pos":1029,"col":0,"last_line":46},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn (b Backend) is_js() bool","name":"is_js","parent_name":"Backend","return_type":"bool","pos":{"len":31,"line_nr":59,"pos":1389,"col":0,"last_line":65},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"enum Backend {\n\tc // The (default) C backend\n\tgolang // Go backend\n\tinterpret // Interpret the ast\n\tjs_node // The JavaScript NodeJS backend\n\tjs_browser // The JavaScript browser backend\n\tjs_freestanding // The JavaScript freestanding backend\n\tnative // The Native backend\n\twasm // The WebAssembly backend\n}","name":"Backend","parent_name":"","return_type":"","pos":{"len":16,"line_nr":48,"pos":1076,"col":0,"last_line":57},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"enum CompilerType {\n\tgcc\n\ttinyc\n\tclang\n\tmingw\n\tmsvc\n\tcplusplus\n}","name":"CompilerType","parent_name":"","return_type":"","pos":{"len":21,"line_nr":67,"pos":1491,"col":0,"last_line":74},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"enum Arch {\n\t_auto\n\tamd64 // aka x86_64\n\tarm64 // 64-bit arm\n\tarm32 // 32-bit arm\n\trv64 // 64-bit risc-v\n\trv32 // 32-bit risc-v\n\ti386\n\tjs_node\n\tjs_browser\n\tjs_freestanding\n\twasm32\n\t_max\n}","name":"Arch","parent_name":"","return_type":"","pos":{"len":13,"line_nr":76,"pos":1561,"col":0,"last_line":89},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"struct LineInfo {\npub mut:\n\tline_nr      int    // a quick single file run when called with v -line-info (contains line nr to inspect)\n\tpath         string // same, but stores the path being parsed\n\texpr         string // \"foo\" or \"foo.bar\" V code (expression) which needs autocomplete\n\tis_running   bool   // so that line info is fetched only on the second checker run\n\tvars_printed map[string]bool // to avoid dups\n}","name":"LineInfo","parent_name":"","return_type":"","pos":{"len":19,"line_nr":251,"pos":14721,"col":0,"last_line":258},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn parse_args(known_external_commands []string, args []string) (&Preferences, string)","name":"parse_args","parent_name":"","return_type":"Preferences, string)","pos":{"len":89,"line_nr":260,"pos":15145,"col":0,"last_line":262},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn parse_args_and_show_errors(known_external_commands []string, args []string, show_output bool) (&Preferences, string)","name":"parse_args_and_show_errors","parent_name":"","return_type":"Preferences, string)","pos":{"len":123,"line_nr":311,"pos":16851,"col":0,"last_line":1057},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn eprintln_exit(s string)","name":"eprintln_exit","parent_name":"","return_type":"void","pos":{"len":30,"line_nr":1060,"pos":37009,"col":0,"last_line":1063},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn eprintln_cond(condition bool, s string)","name":"eprintln_cond","parent_name":"","return_type":"void","pos":{"len":46,"line_nr":1065,"pos":37067,"col":0,"last_line":1070},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn arch_from_string(arch_str string) !Arch","name":"arch_from_string","parent_name":"","return_type":"!Arch","pos":{"len":46,"line_nr":1082,"pos":37403,"col":0,"last_line":1127},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn backend_from_string(s string) !Backend","name":"backend_from_string","parent_name":"","return_type":"!Backend","pos":{"len":45,"line_nr":1140,"pos":38439,"col":0,"last_line":1155},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Helper function to convert string names to CC enum","is_multi":false,"pos":{"len":52,"line_nr":1157,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn cc_from_string(cc_str string) CompilerType","name":"cc_from_string","parent_name":"","return_type":"CompilerType","pos":{"len":49,"line_nr":1158,"pos":39024,"col":0,"last_line":1183},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn get_host_arch() Arch","name":"get_host_arch","parent_name":"","return_type":"Arch","pos":{"len":27,"line_nr":1185,"pos":39558,"col":0,"last_line":1196},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\pref\\pref.c.v","content":"fn supported_test_runners_list() string","name":"supported_test_runners_list","parent_name":"","return_type":"string","pos":{"len":43,"line_nr":1233,"pos":41160,"col":0,"last_line":1235},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-02-05 19:45:43"}