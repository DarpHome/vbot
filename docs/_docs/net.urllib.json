{"module_name":"net.urllib","contents":[{"attributes":{},"comments":[{"text":"\u0001 query_unescape does the inverse transformation of query_escape,","is_multi":false,"pos":{"len":65,"line_nr":122,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 converting each 3-byte encoded substring of the form '%AB' into the","is_multi":false,"pos":{"len":69,"line_nr":123,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 hex-decoded byte 0xAB.","is_multi":false,"pos":{"len":24,"line_nr":124,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It returns an error if any % is not followed by two hexadecimal","is_multi":false,"pos":{"len":65,"line_nr":125,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 digits.","is_multi":false,"pos":{"len":9,"line_nr":126,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn query_unescape(s string) !string","name":"query_unescape","parent_name":"","return_type":"!string","pos":{"len":39,"line_nr":127,"pos":4309,"col":0,"last_line":129},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 path_unescape does the inverse transformation of path_escape,","is_multi":false,"pos":{"len":63,"line_nr":131,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 converting each 3-byte encoded substring of the form '%AB' into the","is_multi":false,"pos":{"len":69,"line_nr":132,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 hex-decoded byte 0xAB. It returns an error if any % is not followed","is_multi":false,"pos":{"len":69,"line_nr":133,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 by two hexadecimal digits.","is_multi":false,"pos":{"len":28,"line_nr":134,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":135,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 path_unescape is identical to query_unescape except that it does not","is_multi":false,"pos":{"len":70,"line_nr":136,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 unescape '+' to ' ' (space).","is_multi":false,"pos":{"len":30,"line_nr":137,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn path_unescape(s string) !string","name":"path_unescape","parent_name":"","return_type":"!string","pos":{"len":38,"line_nr":138,"pos":4743,"col":0,"last_line":140},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 query_escape escapes the string so it can be safely placed","is_multi":false,"pos":{"len":60,"line_nr":242,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 inside a URL query.","is_multi":false,"pos":{"len":21,"line_nr":243,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn query_escape(s string) string","name":"query_escape","parent_name":"","return_type":"string","pos":{"len":36,"line_nr":244,"pos":7868,"col":0,"last_line":246},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 path_escape escapes the string so it can be safely placed inside a URL path segment,","is_multi":false,"pos":{"len":86,"line_nr":248,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 replacing special characters (including /) with %XX sequences as needed.","is_multi":false,"pos":{"len":74,"line_nr":249,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn path_escape(s string) string","name":"path_escape","parent_name":"","return_type":"string","pos":{"len":35,"line_nr":250,"pos":8117,"col":0,"last_line":252},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 A URL represents a parsed URL (technically, a URI reference).","is_multi":false,"pos":{"len":63,"line_nr":302,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The general form represented is:","is_multi":false,"pos":{"len":34,"line_nr":303,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 [scheme:][//[userinfo@]host][/]path[?query][#fragment]","is_multi":false,"pos":{"len":56,"line_nr":304,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 URLs that do not start with a slash after the scheme are interpreted as:","is_multi":false,"pos":{"len":74,"line_nr":305,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 scheme:opaque[?query][#fragment]","is_multi":false,"pos":{"len":34,"line_nr":306,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":307,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that the path field is stored in decoded form: /%47%6f%2f becomes /Go/.","is_multi":false,"pos":{"len":78,"line_nr":308,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 A consequence is that it is impossible to tell which slashes in the path were","is_multi":false,"pos":{"len":79,"line_nr":309,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 slashes in the raw URL and which were %2f. This distinction is rarely important,","is_multi":false,"pos":{"len":82,"line_nr":310,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 but when it is, the code should use raw_path, an optional field which only gets","is_multi":false,"pos":{"len":81,"line_nr":311,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 set if the default encoding is different from path.","is_multi":false,"pos":{"len":53,"line_nr":312,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":313,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 URL's String method uses the escaped_path method to obtain the path. See the","is_multi":false,"pos":{"len":78,"line_nr":314,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 escaped_path method for more details.","is_multi":false,"pos":{"len":39,"line_nr":315,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 debug returns a string representation of *ALL* the fields of the given URL","is_multi":false,"pos":{"len":76,"line_nr":329,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (url &URL) debug() string","name":"debug","parent_name":"URL","return_type":"string","pos":{"len":32,"line_nr":330,"pos":10491,"col":0,"last_line":332},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_path sets the path and raw_path fields of the URL based on the provided","is_multi":false,"pos":{"len":77,"line_nr":617,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 escaped path p. It maintains the invariant that raw_path is only specified","is_multi":false,"pos":{"len":76,"line_nr":618,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 when it differs from the default encoding of the path.","is_multi":false,"pos":{"len":56,"line_nr":619,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 For example:","is_multi":false,"pos":{"len":14,"line_nr":620,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - set_path('/foo/bar')   will set path='/foo/bar' and raw_path=''","is_multi":false,"pos":{"len":67,"line_nr":621,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - set_path('/foo%2fbar') will set path='/foo/bar' and raw_path='/foo%2fbar'","is_multi":false,"pos":{"len":77,"line_nr":622,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 set_path will return an error only if the provided path contains an invalid","is_multi":false,"pos":{"len":77,"line_nr":623,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 escaping.","is_multi":false,"pos":{"len":11,"line_nr":624,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (mut u URL) set_path(p string) !bool","name":"set_path","parent_name":"URL","return_type":"!bool","pos":{"len":43,"line_nr":625,"pos":20019,"col":0,"last_line":629},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 escaped_path returns the escaped form of u.path.","is_multi":false,"pos":{"len":50,"line_nr":631,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 In general there are multiple possible escaped forms of any path.","is_multi":false,"pos":{"len":67,"line_nr":632,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 escaped_path returns u.raw_path when it is a valid escaping of u.path.","is_multi":false,"pos":{"len":72,"line_nr":633,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Otherwise escaped_path ignores u.raw_path and computes an escaped","is_multi":false,"pos":{"len":67,"line_nr":634,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 form on its own.","is_multi":false,"pos":{"len":18,"line_nr":635,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The String and request_uri methods use escaped_path to construct","is_multi":false,"pos":{"len":66,"line_nr":636,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 their results.","is_multi":false,"pos":{"len":16,"line_nr":637,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 In general, code should call escaped_path instead of","is_multi":false,"pos":{"len":54,"line_nr":638,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 reading u.raw_path directly.","is_multi":false,"pos":{"len":30,"line_nr":639,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (u &URL) escaped_path() string","name":"escaped_path","parent_name":"URL","return_type":"string","pos":{"len":37,"line_nr":640,"pos":20645,"col":0,"last_line":649},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 str reassembles the URL into a valid URL string.","is_multi":false,"pos":{"len":50,"line_nr":698,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The general form of the result is one of:","is_multi":false,"pos":{"len":43,"line_nr":699,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":700,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 scheme:opaque?query#fragment","is_multi":false,"pos":{"len":30,"line_nr":701,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 scheme://userinfo@host/path?query#fragment","is_multi":false,"pos":{"len":44,"line_nr":702,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":703,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If u.opaque is non-empty, String uses the first form;","is_multi":false,"pos":{"len":55,"line_nr":704,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 otherwise it uses the second form.","is_multi":false,"pos":{"len":36,"line_nr":705,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Any non-ASCII characters in host are escaped.","is_multi":false,"pos":{"len":47,"line_nr":706,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 To obtain the path, String uses u.escaped_path().","is_multi":false,"pos":{"len":51,"line_nr":707,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":708,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 In the second form, the following rules apply:","is_multi":false,"pos":{"len":48,"line_nr":709,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - if u.scheme is empty, scheme: is omitted.","is_multi":false,"pos":{"len":45,"line_nr":710,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - if u.user is nil, userinfo@ is omitted.","is_multi":false,"pos":{"len":43,"line_nr":711,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - if u.host is empty, host/ is omitted.","is_multi":false,"pos":{"len":41,"line_nr":712,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - if u.scheme and u.host are empty and u.user is nil,","is_multi":false,"pos":{"len":55,"line_nr":713,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the entire scheme://userinfo@host/ is omitted.","is_multi":false,"pos":{"len":48,"line_nr":714,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - if u.host is non-empty and u.path begins with a /,","is_multi":false,"pos":{"len":54,"line_nr":715,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the form host/path does not add its own /.","is_multi":false,"pos":{"len":44,"line_nr":716,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - if u.raw_query is empty, ?query is omitted.","is_multi":false,"pos":{"len":47,"line_nr":717,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - if u.fragment is empty, #fragment is omitted.","is_multi":false,"pos":{"len":49,"line_nr":718,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (u URL) str() string","name":"str","parent_name":"URL","return_type":"string","pos":{"len":27,"line_nr":719,"pos":22895,"col":0,"last_line":771},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 is_abs reports whether the URL is absolute.","is_multi":false,"pos":{"len":45,"line_nr":910,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Absolute means that it has a non-empty scheme.","is_multi":false,"pos":{"len":48,"line_nr":911,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (u &URL) is_abs() bool","name":"is_abs","parent_name":"URL","return_type":"bool","pos":{"len":29,"line_nr":912,"pos":27649,"col":0,"last_line":914},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 parse parses a URL in the context of the receiver. The provided URL","is_multi":false,"pos":{"len":69,"line_nr":916,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 may be relative or absolute. parse returns nil, err on parse","is_multi":false,"pos":{"len":62,"line_nr":917,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 failure, otherwise its return value is the same as resolve_reference.","is_multi":false,"pos":{"len":71,"line_nr":918,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (u &URL) parse(ref string) !URL","name":"parse","parent_name":"URL","return_type":"!URL","pos":{"len":38,"line_nr":919,"pos":27915,"col":0,"last_line":922},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 resolve_reference resolves a URI reference to an absolute URI from","is_multi":false,"pos":{"len":68,"line_nr":924,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 an absolute base URI u, per RFC 3986 Section 5.2. The URI reference","is_multi":false,"pos":{"len":69,"line_nr":925,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 may be relative or absolute. resolve_reference always returns a new","is_multi":false,"pos":{"len":69,"line_nr":926,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 URL instance, even if the returned URL is identical to either the","is_multi":false,"pos":{"len":67,"line_nr":927,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 base or reference. If ref is an absolute URL, then resolve_reference","is_multi":false,"pos":{"len":70,"line_nr":928,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ignores base and returns a copy of ref.","is_multi":false,"pos":{"len":41,"line_nr":929,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (u &URL) resolve_reference(ref &URL) !URL","name":"resolve_reference","parent_name":"URL","return_type":"!URL","pos":{"len":48,"line_nr":930,"pos":28414,"col":0,"last_line":959},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 query parses raw_query and returns the corresponding values.","is_multi":false,"pos":{"len":62,"line_nr":961,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It silently discards malformed value pairs.","is_multi":false,"pos":{"len":45,"line_nr":962,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 To check errors use parseQuery.","is_multi":false,"pos":{"len":33,"line_nr":963,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (u &URL) query() Values","name":"query","parent_name":"URL","return_type":"Values","pos":{"len":30,"line_nr":964,"pos":29341,"col":0,"last_line":967},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 request_uri returns the encoded path?query or opaque?query","is_multi":false,"pos":{"len":60,"line_nr":969,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 string that would be used in an HTTP request for u.","is_multi":false,"pos":{"len":53,"line_nr":970,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (u &URL) request_uri() string","name":"request_uri","parent_name":"URL","return_type":"string","pos":{"len":36,"line_nr":971,"pos":29542,"col":0,"last_line":987},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 hostname returns u.host, stripping any valid port number if present.","is_multi":false,"pos":{"len":70,"line_nr":989,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":990,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If the result is enclosed in square brackets, as literal IPv6 addresses are,","is_multi":false,"pos":{"len":78,"line_nr":991,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the square brackets are removed from the result.","is_multi":false,"pos":{"len":50,"line_nr":992,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (u &URL) hostname() string","name":"hostname","parent_name":"URL","return_type":"string","pos":{"len":33,"line_nr":993,"pos":30076,"col":0,"last_line":996},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 port returns the port part of u.host, without the leading colon.","is_multi":false,"pos":{"len":66,"line_nr":998,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If u.host doesn't contain a port, port returns an empty string.","is_multi":false,"pos":{"len":65,"line_nr":999,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (u &URL) port() string","name":"port","parent_name":"URL","return_type":"string","pos":{"len":29,"line_nr":1000,"pos":30299,"col":0,"last_line":1003},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"struct URL {\npub mut:\n\tscheme      string\n\topaque      string    // encoded opaque data\n\tuser        &Userinfo = unsafe { nil } // username and password information\n\thost        string    // host or host:port\n\tpath        string    // path (relative paths may omit leading slash)\n\traw_path    string    // encoded path hint (see escaped_path method)\n\tforce_query bool      // append a query ('?') even if raw_query is empty\n\traw_query   string    // encoded query values, without '?'\n\tfragment    string    // fragment for references, without '#'\n}","name":"URL","parent_name":"","return_type":"","pos":{"len":14,"line_nr":316,"pos":9859,"col":0,"last_line":327},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 user returns a Userinfo containing the provided username","is_multi":false,"pos":{"len":58,"line_nr":334,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and no password set.","is_multi":false,"pos":{"len":22,"line_nr":335,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn user(username string) &Userinfo","name":"user","parent_name":"","return_type":"Userinfo","pos":{"len":38,"line_nr":336,"pos":10868,"col":0,"last_line":342},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 parse parses rawurl into a URL structure.","is_multi":false,"pos":{"len":43,"line_nr":429,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":430,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The rawurl may be relative (a path, without a host) or absolute","is_multi":false,"pos":{"len":65,"line_nr":431,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 (starting with a scheme). Trying to parse a hostname and path","is_multi":false,"pos":{"len":63,"line_nr":432,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 without a scheme is invalid but may not necessarily return an","is_multi":false,"pos":{"len":63,"line_nr":433,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 error, due to parsing ambiguities.","is_multi":false,"pos":{"len":36,"line_nr":434,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn parse(rawurl string) !URL","name":"parse","parent_name":"","return_type":"!URL","pos":{"len":32,"line_nr":435,"pos":13759,"col":0,"last_line":446},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Values maps a string key to a list of values.","is_multi":false,"pos":{"len":47,"line_nr":773,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It is typically used for query parameters and form values.","is_multi":false,"pos":{"len":60,"line_nr":774,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Unlike in the http.Header map, the keys in a Values map","is_multi":false,"pos":{"len":57,"line_nr":775,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 are case-sensitive.","is_multi":false,"pos":{"len":21,"line_nr":776,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 parseQuery parses the URL-encoded query string and returns","is_multi":false,"pos":{"len":60,"line_nr":777,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 a map listing the values specified for each key.","is_multi":false,"pos":{"len":50,"line_nr":778,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 parseQuery always returns a non-nil map containing all the","is_multi":false,"pos":{"len":60,"line_nr":779,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 valid query parameters found; err describes the first decoding error","is_multi":false,"pos":{"len":70,"line_nr":780,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 encountered, if any.","is_multi":false,"pos":{"len":22,"line_nr":781,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":782,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Query is expected to be a list of key=value settings separated by","is_multi":false,"pos":{"len":67,"line_nr":783,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ampersands or semicolons. A setting without an equals sign is","is_multi":false,"pos":{"len":63,"line_nr":784,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 interpreted as a key set to an empty value.","is_multi":false,"pos":{"len":45,"line_nr":785,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn parse_query(query string) !Values","name":"parse_query","parent_name":"","return_type":"!Values","pos":{"len":40,"line_nr":786,"pos":24995,"col":0,"last_line":790},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 del deletes the values associated with key.","is_multi":false,"pos":{"len":45,"line_nr":87,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\values.v","content":"fn (mut v Values) del(key string)","name":"del","parent_name":"Values","return_type":"void","pos":{"len":37,"line_nr":88,"pos":1988,"col":0,"last_line":95},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 encode encodes the values into ``URL encoded'' form","is_multi":false,"pos":{"len":53,"line_nr":839,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ('bar=baz&foo=quux').","is_multi":false,"pos":{"len":23,"line_nr":840,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The syntx of the query string is specified in the","is_multi":false,"pos":{"len":51,"line_nr":841,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 RFC173 https://datatracker.ietf.org/doc/html/rfc1738","is_multi":false,"pos":{"len":54,"line_nr":842,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":843,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 HTTP grammar","is_multi":false,"pos":{"len":14,"line_nr":844,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":845,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 httpurl        = \"http://\" hostport [ \"/\" hpath [ \"?\" search ]]","is_multi":false,"pos":{"len":65,"line_nr":846,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 hpath          = hsegment *[ \"/\" hsegment ]","is_multi":false,"pos":{"len":45,"line_nr":847,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 hsegment       = *[ uchar | \";\" | \":\" | \"@\" | \"&\" | \"=\" ]","is_multi":false,"pos":{"len":59,"line_nr":848,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 search         = *[ uchar | \";\" | \":\" | \"@\" | \"&\" | \"=\" ]","is_multi":false,"pos":{"len":59,"line_nr":849,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn (v Values) encode() string","name":"encode","parent_name":"Values","return_type":"string","pos":{"len":33,"line_nr":850,"pos":26431,"col":0,"last_line":868},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get gets the first value associated with the given key.","is_multi":false,"pos":{"len":57,"line_nr":27,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If there are no values associated with the key, get returns","is_multi":false,"pos":{"len":61,"line_nr":28,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 none.","is_multi":false,"pos":{"len":7,"line_nr":29,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\values.v","content":"fn (v &Values) get(key string) ?string","name":"get","parent_name":"Values","return_type":"?string","pos":{"len":42,"line_nr":30,"pos":729,"col":0,"last_line":40},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_all gets the all the values associated with the given key.","is_multi":false,"pos":{"len":64,"line_nr":42,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If there are no values associated with the key, get returns","is_multi":false,"pos":{"len":61,"line_nr":43,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 a empty []string.","is_multi":false,"pos":{"len":19,"line_nr":44,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\values.v","content":"fn (v &Values) get_all(key string) []string","name":"get_all","parent_name":"Values","return_type":"[]string","pos":{"len":47,"line_nr":45,"pos":1058,"col":0,"last_line":56},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set sets the key to value. It replaces any existing","is_multi":false,"pos":{"len":53,"line_nr":58,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 values, or create a new bucket with the new key if it is missed.","is_multi":false,"pos":{"len":66,"line_nr":59,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\values.v","content":"fn (mut v Values) set(key string, value string)","name":"set","parent_name":"Values","return_type":"void","pos":{"len":51,"line_nr":60,"pos":1394,"col":0,"last_line":75},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 return a map <key []value> of the query string","is_multi":false,"pos":{"len":48,"line_nr":108,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\values.v","content":"fn (v Values) to_map() map[string][]string","name":"to_map","parent_name":"Values","return_type":"map[string][]string","pos":{"len":46,"line_nr":109,"pos":2398,"col":0,"last_line":121},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 return the list of values in the query string","is_multi":false,"pos":{"len":47,"line_nr":97,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\values.v","content":"fn (v Values) values() []string","name":"values","parent_name":"Values","return_type":"[]string","pos":{"len":35,"line_nr":98,"pos":2183,"col":0,"last_line":106},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 add adds the value to key. It appends to any existing","is_multi":false,"pos":{"len":55,"line_nr":77,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 values associated with key.","is_multi":false,"pos":{"len":29,"line_nr":78,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\values.v","content":"fn (mut v Values) add(key string, value string)","name":"add","parent_name":"Values","return_type":"void","pos":{"len":51,"line_nr":79,"pos":1812,"col":0,"last_line":85},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\values.v","content":"struct Values {\npub mut:\n\tdata []QueryValue\n\tlen  int\n}","name":"Values","parent_name":"","return_type":"","pos":{"len":17,"line_nr":11,"pos":245,"col":0,"last_line":15},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 split_host_port separates host and port. If the port is not valid, it returns","is_multi":false,"pos":{"len":79,"line_nr":1005,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the entire input as host, and it doesn't check the validity of the host.","is_multi":false,"pos":{"len":74,"line_nr":1006,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Per RFC 3986, it requires ports to be numeric.","is_multi":false,"pos":{"len":48,"line_nr":1007,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn split_host_port(hostport string) (string, string)","name":"split_host_port","parent_name":"","return_type":"(string, string)","pos":{"len":56,"line_nr":1008,"pos":30590,"col":0,"last_line":1022},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 valid_userinfo reports whether s is a valid userinfo string per RFC 3986","is_multi":false,"pos":{"len":74,"line_nr":1024,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Section 3.2.1:","is_multi":false,"pos":{"len":16,"line_nr":1025,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 userinfo    = *( unreserved / pct-encoded / sub-delims / ':' )","is_multi":false,"pos":{"len":64,"line_nr":1026,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 unreserved  = ALPHA / DIGIT / '-' / '.' / '_' / '~'","is_multi":false,"pos":{"len":53,"line_nr":1027,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 sub-delims  = '!' / '$' / '&' / ''' / '(' / ')'","is_multi":false,"pos":{"len":49,"line_nr":1028,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 / '*' / '+' / ',' / ';' / '='","is_multi":false,"pos":{"len":31,"line_nr":1029,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":1030,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It doesn't validate pct-encoded. The caller does that via fn unescape.","is_multi":false,"pos":{"len":72,"line_nr":1031,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn valid_userinfo(s string) bool","name":"valid_userinfo","parent_name":"","return_type":"bool","pos":{"len":36,"line_nr":1032,"pos":31332,"col":0,"last_line":1054},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\urllib.v","content":"fn ishex(c u8) bool","name":"ishex","parent_name":"","return_type":"bool","pos":{"len":23,"line_nr":1067,"pos":31929,"col":0,"last_line":1076},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_values returns a new Values struct for creating","is_multi":false,"pos":{"len":53,"line_nr":17,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 urlencoded query string parameters. it can also be to","is_multi":false,"pos":{"len":55,"line_nr":18,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 post form data with application/x-www-form-urlencoded.","is_multi":false,"pos":{"len":56,"line_nr":19,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 values.encode() will return the encoded data","is_multi":false,"pos":{"len":46,"line_nr":20,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\net\\urllib\\values.v","content":"fn new_values() Values","name":"new_values","parent_name":"","return_type":"Values","pos":{"len":26,"line_nr":21,"pos":524,"col":0,"last_line":25},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-02-05 19:45:34"}