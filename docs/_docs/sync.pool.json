{"module_name":"sync.pool","description":"\n\nThe `sync.pool` module provides a convenient way to run identical tasks over an array of items *in parallel*, without worrying about thread synchronization, waitgroups, mutexes etc.., you just need to supply a callback function, that will be called once per each item in your input array.\n\nAfter all the work is done in parallel by the worker threads in the pool, pool.work_on_items will return. You can then call pool.get_results[Result]() to retrieve a list of all the results, that the worker callbacks returned for each input item. Example:\n\n\n```v\nimport sync.pool\n\npub struct SResult {\ns string\n}\n\nfn sprocess(mut pp pool.PoolProcessor, idx int, wid int) &SResult {\nitem := pp.get_item[string](idx)\nprintln('idx: ${idx}, wid: ${wid}, item: ' + item)\nreturn &SResult{item.reverse()}\n}\n\nfn main() {\nmut pp := pool.new_pool_processor(callback: sprocess)\npp.work_on_items(['1abc', '2abc', '3abc', '4abc', '5abc', '6abc', '7abc'])\n// optionally, you can iterate over the results too:\nfor x in pp.get_results[SResult]() {\nprintln('result: ${x.s}')\n}\n}\n```\n\nSee https://github.com/vlang/v/blob/master/vlib/sync/pool/pool_test.v for a\nmore detailed usage example.\n","contents":[{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"const no_result = unsafe { nil }","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":8,"pos":97,"col":0,"last_line":8},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 set_max_jobs gives you the ability to override the number","is_multi":false,"pos":{"len":59,"line_nr":64,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 of jobs *after* the PoolProcessor had been created already.","is_multi":false,"pos":{"len":61,"line_nr":65,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (mut pool PoolProcessor) set_max_jobs(njobs int)","name":"set_max_jobs","parent_name":"PoolProcessor","return_type":"void","pos":{"len":55,"line_nr":66,"pos":1938,"col":0,"last_line":68},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 work_on_items receives a list of items of type T,","is_multi":false,"pos":{"len":51,"line_nr":70,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 then starts a work pool of pool.njobs threads, each running","is_multi":false,"pos":{"len":61,"line_nr":71,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 pool.thread_cb in a loop, until all items in the list,","is_multi":false,"pos":{"len":56,"line_nr":72,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 are processed.","is_multi":false,"pos":{"len":16,"line_nr":73,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 When pool.njobs is 0, the number of jobs is determined","is_multi":false,"pos":{"len":56,"line_nr":74,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 by the number of available cores on the system.","is_multi":false,"pos":{"len":49,"line_nr":75,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 work_on_items returns *after* all threads finish.","is_multi":false,"pos":{"len":51,"line_nr":76,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 You can optionally call get_results after that.","is_multi":false,"pos":{"len":49,"line_nr":77,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (mut pool PoolProcessor) work_on_items[T](items []T)","name":"work_on_items","parent_name":"PoolProcessor","return_type":"void","pos":{"len":59,"line_nr":78,"pos":2424,"col":0,"last_line":80},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (mut pool PoolProcessor) work_on_pointers(items []voidptr)","name":"work_on_pointers","parent_name":"PoolProcessor","return_type":"void","pos":{"len":65,"line_nr":82,"pos":2541,"col":0,"last_line":103},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_item - called by the worker callback.","is_multi":false,"pos":{"len":43,"line_nr":121,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Retrieves a type safe instance of the currently processed item","is_multi":false,"pos":{"len":64,"line_nr":122,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (pool &PoolProcessor) get_item[T](idx int) T","name":"get_item","parent_name":"PoolProcessor","return_type":"T","pos":{"len":51,"line_nr":123,"pos":3654,"col":0,"last_line":125},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_result - called by the main thread to get a specific result.","is_multi":false,"pos":{"len":66,"line_nr":127,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Retrieves a type safe instance of the produced result.","is_multi":false,"pos":{"len":56,"line_nr":128,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (pool &PoolProcessor) get_result[T](idx int) T","name":"get_result","parent_name":"PoolProcessor","return_type":"T","pos":{"len":53,"line_nr":129,"pos":3879,"col":0,"last_line":131},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_results - get a list of type safe results in the main thread.","is_multi":false,"pos":{"len":67,"line_nr":133,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (pool &PoolProcessor) get_results[T]() []T","name":"get_results","parent_name":"PoolProcessor","return_type":"[]T","pos":{"len":49,"line_nr":134,"pos":4051,"col":0,"last_line":140},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_results_ref - get a list of type safe results in the main thread.","is_multi":false,"pos":{"len":71,"line_nr":142,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (pool &PoolProcessor) get_results_ref[T]() []&T","name":"get_results_ref","parent_name":"PoolProcessor","return_type":"T","pos":{"len":54,"line_nr":143,"pos":4310,"col":0,"last_line":149},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_shared_context - can be called during the setup so that you can","is_multi":false,"pos":{"len":69,"line_nr":151,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 provide a context that is shared between all worker threads, like","is_multi":false,"pos":{"len":67,"line_nr":152,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 common options/settings.","is_multi":false,"pos":{"len":26,"line_nr":153,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (mut pool PoolProcessor) set_shared_context(context voidptr)","name":"set_shared_context","parent_name":"PoolProcessor","return_type":"void","pos":{"len":67,"line_nr":154,"pos":4667,"col":0,"last_line":156},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_shared_context - can be called in each worker callback, to get","is_multi":false,"pos":{"len":68,"line_nr":158,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the context set by pool.set_shared_context","is_multi":false,"pos":{"len":44,"line_nr":159,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (pool &PoolProcessor) get_shared_context() voidptr","name":"get_shared_context","parent_name":"PoolProcessor","return_type":"voidptr","pos":{"len":57,"line_nr":160,"pos":4887,"col":0,"last_line":162},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_thread_context - can be called during the setup at the start of","is_multi":false,"pos":{"len":69,"line_nr":164,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 each worker callback, so that the worker callback can have some thread","is_multi":false,"pos":{"len":72,"line_nr":165,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 local storage area where it can write/read information that is private","is_multi":false,"pos":{"len":72,"line_nr":166,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 to the given thread, without worrying that it will get overwritten by","is_multi":false,"pos":{"len":71,"line_nr":167,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 another thread","is_multi":false,"pos":{"len":16,"line_nr":168,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (mut pool PoolProcessor) set_thread_context(idx int, context voidptr)","name":"set_thread_context","parent_name":"PoolProcessor","return_type":"void","pos":{"len":76,"line_nr":169,"pos":5288,"col":0,"last_line":171},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_thread_context - returns a pointer, that was set with","is_multi":false,"pos":{"len":59,"line_nr":173,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 pool.set_thread_context . This pointer is private to each thread.","is_multi":false,"pos":{"len":67,"line_nr":174,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn (pool &PoolProcessor) get_thread_context(idx int) voidptr","name":"get_thread_context","parent_name":"PoolProcessor","return_type":"voidptr","pos":{"len":64,"line_nr":175,"pos":5537,"col":0,"last_line":177},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"struct PoolProcessor {\n\tthread_cb voidptr\nmut:\n\tnjobs           int\n\titems           []voidptr\n\tresults         []voidptr\n\tntask           u32 // reading/writing to this should be atomic\n\twaitgroup       sync.WaitGroup\n\tshared_context  voidptr\n\tthread_contexts []voidptr\n}","name":"PoolProcessor","parent_name":"","return_type":"","pos":{"len":24,"line_nr":10,"pos":135,"col":0,"last_line":20},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"type ThreadCB = fn (mut p PoolProcessor, idx int, task_id int) voidptr","name":"ThreadCB","parent_name":"","return_type":"","pos":{"len":17,"line_nr":22,"pos":413,"col":0,"last_line":22},"platform":"cross","kind":"typedef","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"struct PoolProcessorConfig {\n\tmaxjobs  int\n\tcallback ThreadCB = empty_cb\n}","name":"PoolProcessorConfig","parent_name":"","return_type":"","pos":{"len":30,"line_nr":30,"pos":583,"col":0,"last_line":33},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_pool_processor returns a new PoolProcessor instance.","is_multi":false,"pos":{"len":58,"line_nr":35,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The parameters of new_pool_processor are:","is_multi":false,"pos":{"len":43,"line_nr":36,"pos":0,"col":0,"last_line":0}},{"text":"\u0001    context.maxjobs: when 0 (the default), the PoolProcessor will use a","is_multi":false,"pos":{"len":72,"line_nr":37,"pos":0,"col":0,"last_line":0}},{"text":"\u0001      number of threads, that is optimal for your system to process your items.","is_multi":false,"pos":{"len":80,"line_nr":38,"pos":0,"col":0,"last_line":0}},{"text":"\u0001    context.callback: this should be a callback function, that each worker","is_multi":false,"pos":{"len":75,"line_nr":39,"pos":0,"col":0,"last_line":0}},{"text":"\u0001      thread in the pool will run for each item.","is_multi":false,"pos":{"len":49,"line_nr":40,"pos":0,"col":0,"last_line":0}},{"text":"\u0001      The callback function will receive as parameters:","is_multi":false,"pos":{"len":56,"line_nr":41,"pos":0,"col":0,"last_line":0}},{"text":"\u0001      1) the PoolProcessor instance, so it can call","is_multi":false,"pos":{"len":52,"line_nr":42,"pos":0,"col":0,"last_line":0}},{"text":"\u0001            p.get_item[int](idx) to get the actual item at index idx","is_multi":false,"pos":{"len":69,"line_nr":43,"pos":0,"col":0,"last_line":0}},{"text":"\u0001      2) idx - the index of the currently processed item","is_multi":false,"pos":{"len":57,"line_nr":44,"pos":0,"col":0,"last_line":0}},{"text":"\u0001      3) task_id - the index of the worker thread in which the callback","is_multi":false,"pos":{"len":72,"line_nr":45,"pos":0,"col":0,"last_line":0}},{"text":"\u0001            function is running.","is_multi":false,"pos":{"len":33,"line_nr":46,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\sync\\pool\\pool.c.v","content":"fn new_pool_processor(context PoolProcessorConfig) &PoolProcessor","name":"new_pool_processor","parent_name":"","return_type":"PoolProcessor","pos":{"len":69,"line_nr":47,"pos":1403,"col":0,"last_line":62},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:37"}