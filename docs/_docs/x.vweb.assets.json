{"module_name":"x.vweb.assets","description":"# Assets\n\nThe asset manager for vweb. You can use this asset manager to minify CSS and Javscript files, combine them into a single file and to make sure the asset you're using exists.\n\n## Usage\n\nAdd `AssetManager` to your App struct to use the asset manager.\n\n**Example:**\n```v\nmodule main\n\nimport x.vweb\nimport x.vweb.assets\n\npub struct Context {\nvweb.Context\n}\n\npub struct App {\npub mut:\nam assets.AssetManager\n}\n\nfn main() {\nmut app := &App{}\nvweb.run[App, Context](mut app, 8080)\n}\n```\n\n### Including assets\n\nIf you want to include an asset in your templates you can use the `include` method.\nFirst pass the type of asset (css or js), then specify the \"include name\" of an asset.\n\n**Example:**\n```html\n@{app.am.include(.css, 'main.css')}\n```\nWill generate\n```html\n<link rel=\"stylesheet\" href=\"/main.css\">\n```\n\n### Adding assets\n\nTo add an asset use the `add` method. You must specify the path of the asset and what its\ninclude name will be: the name that you will use in templates.\n\n**Example:**\n```v ignore\n// add a css file at the path \"css/main.css\" and set its include name to \"main.css\"\napp.am.add(.css, 'css/main.css', 'main.css')\n```\n\n### Minify and Combine assets\n\nIf you want to minify each asset you must set the `minify` field and specify the cache\nfolder. Each assest you add is minifed and outputted in `cache_dir`.\n\n**Example:**\n```v ignore\npub struct App {\npub mut:\nam assets.AssetManager = assets.AssetManager{\ncache_dir: 'dist'\nminify: true\n}\n}\n```\n\nTo combine the all currently added assets into a single file you must call the `combine` method\nand specify which asset type you want to combine.\n\n**Example:**\n```v ignore\n// `combine` returns the path of the minified file\nminified_file := app.am.combine(.css)!\n```\n\n### Handle folders\n\nYou can use the asset manger in combination with vweb's `StaticHandler` to serve\nassets in a folder as static assets.\n\n**Example:**\n```v ignore\npub struct App {\nvweb.StaticHandler\npub mut:\nam assets.AssetManager\n}\n```\nLet's say we have the following folder structure:\n```\nassets/\n├── css/\n│   └── main.css\n└── js/\n└── main.js\n```\n\nWe can tell the asset manager to add all assets in the `static` folder\n\n**Example:**\n```v ignore\nfn main() {\nmut app := &App{}\n// add all assets in the \"assets\" folder\napp.am.handle_assets('assets')!\n// serve all files in the \"assets\" folder as static files\napp.handle_static('assets', false)!\n// start the app\nvweb.run[App, Context](mut app, 8080)\n}\n```\n\nThe include name of each minified asset will be set to its relative path,\nso if you want to include `main.css` in your template you would write\n`@{app.am.include('css/main.css')}`\n\n#### Minify\n\nIf you add an asset folder and want to minify those assets you can call the\n`cleanup_cache` method to remove old files from the cache folder\nthat are no longer needed.\n\n**Example:**\n```v ignore\npub struct App {\nvweb.StaticHandler\npub mut:\nam assets.AssetManager = assets.AssetManager{\ncache_dir: 'dist'\nminify: true\n}\n}\n\nfn main() {\nmut app := &App{}\n// add all assets in the \"assets\" folder\napp.am.handle_assets('assets')!\n// remove all old cached files from the cache folder\napp.am.cleanup_cache()!\n// serve all files in the \"assets\" folder as static files\napp.handle_static('assets', false)!\n// start the app\nvweb.run[App, Context](mut app, 8080)\n}\n```\n\n#### Prefix the include name\n\nYou can add a custom prefix to the include name of assets when adding a folder.\n\n**Example:**\n```v ignore\n// add all assets in the \"assets\" folder\napp.am.handle_assets_at('assets', 'static')!\n```\n\nNow if you want to include `main.css` you would write\n``@{app.am.include('static/css/main.css')}`\n","contents":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"enum AssetType {\n\tcss\n\tjs\n\tall\n}","name":"AssetType","parent_name":"","return_type":"","pos":{"len":18,"line_nr":8,"pos":85,"col":0,"last_line":12},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"struct Asset {\npub:\n\tkind          AssetType\n\tfile_path     string\n\tlast_modified time.Time\n\tinclude_name  string\n}","name":"Asset","parent_name":"","return_type":"","pos":{"len":16,"line_nr":14,"pos":123,"col":0,"last_line":20},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 handle_assets recursively walks `directory_path` and adds any assets to the asset manager","is_multi":false,"pos":{"len":91,"line_nr":59,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn (mut am AssetManager) handle_assets(directory_path string) !","name":"handle_assets","parent_name":"AssetManager","return_type":"!","pos":{"len":67,"line_nr":60,"pos":1357,"col":0,"last_line":62},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 handle_assets_at recursively walks `directory_path` and adds any assets to the asset manager.","is_multi":false,"pos":{"len":95,"line_nr":64,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The include name of assets are prefixed with `prepend`","is_multi":false,"pos":{"len":56,"line_nr":65,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn (mut am AssetManager) handle_assets_at(directory_path string, prepend string) !","name":"handle_assets_at","parent_name":"AssetManager","return_type":"!","pos":{"len":86,"line_nr":66,"pos":1636,"col":0,"last_line":69},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get all assets of type `asset_type`","is_multi":false,"pos":{"len":37,"line_nr":71,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn (am AssetManager) get_assets(asset_type AssetType) []Asset","name":"get_assets","parent_name":"AssetManager","return_type":"[]Asset","pos":{"len":65,"line_nr":72,"pos":1863,"col":0,"last_line":87},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 add an asset to the asset manager","is_multi":false,"pos":{"len":35,"line_nr":89,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn (mut am AssetManager) add(asset_type AssetType, file_path string, include_name string) !","name":"add","parent_name":"AssetManager","return_type":"!","pos":{"len":95,"line_nr":90,"pos":2134,"col":0,"last_line":129},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 cleanup_cache removes all files in the cache directory that aren't cached at the time","is_multi":false,"pos":{"len":87,"line_nr":181,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 this function is called","is_multi":false,"pos":{"len":25,"line_nr":182,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn (mut am AssetManager) cleanup_cache() !","name":"cleanup_cache","parent_name":"AssetManager","return_type":"!","pos":{"len":46,"line_nr":183,"pos":4878,"col":0,"last_line":198},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 check if an asset is already added to the asset manager","is_multi":false,"pos":{"len":57,"line_nr":200,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn (am AssetManager) exists(asset_type AssetType, include_name string) bool","name":"exists","parent_name":"AssetManager","return_type":"bool","pos":{"len":79,"line_nr":201,"pos":5440,"col":0,"last_line":205},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 include css/js files in your vweb app from templates","is_multi":false,"pos":{"len":54,"line_nr":207,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example:","is_multi":false,"pos":{"len":10,"line_nr":208,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```html","is_multi":false,"pos":{"len":9,"line_nr":209,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 @{app.am.include(.css, 'main.css')}","is_multi":false,"pos":{"len":37,"line_nr":210,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```","is_multi":false,"pos":{"len":5,"line_nr":211,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn (am AssetManager) include(asset_type AssetType, include_name string) vweb.RawHtml","name":"include","parent_name":"AssetManager","return_type":"x.vweb.RawHtml","pos":{"len":88,"line_nr":212,"pos":5740,"col":0,"last_line":239},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 combine assets of type `asset_type` into a single file and return the outputted file path.","is_multi":false,"pos":{"len":92,"line_nr":241,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If you call `combine` with asset type `all` the function will return an empty string,","is_multi":false,"pos":{"len":87,"line_nr":242,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the minified files will be available at `combined_file_name`.`asset_type`","is_multi":false,"pos":{"len":75,"line_nr":243,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn (mut am AssetManager) combine(asset_type AssetType) !string","name":"combine","parent_name":"AssetManager","return_type":"!string","pos":{"len":66,"line_nr":244,"pos":6791,"col":0,"last_line":269},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"struct AssetManager {\nmut:\n\tcss               []Asset\n\tjs                []Asset\n\tcached_file_names []string\npub mut:\n\t// when true assets will be minified\n\tminify bool\n\t// the directory to store the cached/combined files\n\tcache_dir string\n\t// how a combined file should be named. For example for css the extension '.css'\n\t// will be added to the end of `combined_file_name`\n\tcombined_file_name string = 'combined'\n}","name":"AssetManager","parent_name":"","return_type":"","pos":{"len":23,"line_nr":22,"pos":244,"col":0,"last_line":35},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO: implement proper minification","is_multi":false,"pos":{"len":37,"line_nr":271,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn minify_css(css string) string","name":"minify_css","parent_name":"","return_type":"string","pos":{"len":36,"line_nr":273,"pos":7484,"col":0,"last_line":289},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 TODO: implement proper minification","is_multi":false,"pos":{"len":37,"line_nr":291,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\vweb\\assets\\assets.v","content":"fn minify_js(js string) string","name":"minify_js","parent_name":"","return_type":"string","pos":{"len":34,"line_nr":293,"pos":7882,"col":0,"last_line":310},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:44"}