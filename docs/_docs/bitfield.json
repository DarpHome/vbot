{"module_name":"bitfield","description":"## Description:\n\n`bitfield` is a module for manipulating arrays of bits, i.e. series of zeroes and ones spread across an array of storage units (unsigned 32-bit integers).\n\n## BitField Structure\n\nBit arrays are stored in data structures called 'BitField'. The structure is 'opaque', i.e. its internals are not available to the end user. This module provides API (functions and methods) for accessing and modifying bit arrays.","contents":[{"attributes":{},"comments":[{"text":"\nbitfield is a module for\nmanipulating arrays of bits, i.e. series of zeroes and ones spread across an\narray of storage units (unsigned 32-bit integers).\n\nBitField structure\n------------------\n\nBit arrays are stored in data structures called 'BitField'. The structure is\n'opaque', i.e. its internals are not available to the end user. This module\nprovides API (functions and methods) for accessing and modifying bit arrays.\n","is_multi":true,"pos":{"len":424,"line_nr":2,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 str converts the bit array to a string of characters ('0' and '1') and","is_multi":false,"pos":{"len":72,"line_nr":81,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 return the string","is_multi":false,"pos":{"len":19,"line_nr":82,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (input BitField) str() string","name":"str","parent_name":"BitField","return_type":"string","pos":{"len":36,"line_nr":83,"pos":1917,"col":0,"last_line":93},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 frees the memory allocated for the bitfield instance","is_multi":false,"pos":{"len":54,"line_nr":105,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (instance &BitField) free()","name":"free","parent_name":"BitField","return_type":"void","pos":{"len":34,"line_nr":107,"pos":2436,"col":0,"last_line":111},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_bit returns the value (0 or 1) of bit number 'bit_nr' (count from 0).","is_multi":false,"pos":{"len":75,"line_nr":113,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (instance BitField) get_bit(bitnr int) int","name":"get_bit","parent_name":"BitField","return_type":"int","pos":{"len":49,"line_nr":115,"pos":2600,"col":0,"last_line":120},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_bit sets bit number 'bit_nr' to 1 (count from 0).","is_multi":false,"pos":{"len":55,"line_nr":122,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (mut instance BitField) set_bit(bitnr int)","name":"set_bit","parent_name":"BitField","return_type":"void","pos":{"len":49,"line_nr":124,"pos":2852,"col":0,"last_line":129},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 clear_bit clears (sets to zero) bit number 'bit_nr' (count from 0).","is_multi":false,"pos":{"len":69,"line_nr":131,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (mut instance BitField) clear_bit(bitnr int)","name":"clear_bit","parent_name":"BitField","return_type":"void","pos":{"len":51,"line_nr":133,"pos":3079,"col":0,"last_line":138},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 extract returns the value converted from a slice of bit numbers","is_multi":false,"pos":{"len":65,"line_nr":140,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 from 'start' by the length of 'len'.","is_multi":false,"pos":{"len":38,"line_nr":141,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 0101 (1, 2) => 0b10","is_multi":false,"pos":{"len":21,"line_nr":142,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (instance BitField) extract(start int, len int) u64","name":"extract","parent_name":"BitField","return_type":"u64","pos":{"len":58,"line_nr":143,"pos":3358,"col":0,"last_line":153},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 insert sets bit numbers from 'start' to 'len' length with","is_multi":false,"pos":{"len":59,"line_nr":155,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the value converted from the number 'value'.","is_multi":false,"pos":{"len":46,"line_nr":156,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 0000 (1, 2, 0b10) => 0100","is_multi":false,"pos":{"len":27,"line_nr":157,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (mut instance BitField) insert[T](start int, len int, _value T)","name":"insert","parent_name":"BitField","return_type":"void","pos":{"len":70,"line_nr":158,"pos":3722,"col":0,"last_line":173},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 extract returns the value converted from a slice of bit numbers","is_multi":false,"pos":{"len":65,"line_nr":175,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 from 'start' by the length of 'len'.","is_multi":false,"pos":{"len":38,"line_nr":176,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 0101 (1, 2) => 0b01","is_multi":false,"pos":{"len":21,"line_nr":177,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (instance BitField) extract_lowest_bits_first(start int, len int) u64","name":"extract_lowest_bits_first","parent_name":"BitField","return_type":"u64","pos":{"len":76,"line_nr":178,"pos":4144,"col":0,"last_line":188},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 insert sets bit numbers from 'start' to 'len' length with","is_multi":false,"pos":{"len":59,"line_nr":190,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the value converted from the number 'value'.","is_multi":false,"pos":{"len":46,"line_nr":191,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 0000 (1, 2, 0b10) => 0010","is_multi":false,"pos":{"len":27,"line_nr":192,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (mut instance BitField) insert_lowest_bits_first[T](start int, len int, _value T)","name":"insert_lowest_bits_first","parent_name":"BitField","return_type":"void","pos":{"len":88,"line_nr":193,"pos":4516,"col":0,"last_line":207},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 set_all sets all bits in the array to 1.","is_multi":false,"pos":{"len":42,"line_nr":209,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (mut instance BitField) set_all()","name":"set_all","parent_name":"BitField","return_type":"void","pos":{"len":40,"line_nr":210,"pos":4855,"col":0,"last_line":215},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 clear_all clears (sets to zero) all bits in the array.","is_multi":false,"pos":{"len":56,"line_nr":217,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (mut instance BitField) clear_all()","name":"clear_all","parent_name":"BitField","return_type":"void","pos":{"len":42,"line_nr":218,"pos":5067,"col":0,"last_line":222},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 toggle_bit changes the value (from 0 to 1 or from 1 to 0) of bit","is_multi":false,"pos":{"len":66,"line_nr":224,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 number 'bit_nr'.","is_multi":false,"pos":{"len":18,"line_nr":225,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (mut instance BitField) toggle_bit(bitnr int)","name":"toggle_bit","parent_name":"BitField","return_type":"void","pos":{"len":52,"line_nr":227,"pos":5288,"col":0,"last_line":232},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get_size returns the number of bits the array can hold.","is_multi":false,"pos":{"len":57,"line_nr":327,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (instance BitField) get_size() int","name":"get_size","parent_name":"BitField","return_type":"int","pos":{"len":41,"line_nr":329,"pos":8921,"col":0,"last_line":331},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 clone creates a copy of a bit array.","is_multi":false,"pos":{"len":38,"line_nr":333,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (instance BitField) clone() BitField","name":"clone","parent_name":"BitField","return_type":"BitField","pos":{"len":43,"line_nr":334,"pos":9030,"col":0,"last_line":341},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 == compares 2 bitfields, and returns true when they are equal","is_multi":false,"pos":{"len":63,"line_nr":343,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (a BitField) == (b BitField) bool","name":"==","parent_name":"BitField","return_type":"bool","pos":{"len":40,"line_nr":344,"pos":9301,"col":0,"last_line":354},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 pop_count returns the number of set bits (ones) in the array.","is_multi":false,"pos":{"len":63,"line_nr":356,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (instance BitField) pop_count() int","name":"pop_count","parent_name":"BitField","return_type":"int","pos":{"len":42,"line_nr":357,"pos":9557,"col":0,"last_line":375},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 pos checks if the array contains a sub-array 'needle' and returns its","is_multi":false,"pos":{"len":71,"line_nr":384,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 position if it does, -1 if it does not, and -2 on error.","is_multi":false,"pos":{"len":58,"line_nr":385,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (haystack BitField) pos(needle BitField) int","name":"pos","parent_name":"BitField","return_type":"int","pos":{"len":51,"line_nr":386,"pos":10324,"col":0,"last_line":403},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 slice returns a sub-array of bits between 'start_bit_nr' (included) and","is_multi":false,"pos":{"len":73,"line_nr":405,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 'end_bit_nr' (excluded).","is_multi":false,"pos":{"len":26,"line_nr":406,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (input BitField) slice(_start int, _end int) BitField","name":"slice","parent_name":"BitField","return_type":"BitField","pos":{"len":60,"line_nr":407,"pos":10935,"col":0,"last_line":457},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reverse reverses the order of bits in the array (swap the first with the","is_multi":false,"pos":{"len":74,"line_nr":459,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 last, the second with the last but one and so on).","is_multi":false,"pos":{"len":52,"line_nr":460,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (instance BitField) reverse() BitField","name":"reverse","parent_name":"BitField","return_type":"BitField","pos":{"len":45,"line_nr":461,"pos":12827,"col":0,"last_line":479},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 resize changes the size of the bit array to 'new_size'.","is_multi":false,"pos":{"len":57,"line_nr":481,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (mut instance BitField) resize(new_size int)","name":"resize","parent_name":"BitField","return_type":"void","pos":{"len":51,"line_nr":482,"pos":13472,"col":0,"last_line":495},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rotate circular-shifts the bits by 'offset' positions (move","is_multi":false,"pos":{"len":61,"line_nr":497,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 'offset' bit to 0, 'offset+1' bit to 1, and so on).","is_multi":false,"pos":{"len":53,"line_nr":498,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn (instance BitField) rotate(offset int) BitField","name":"rotate","parent_name":"BitField","return_type":"BitField","pos":{"len":54,"line_nr":499,"pos":14034,"col":0,"last_line":521},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"struct BitField {\nmut:\n\tsize int\n\t// field *u32\n\tfield []u32\n}","name":"BitField","parent_name":"","return_type":"","pos":{"len":19,"line_nr":14,"pos":446,"col":0,"last_line":19},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 from_bytes converts a byte array into a bitfield.","is_multi":false,"pos":{"len":51,"line_nr":24,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 [0x0F, 0x01] => 0000 1111 0000 0001","is_multi":false,"pos":{"len":37,"line_nr":25,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn from_bytes(input []u8) BitField","name":"from_bytes","parent_name":"","return_type":"BitField","pos":{"len":38,"line_nr":26,"pos":648,"col":0,"last_line":57},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 from_bytes_lowest_bits_first converts a byte array into a bitfield","is_multi":false,"pos":{"len":68,"line_nr":59,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 [0x0F, 0x01] => 1111 0000 1000 0000","is_multi":false,"pos":{"len":37,"line_nr":60,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn from_bytes_lowest_bits_first(input []u8) BitField","name":"from_bytes_lowest_bits_first","parent_name":"","return_type":"BitField","pos":{"len":56,"line_nr":61,"pos":1342,"col":0,"last_line":67},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 from_str converts a string of characters ('0' and '1') to a bit","is_multi":false,"pos":{"len":65,"line_nr":69,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 array. Any character different from '0' is treated as '1'.","is_multi":false,"pos":{"len":60,"line_nr":70,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn from_str(input string) BitField","name":"from_str","parent_name":"","return_type":"BitField","pos":{"len":38,"line_nr":71,"pos":1655,"col":0,"last_line":79},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new creates an empty bit array of capable of storing 'size' bits.","is_multi":false,"pos":{"len":67,"line_nr":95,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn new(size int) BitField","name":"new","parent_name":"","return_type":"BitField","pos":{"len":29,"line_nr":96,"pos":2186,"col":0,"last_line":103},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bf_and performs logical AND operation on every pair of bits from 'input1' and","is_multi":false,"pos":{"len":79,"line_nr":234,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 'input2' and returns the result as a new array. If inputs differ in size,","is_multi":false,"pos":{"len":75,"line_nr":235,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the tail of the longer one is ignored.","is_multi":false,"pos":{"len":40,"line_nr":236,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn bf_and(input1 BitField, input2 BitField) BitField","name":"bf_and","parent_name":"","return_type":"BitField","pos":{"len":56,"line_nr":237,"pos":5637,"col":0,"last_line":246},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bf_not toggles all bits in a bit array and returns the result as a new array.","is_multi":false,"pos":{"len":79,"line_nr":248,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn bf_not(input BitField) BitField","name":"bf_not","parent_name":"","return_type":"BitField","pos":{"len":38,"line_nr":249,"pos":5995,"col":0,"last_line":258},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bf_or performs logical OR operation on every pair of bits from 'input1' and","is_multi":false,"pos":{"len":77,"line_nr":260,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 'input2' and returns the result as a new array. If inputs differ in size,","is_multi":false,"pos":{"len":75,"line_nr":261,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the tail of the longer one is ignored.","is_multi":false,"pos":{"len":40,"line_nr":262,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn bf_or(input1 BitField, input2 BitField) BitField","name":"bf_or","parent_name":"","return_type":"BitField","pos":{"len":55,"line_nr":263,"pos":6415,"col":0,"last_line":272},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bf_xor perform logical XOR operation on every pair of bits from 'input1' and","is_multi":false,"pos":{"len":78,"line_nr":274,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 'input2' and returns the result as a new array. If inputs differ in size,","is_multi":false,"pos":{"len":75,"line_nr":275,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the tail of the longer one is ignored.","is_multi":false,"pos":{"len":40,"line_nr":276,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn bf_xor(input1 BitField, input2 BitField) BitField","name":"bf_xor","parent_name":"","return_type":"BitField","pos":{"len":56,"line_nr":277,"pos":6890,"col":0,"last_line":286},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 join concatenates two bit arrays and return the result as a new array.","is_multi":false,"pos":{"len":72,"line_nr":288,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn join(input1 BitField, input2 BitField) BitField","name":"join","parent_name":"","return_type":"BitField","pos":{"len":54,"line_nr":289,"pos":7241,"col":0,"last_line":325},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 hamming computes the Hamming distance between two bit arrays.","is_multi":false,"pos":{"len":63,"line_nr":377,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\bitfield\\bitfield.v","content":"fn hamming(input1 BitField, input2 BitField) int","name":"hamming","parent_name":"","return_type":"int","pos":{"len":52,"line_nr":379,"pos":10062,"col":0,"last_line":382},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:30"}