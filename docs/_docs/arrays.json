{"module_name":"arrays","contents":[{"attributes":{},"comments":[{"text":"\u0001 Common arrays functions:","is_multi":false,"pos":{"len":26,"line_nr":4,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - min / max - return the value of the minimum / maximum","is_multi":false,"pos":{"len":57,"line_nr":5,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - idx_min / idx_max - return the index of the first minimum / maximum","is_multi":false,"pos":{"len":71,"line_nr":6,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - merge - combine two sorted arrays and maintain sorted order","is_multi":false,"pos":{"len":63,"line_nr":7,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - append - combine two arrays, by appending the second array to the first","is_multi":false,"pos":{"len":75,"line_nr":8,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - chunk - chunk array to arrays with n elements","is_multi":false,"pos":{"len":49,"line_nr":9,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - window - get snapshots of the window of the given size sliding along array with the given step, where each snapshot is an array","is_multi":false,"pos":{"len":131,"line_nr":10,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - group - merge two arrays by interleaving e.g. arrays.group([1,3,5], [2,4,6]) => [[1,2],[3,4],[5,6]]","is_multi":false,"pos":{"len":103,"line_nr":11,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - flatten - reduce dimensionality of array by one. e.g. arrays.flatten([[1,2],[3,4],[5,6]]) => [1,2,3,4,5,6]","is_multi":false,"pos":{"len":110,"line_nr":12,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - each - call a callback fn, for each element of the array, similar to a.map(), but unlike it, the callback should not return anything","is_multi":false,"pos":{"len":136,"line_nr":13,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 min returns the minimum value in the array","is_multi":false,"pos":{"len":44,"line_nr":15,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.min([1, 2, 3, 0, 9])! // => 0","is_multi":false,"pos":{"len":47,"line_nr":16,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn min[T](array []T) !T","name":"min","parent_name":"","return_type":"!T","pos":{"len":27,"line_nr":17,"pos":968,"col":0,"last_line":28},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 max returns the maximum value in the array","is_multi":false,"pos":{"len":44,"line_nr":30,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.max([1, 2, 3, 0, 9])! // => 9","is_multi":false,"pos":{"len":47,"line_nr":31,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn max[T](array []T) !T","name":"max","parent_name":"","return_type":"!T","pos":{"len":27,"line_nr":32,"pos":1252,"col":0,"last_line":43},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 idx_min returns the index of the minimum value in the array","is_multi":false,"pos":{"len":61,"line_nr":45,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.idx_min([1, 2, 3, 0, 9])! // => 3","is_multi":false,"pos":{"len":51,"line_nr":46,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn idx_min[T](array []T) !int","name":"idx_min","parent_name":"","return_type":"!int","pos":{"len":33,"line_nr":47,"pos":1557,"col":0,"last_line":60},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 idx_max returns the index of the maximum value in the array","is_multi":false,"pos":{"len":61,"line_nr":62,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.idx_max([1, 2, 3, 0, 9])! // => 4","is_multi":false,"pos":{"len":51,"line_nr":63,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn idx_max[T](array []T) !int","name":"idx_max","parent_name":"","return_type":"!int","pos":{"len":33,"line_nr":64,"pos":1900,"col":0,"last_line":77},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 merge two sorted arrays (ascending) and maintain sorted order","is_multi":false,"pos":{"len":63,"line_nr":79,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.merge([1, 3, 5, 7], [2, 4, 6, 8]) // => [1, 2, 3, 4, 5, 6, 7, 8]","is_multi":false,"pos":{"len":82,"line_nr":80,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn merge[T](a []T, b []T) []T","name":"merge","parent_name":"","return_type":"[]T","pos":{"len":33,"line_nr":82,"pos":2299,"col":0,"last_line":111},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 append the second array `b` to the first array `a`, and return the result.","is_multi":false,"pos":{"len":76,"line_nr":113,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note, that unlike arrays.concat, arrays.append is less flexible, but more efficient,","is_multi":false,"pos":{"len":86,"line_nr":114,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 since it does not require you to use ...a for the second parameter.","is_multi":false,"pos":{"len":69,"line_nr":115,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.append([1, 3, 5, 7], [2, 4, 6, 8]) // => [1, 3, 5, 7, 2, 4, 6, 8]","is_multi":false,"pos":{"len":83,"line_nr":116,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn append[T](a []T, b []T) []T","name":"append","parent_name":"","return_type":"[]T","pos":{"len":34,"line_nr":117,"pos":3062,"col":0,"last_line":122},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 group n arrays into a single array of arrays with n elements","is_multi":false,"pos":{"len":62,"line_nr":124,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":125,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This function is analogous to the \"zip\" function of other languages.","is_multi":false,"pos":{"len":70,"line_nr":126,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 To fully interleave two arrays, follow this function with a call to `flatten`.","is_multi":false,"pos":{"len":80,"line_nr":127,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":128,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NOTE: An error will be generated if the type annotation is omitted.","is_multi":false,"pos":{"len":69,"line_nr":129,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.group[int]([1, 2, 3], [4, 5, 6]) // => [[1, 4], [2, 5], [3, 6]]","is_multi":false,"pos":{"len":81,"line_nr":130,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn group[T](arrs ...[]T) [][]T","name":"group","parent_name":"","return_type":"[][]T","pos":{"len":34,"line_nr":131,"pos":3540,"col":0,"last_line":155},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 chunk array into a single array of arrays where each element is the next `size` elements of the original","is_multi":false,"pos":{"len":106,"line_nr":157,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.chunk([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)) // => [[1, 2], [3, 4], [5, 6], [7, 8], [9]]","is_multi":false,"pos":{"len":100,"line_nr":158,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn chunk[T](array []T, size int) [][]T","name":"chunk","parent_name":"","return_type":"[][]T","pos":{"len":42,"line_nr":159,"pos":4366,"col":0,"last_line":181},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"struct WindowAttribute {\n\tsize int\n\tstep int = 1\n}","name":"WindowAttribute","parent_name":"","return_type":"","pos":{"len":26,"line_nr":183,"pos":4826,"col":0,"last_line":186},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 get snapshots of the window of the given size sliding along array with the given step, where each snapshot is an array.","is_multi":false,"pos":{"len":121,"line_nr":188,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `size` - snapshot size","is_multi":false,"pos":{"len":26,"line_nr":189,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 - `step` - gap size between each snapshot, default is 1.","is_multi":false,"pos":{"len":58,"line_nr":190,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":191,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.window([1, 2, 3, 4], size: 2) // => [[1, 2], [2, 3], [3, 4]]","is_multi":false,"pos":{"len":78,"line_nr":192,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.window([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], size: 3, step: 2) // => [[1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9]]","is_multi":false,"pos":{"len":126,"line_nr":193,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn window[T](array []T, attr WindowAttribute) [][]T","name":"window","parent_name":"","return_type":"[][]T","pos":{"len":55,"line_nr":194,"pos":5304,"col":0,"last_line":209},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 sum up array, return nothing when array has no elements","is_multi":false,"pos":{"len":57,"line_nr":211,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":212,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NOTICE: currently V has bug that cannot make sum function takes custom struct with + operator overloaded","is_multi":false,"pos":{"len":106,"line_nr":213,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 which means you can only pass array of numbers for now.","is_multi":false,"pos":{"len":57,"line_nr":214,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 TODO: Fix generic operator overloading detection issue.","is_multi":false,"pos":{"len":57,"line_nr":215,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.sum[int]([1, 2, 3, 4, 5])! // => 15","is_multi":false,"pos":{"len":53,"line_nr":216,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn sum[T](array []T) !T","name":"sum","parent_name":"","return_type":"!T","pos":{"len":27,"line_nr":217,"pos":5995,"col":0,"last_line":233},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reduce sets `acc = array[0]`, then successively calls `acc = reduce_op(acc, elem)` for each remaining element in `array`.","is_multi":false,"pos":{"len":123,"line_nr":235,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 returns the accumulated value in `acc`.","is_multi":false,"pos":{"len":41,"line_nr":236,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 returns an error if the array is empty.","is_multi":false,"pos":{"len":41,"line_nr":237,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See also: [fold](#fold).","is_multi":false,"pos":{"len":26,"line_nr":238,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.reduce([1, 2, 3, 4, 5], fn (t1 int, t2 int) int { return t1 * t2 })! // => 120","is_multi":false,"pos":{"len":96,"line_nr":239,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn reduce[T](array []T, reduce_op fn (acc T, elem T) T) !T","name":"reduce","parent_name":"","return_type":"!T","pos":{"len":62,"line_nr":240,"pos":6573,"col":0,"last_line":256},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 reduce_indexed sets `acc = array[0]`, then successively calls `acc = reduce_op(idx, acc, elem)` for each remaining element in `array`.","is_multi":false,"pos":{"len":136,"line_nr":258,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 returns the accumulated value in `acc`.","is_multi":false,"pos":{"len":41,"line_nr":259,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 returns an error if the array is empty.","is_multi":false,"pos":{"len":41,"line_nr":260,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See also: [fold_indexed](#fold_indexed).","is_multi":false,"pos":{"len":42,"line_nr":261,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn reduce_indexed[T](array []T, reduce_op fn (idx int, acc T, elem T) T) !T","name":"reduce_indexed","parent_name":"","return_type":"!T","pos":{"len":79,"line_nr":262,"pos":7137,"col":0,"last_line":278},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 filter_indexed filters elements based on `predicate` function","is_multi":false,"pos":{"len":63,"line_nr":280,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 being invoked on each element with its index in the original array.","is_multi":false,"pos":{"len":69,"line_nr":281,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn filter_indexed[T](array []T, predicate fn (idx int, elem T) bool) []T","name":"filter_indexed","parent_name":"","return_type":"[]T","pos":{"len":76,"line_nr":282,"pos":7589,"col":0,"last_line":292},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 fold sets `acc = init`, then successively calls `acc = fold_op(acc, elem)` for each element in `array`.","is_multi":false,"pos":{"len":105,"line_nr":294,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 returns `acc`.","is_multi":false,"pos":{"len":16,"line_nr":295,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example:","is_multi":false,"pos":{"len":10,"line_nr":296,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```v","is_multi":false,"pos":{"len":6,"line_nr":297,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 // Sum the length of each string in an array","is_multi":false,"pos":{"len":46,"line_nr":298,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 a := ['Hi', 'all']","is_multi":false,"pos":{"len":20,"line_nr":299,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 r := arrays.fold[string, int](a, 0,","is_multi":false,"pos":{"len":37,"line_nr":300,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 \tfn (r int, t string) int { return r + t.len })","is_multi":false,"pos":{"len":49,"line_nr":301,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 assert r == 5","is_multi":false,"pos":{"len":15,"line_nr":302,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```","is_multi":false,"pos":{"len":5,"line_nr":303,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn fold[T, R](array []T, init R, fold_op fn (acc R, elem T) R) R","name":"fold","parent_name":"","return_type":"R","pos":{"len":68,"line_nr":304,"pos":8118,"col":0,"last_line":312},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 fold_indexed sets `acc = init`, then successively calls `acc = fold_op(idx, acc, elem)` for each element in `array`.","is_multi":false,"pos":{"len":118,"line_nr":314,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 returns `acc`.","is_multi":false,"pos":{"len":16,"line_nr":315,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn fold_indexed[T, R](array []T, init R, fold_op fn (idx int, acc R, elem T) R) R","name":"fold_indexed","parent_name":"","return_type":"R","pos":{"len":85,"line_nr":316,"pos":8414,"col":0,"last_line":324},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 flatten flattens n + 1 dimensional array into n dimensional array","is_multi":false,"pos":{"len":67,"line_nr":326,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.flatten[int]([[1, 2, 3], [4, 5]]) // => [1, 2, 3, 4, 5]","is_multi":false,"pos":{"len":73,"line_nr":327,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn flatten[T](array [][]T) []T","name":"flatten","parent_name":"","return_type":"[]T","pos":{"len":34,"line_nr":328,"pos":8739,"col":0,"last_line":348},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 flat_map creates a new array populated with the flattened result of calling transform function","is_multi":false,"pos":{"len":96,"line_nr":350,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 being invoked on each element of `list`.","is_multi":false,"pos":{"len":42,"line_nr":351,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn flat_map[T, R](array []T, transform fn (elem T) []R) []R","name":"flat_map","parent_name":"","return_type":"[]R","pos":{"len":63,"line_nr":352,"pos":9187,"col":0,"last_line":360},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 flat_map_indexed creates a new array populated with the flattened result of calling the `transform` function","is_multi":false,"pos":{"len":110,"line_nr":362,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 being invoked on each element with its index in the original array.","is_multi":false,"pos":{"len":69,"line_nr":363,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn flat_map_indexed[T, R](array []T, transform fn (idx int, elem T) []R) []R","name":"flat_map_indexed","parent_name":"","return_type":"[]R","pos":{"len":80,"line_nr":364,"pos":9548,"col":0,"last_line":372},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 map_indexed creates a new array populated with the result of calling the `transform` function","is_multi":false,"pos":{"len":95,"line_nr":374,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 being invoked on each element with its index in the original array.","is_multi":false,"pos":{"len":69,"line_nr":375,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn map_indexed[T, R](array []T, transform fn (idx int, elem T) R) []R","name":"map_indexed","parent_name":"","return_type":"[]R","pos":{"len":73,"line_nr":376,"pos":9917,"col":0,"last_line":384},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 group_by groups together elements, for which the `grouping_op` callback produced the same result.","is_multi":false,"pos":{"len":99,"line_nr":386,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.group_by[int, string](['H', 'el', 'lo'], fn (v string) int { return v.len }) // => {1: ['H'], 2: ['el', 'lo']}","is_multi":false,"pos":{"len":128,"line_nr":387,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn group_by[K, V](array []V, grouping_op fn (val V) K) map[K][]V","name":"group_by","parent_name":"","return_type":"map[K][]V","pos":{"len":68,"line_nr":388,"pos":10331,"col":0,"last_line":403},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 concatenate an array with an arbitrary number of additional values","is_multi":false,"pos":{"len":68,"line_nr":405,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":406,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 NOTE: if you have two arrays, you should simply use the `<<` operator directly","is_multi":false,"pos":{"len":80,"line_nr":407,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.concat([1, 2, 3], 4, 5, 6) == [1, 2, 3, 4, 5, 6] // => true","is_multi":false,"pos":{"len":77,"line_nr":408,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.concat([1, 2, 3], ...[4, 5, 6]) == [1, 2, 3, 4, 5, 6] // => true","is_multi":false,"pos":{"len":82,"line_nr":409,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arr << [4, 5, 6] // does what you need if arr is mutable","is_multi":false,"pos":{"len":67,"line_nr":410,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn concat[T](a []T, b ...T) []T","name":"concat","parent_name":"","return_type":"[]T","pos":{"len":35,"line_nr":411,"pos":11055,"col":0,"last_line":418},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 returns the smallest element >= val, requires `array` to be sorted","is_multi":false,"pos":{"len":68,"line_nr":420,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.lower_bound([2, 4, 6, 8], 3)! // => 4","is_multi":false,"pos":{"len":55,"line_nr":421,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn lower_bound[T](array []T, val T) !T","name":"lower_bound","parent_name":"","return_type":"!T","pos":{"len":42,"line_nr":422,"pos":11285,"col":0,"last_line":441},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 returns the largest element <= val, requires `array` to be sorted","is_multi":false,"pos":{"len":67,"line_nr":443,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.upper_bound([2, 4, 6, 8], 3)! // => 2","is_multi":false,"pos":{"len":55,"line_nr":444,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn upper_bound[T](array []T, val T) !T","name":"upper_bound","parent_name":"","return_type":"!T","pos":{"len":42,"line_nr":445,"pos":11803,"col":0,"last_line":464},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 binary search, requires `array` to be sorted, returns index of found item or error.","is_multi":false,"pos":{"len":85,"line_nr":466,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Binary searches on sorted lists can be faster than other array searches because at maximum","is_multi":false,"pos":{"len":92,"line_nr":467,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the algorithm only has to traverse log N elements","is_multi":false,"pos":{"len":51,"line_nr":468,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.binary_search([1, 2, 3, 4], 4)! // => 3","is_multi":false,"pos":{"len":57,"line_nr":469,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn binary_search[T](array []T, target T) !int","name":"binary_search","parent_name":"","return_type":"!int","pos":{"len":49,"line_nr":470,"pos":12481,"col":0,"last_line":486},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rotate_left rotates the array in-place such that the first `mid` elements of the array move to the end","is_multi":false,"pos":{"len":104,"line_nr":488,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 while the last `array.len - mid` elements move to the front. After calling `rotate_left`, the element","is_multi":false,"pos":{"len":103,"line_nr":489,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 previously at index `mid` will become the first element in the array.","is_multi":false,"pos":{"len":71,"line_nr":490,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example:","is_multi":false,"pos":{"len":10,"line_nr":491,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```v","is_multi":false,"pos":{"len":6,"line_nr":492,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 mut x := [1,2,3,4,5,6]","is_multi":false,"pos":{"len":24,"line_nr":493,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 arrays.rotate_left(mut x, 2)","is_multi":false,"pos":{"len":30,"line_nr":494,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 println(x) // [3, 4, 5, 6, 1, 2]","is_multi":false,"pos":{"len":34,"line_nr":495,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```","is_multi":false,"pos":{"len":5,"line_nr":496,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn rotate_left[T](mut array []T, mid int)","name":"rotate_left","parent_name":"","return_type":"void","pos":{"len":45,"line_nr":497,"pos":13191,"col":0,"last_line":504},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 rotate_right rotates the array in-place such that the first `array.len - k` elements of the array move to the end","is_multi":false,"pos":{"len":115,"line_nr":506,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 while the last `k` elements move to the front. After calling `rotate_right`, the element previously at index `array.len - k`","is_multi":false,"pos":{"len":126,"line_nr":507,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 will become the first element in the array.","is_multi":false,"pos":{"len":45,"line_nr":508,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example:","is_multi":false,"pos":{"len":10,"line_nr":509,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```v","is_multi":false,"pos":{"len":6,"line_nr":510,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 mut x := [1,2,3,4,5,6]","is_multi":false,"pos":{"len":24,"line_nr":511,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 arrays.rotate_right(mut x, 2)","is_multi":false,"pos":{"len":31,"line_nr":512,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 println(x) // [5, 6, 1, 2, 3, 4]","is_multi":false,"pos":{"len":34,"line_nr":513,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 ```","is_multi":false,"pos":{"len":5,"line_nr":514,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn rotate_right[T](mut array []T, k int)","name":"rotate_right","parent_name":"","return_type":"void","pos":{"len":44,"line_nr":515,"pos":13828,"col":0,"last_line":522},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 copy copies the `src` array elements to the `dst` array.","is_multi":false,"pos":{"len":58,"line_nr":642,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The number of the elements copied is the minimum of the length of both arrays.","is_multi":false,"pos":{"len":80,"line_nr":643,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Returns the number of elements copied.","is_multi":false,"pos":{"len":40,"line_nr":644,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn copy[T](mut dst []T, src []T) int","name":"copy","parent_name":"","return_type":"int","pos":{"len":40,"line_nr":645,"pos":16647,"col":0,"last_line":659},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 carray_to_varray copies a C byte array into a V array of type `T`.","is_multi":false,"pos":{"len":68,"line_nr":672,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See also: `cstring_to_vstring`","is_multi":false,"pos":{"len":32,"line_nr":673,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn carray_to_varray[T](c_array_data voidptr, items int) []T","name":"carray_to_varray","parent_name":"","return_type":"[]T","pos":{"len":63,"line_nr":675,"pos":17379,"col":0,"last_line":680},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 find_first returns the first element that matches the given predicate.","is_multi":false,"pos":{"len":72,"line_nr":682,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Returns `none` if no match is found.","is_multi":false,"pos":{"len":38,"line_nr":683,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.find_first([1, 2, 3, 4, 5], fn (i int) bool { return i == 3 })? // => 3","is_multi":false,"pos":{"len":89,"line_nr":684,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn find_first[T](array []T, predicate fn (elem T) bool) ?T","name":"find_first","parent_name":"","return_type":"?T","pos":{"len":62,"line_nr":685,"pos":17801,"col":0,"last_line":695},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 find_last returns the last element that matches the given predicate.","is_multi":false,"pos":{"len":70,"line_nr":697,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Returns `none` if no match is found.","is_multi":false,"pos":{"len":38,"line_nr":698,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.find_last([1, 2, 3, 4, 5], fn (i int) bool { return i == 3})? // => 3","is_multi":false,"pos":{"len":87,"line_nr":699,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn find_last[T](array []T, predicate fn (elem T) bool) ?T","name":"find_last","parent_name":"","return_type":"?T","pos":{"len":61,"line_nr":700,"pos":18187,"col":0,"last_line":711},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 join_to_string takes in a custom transform function and joins all elements into a string with","is_multi":false,"pos":{"len":95,"line_nr":713,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 the specified separator","is_multi":false,"pos":{"len":25,"line_nr":714,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn join_to_string[T](array []T, separator string, transform fn (elem T) string) string","name":"join_to_string","parent_name":"","return_type":"string","pos":{"len":90,"line_nr":716,"pos":18554,"col":0,"last_line":730},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 partition splits the original array into pair of lists,","is_multi":false,"pos":{"len":57,"line_nr":732,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 where first list contains elements for which predicate yielded true,","is_multi":false,"pos":{"len":70,"line_nr":733,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 while second list contains elements for which predicate yielded false","is_multi":false,"pos":{"len":71,"line_nr":734,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn partition[T](array []T, predicate fn (elem T) bool) ([]T, []T)","name":"partition","parent_name":"","return_type":"([]T, []T)","pos":{"len":69,"line_nr":735,"pos":19104,"col":0,"last_line":745},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 each calls the callback fn `cb`, for each element of the given array `a`","is_multi":false,"pos":{"len":74,"line_nr":747,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn each[T](a []T, cb fn (elem T))","name":"each","parent_name":"","return_type":"void","pos":{"len":37,"line_nr":748,"pos":19440,"col":0,"last_line":752},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 each_indexed calls the callback fn `cb`, for each element of the given array `a`,","is_multi":false,"pos":{"len":83,"line_nr":754,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 passing it both the index of the current element, and the element itself","is_multi":false,"pos":{"len":74,"line_nr":755,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\arrays.v","content":"fn each_indexed[T](a []T, cb fn (i int, e T))","name":"each_indexed","parent_name":"","return_type":"void","pos":{"len":49,"line_nr":756,"pos":19675,"col":0,"last_line":760},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 index_of_first returns the index of the first element of `array`, for which the predicate","is_multi":false,"pos":{"len":91,"line_nr":2,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 function returns true.","is_multi":false,"pos":{"len":24,"line_nr":3,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If predicate does not return true for any of the elements, then index_of_first will return -1.","is_multi":false,"pos":{"len":96,"line_nr":4,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.index_of_first([4,5,0,7,0,9], fn(idx int, x int) bool { return x == 0 }) == 2","is_multi":false,"pos":{"len":95,"line_nr":5,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\index_of.v","content":"fn index_of_first[T](array []T, predicate fn (idx int, elem T) bool) int","name":"index_of_first","parent_name":"","return_type":"int","pos":{"len":76,"line_nr":6,"pos":329,"col":0,"last_line":13},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 index_of_last returns the index of the last element of `array`, for which the predicate","is_multi":false,"pos":{"len":89,"line_nr":15,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 function returns true.","is_multi":false,"pos":{"len":24,"line_nr":16,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If predicate does not return true for any of the elements, then index_of_last will return -1.","is_multi":false,"pos":{"len":95,"line_nr":17,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.index_of_last([4,5,0,7,0,9], fn(idx int, x int) bool { return x == 0 }) == 4","is_multi":false,"pos":{"len":94,"line_nr":18,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\index_of.v","content":"fn index_of_last[T](array []T, predicate fn (idx int, elem T) bool) int","name":"index_of_last","parent_name":"","return_type":"int","pos":{"len":75,"line_nr":19,"pos":795,"col":0,"last_line":27},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 map_of_indexes returns a map, where each key is an unique value in `array`,","is_multi":false,"pos":{"len":77,"line_nr":2,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and each value for that key is an array, containing the indexes in `array`,","is_multi":false,"pos":{"len":77,"line_nr":3,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 where that value has been found.","is_multi":false,"pos":{"len":34,"line_nr":4,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.map_of_indexes([1,2,3,4,4,2,1,4,4,999]) == {1: [0, 6], 2: [1, 5], 3: [2], 4: [3, 4, 7, 8], 999: [9]}","is_multi":false,"pos":{"len":118,"line_nr":5,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\map_of.v","content":"fn map_of_indexes[T](array []T) map[T][]int","name":"map_of_indexes","parent_name":"","return_type":"map[T][]int","pos":{"len":47,"line_nr":6,"pos":329,"col":0,"last_line":16},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 map_of_counts returns a map, where each key is an unique value in `array`,","is_multi":false,"pos":{"len":76,"line_nr":18,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 and each value for that key is how many times that value occurs in `array`.","is_multi":false,"pos":{"len":77,"line_nr":19,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It can be useful for building histograms of discrete measurements.","is_multi":false,"pos":{"len":68,"line_nr":20,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: arrays.map_of_counts([1,2,3,4,4,2,1,4,4]) == {1: 2, 2: 2, 3: 1, 4: 4}","is_multi":false,"pos":{"len":80,"line_nr":21,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\map_of.v","content":"fn map_of_counts[T](array []T) map[T]int","name":"map_of_counts","parent_name":"","return_type":"map[T]int","pos":{"len":44,"line_nr":22,"pos":833,"col":0,"last_line":28},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 uniq filters the adjacent matching elements from the given array.","is_multi":false,"pos":{"len":67,"line_nr":2,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 All adjacent matching elements, are merged to their first occurrence,","is_multi":false,"pos":{"len":71,"line_nr":3,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 so the output will have no repeating elements.","is_multi":false,"pos":{"len":48,"line_nr":4,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: `uniq` does not detect repeats, unless they are adjacent.","is_multi":false,"pos":{"len":65,"line_nr":5,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 You may want to call a.sorted() on your array, before passing the result to arrays.uniq().","is_multi":false,"pos":{"len":92,"line_nr":6,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See also arrays.distinct, which is essentially arrays.uniq(a.sorted()) .","is_multi":false,"pos":{"len":74,"line_nr":7,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq( []int{} ) == []","is_multi":false,"pos":{"len":46,"line_nr":8,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq( [1, 1] ) == [1]","is_multi":false,"pos":{"len":46,"line_nr":9,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq( [2, 1] ) == [2, 1]","is_multi":false,"pos":{"len":49,"line_nr":10,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq( [5, 5, 1, 5, 2, 1, 1, 9] ) == [5, 1, 5, 2, 1, 9]","is_multi":false,"pos":{"len":79,"line_nr":11,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\uniq.v","content":"fn uniq[T](a []T) []T","name":"uniq","parent_name":"","return_type":"[]T","pos":{"len":25,"line_nr":12,"pos":672,"col":0,"last_line":27},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 uniq_only filters the adjacent matching elements from the given array.","is_multi":false,"pos":{"len":72,"line_nr":29,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 All adjacent matching elements, are removed.","is_multi":false,"pos":{"len":46,"line_nr":30,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The output will contain only the elements that *did not have* any adjacent matches.","is_multi":false,"pos":{"len":85,"line_nr":31,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: `uniq_only` does not detect repeats, unless they are adjacent.","is_multi":false,"pos":{"len":70,"line_nr":32,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 You may want to call a.sorted() on your array, before passing the result to arrays.uniq_only().","is_multi":false,"pos":{"len":97,"line_nr":33,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_only( []int{} ) == []","is_multi":false,"pos":{"len":51,"line_nr":34,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_only( [1, 1] ) == []","is_multi":false,"pos":{"len":50,"line_nr":35,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_only( [2, 1] ) == [2, 1]","is_multi":false,"pos":{"len":54,"line_nr":36,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_only( [1, 5, 5, 1, 5, 2, 1, 1, 9] ) == [1, 1, 5, 2, 9]","is_multi":false,"pos":{"len":84,"line_nr":37,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\uniq.v","content":"fn uniq_only[T](a []T) []T","name":"uniq_only","parent_name":"","return_type":"[]T","pos":{"len":30,"line_nr":38,"pos":1505,"col":0,"last_line":68},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 uniq_only_repeated produces the adjacent matching elements from the given array.","is_multi":false,"pos":{"len":82,"line_nr":70,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Unique elements, with no duplicates are removed.","is_multi":false,"pos":{"len":50,"line_nr":71,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Adjacent matching elements, are reduced to just 1 element per repeat group.","is_multi":false,"pos":{"len":77,"line_nr":72,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: `uniq_only_repeated` does not detect repeats, unless they are adjacent.","is_multi":false,"pos":{"len":79,"line_nr":73,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 You may want to call a.sorted() on your array, before passing the result to arrays.uniq_only_repeated().","is_multi":false,"pos":{"len":106,"line_nr":74,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_only_repeated( []int{} ) == []","is_multi":false,"pos":{"len":60,"line_nr":75,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_only_repeated( [1, 5] ) == []","is_multi":false,"pos":{"len":59,"line_nr":76,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_only_repeated( [5, 5] ) == [5]","is_multi":false,"pos":{"len":60,"line_nr":77,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_only_repeated( [5, 5, 1, 5, 2, 1, 1, 9] ) == [5, 1]","is_multi":false,"pos":{"len":81,"line_nr":78,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\uniq.v","content":"fn uniq_only_repeated[T](a []T) []T","name":"uniq_only_repeated","parent_name":"","return_type":"[]T","pos":{"len":39,"line_nr":79,"pos":2692,"col":0,"last_line":106},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 uniq_all_repeated produces all adjacent matching elements from the given array.","is_multi":false,"pos":{"len":81,"line_nr":108,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Unique elements, with no duplicates are removed.","is_multi":false,"pos":{"len":50,"line_nr":109,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The output will contain all the duplicated elements, repeated just like they were in the original.","is_multi":false,"pos":{"len":100,"line_nr":110,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note: `uniq_all_repeated` does not detect repeats, unless they are adjacent.","is_multi":false,"pos":{"len":78,"line_nr":111,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 You may want to call a.sorted() on your array, before passing the result to arrays.uniq_all_repeated().","is_multi":false,"pos":{"len":105,"line_nr":112,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_all_repeated( []int{} ) == []","is_multi":false,"pos":{"len":59,"line_nr":113,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_all_repeated( [1, 5] ) == []","is_multi":false,"pos":{"len":58,"line_nr":114,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_all_repeated( [5, 5] ) == [5,5]","is_multi":false,"pos":{"len":61,"line_nr":115,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.uniq_all_repeated( [5, 5, 1, 5, 2, 1, 1, 9] ) == [5, 5, 1, 1]","is_multi":false,"pos":{"len":86,"line_nr":116,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\uniq.v","content":"fn uniq_all_repeated[T](a []T) []T","name":"uniq_all_repeated","parent_name":"","return_type":"[]T","pos":{"len":38,"line_nr":117,"pos":3952,"col":0,"last_line":143},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 distinct returns all distinct elements from the given array a.","is_multi":false,"pos":{"len":64,"line_nr":145,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The results are guaranteed to be unique, i.e. not have duplicates.","is_multi":false,"pos":{"len":68,"line_nr":146,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See also arrays.uniq, which can be used to achieve the same goal,","is_multi":false,"pos":{"len":67,"line_nr":147,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 but needs you to first sort the array.","is_multi":false,"pos":{"len":40,"line_nr":148,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Example: assert arrays.distinct( [5, 5, 1, 5, 2, 1, 1, 9] ) == [1, 2, 5, 9]","is_multi":false,"pos":{"len":77,"line_nr":149,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\arrays\\uniq.v","content":"fn distinct[T](a []T) []T","name":"distinct","parent_name":"","return_type":"[]T","pos":{"len":29,"line_nr":150,"pos":4778,"col":0,"last_line":152},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-02-05 19:45:28"}