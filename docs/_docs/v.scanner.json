{"module_name":"v.scanner","description":"","contents":[{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":["unsafe"],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) free()","name":"free","parent_name":"Scanner","return_type":"void","pos":{"len":29,"line_nr":158,"pos":5934,"col":0,"last_line":166},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Note: this is called by v's parser","is_multi":false,"pos":{"len":36,"line_nr":174,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) set_is_inside_toplevel_statement(newstate bool)","name":"set_is_inside_toplevel_statement","parent_name":"Scanner","return_type":"void","pos":{"len":70,"line_nr":175,"pos":6461,"col":0,"last_line":177},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) set_current_tidx(cidx int)","name":"set_current_tidx","parent_name":"Scanner","return_type":"void","pos":{"len":49,"line_nr":179,"pos":6578,"col":0,"last_line":183},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) scan() token.Token","name":"scan","parent_name":"Scanner","return_type":"v.token.Token","pos":{"len":41,"line_nr":612,"pos":18081,"col":0,"last_line":627},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (s &Scanner) peek_token(n int) token.Token","name":"peek_token","parent_name":"Scanner","return_type":"v.token.Token","pos":{"len":49,"line_nr":630,"pos":18430,"col":0,"last_line":637},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 text_scan returns a single token from the text, and updates the scanner state,","is_multi":false,"pos":{"len":80,"line_nr":648,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 so that it will be ready to get the next token right after that.","is_multi":false,"pos":{"len":66,"line_nr":649,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 See also Scanner.prepare_for_new_text and new_silent_scanner()","is_multi":false,"pos":{"len":64,"line_nr":650,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) text_scan() token.Token","name":"text_scan","parent_name":"Scanner","return_type":"v.token.Token","pos":{"len":46,"line_nr":652,"pos":19004,"col":0,"last_line":1158},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ident_string returns a lexed V string, starting from the current position in the text","is_multi":false,"pos":{"len":87,"line_nr":1182,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 it supports r'strings', c'strings', interpolated 'strings' and \"strings\", and hex","is_multi":false,"pos":{"len":83,"line_nr":1183,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 escapes in them (except in the r'strings' where the content is returned verbatim)","is_multi":false,"pos":{"len":83,"line_nr":1184,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) ident_string() string","name":"ident_string","parent_name":"Scanner","return_type":"string","pos":{"len":44,"line_nr":1186,"pos":34341,"col":0,"last_line":1374},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001/ ident_char is called when a backtick \"single-char\" is parsed from the code","is_multi":false,"pos":{"len":77,"line_nr":1515,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/ it is needed because some runes (chars) are written with escape sequences","is_multi":false,"pos":{"len":76,"line_nr":1516,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/ the string it returns should be a standardized, simplified version of the character","is_multi":false,"pos":{"len":86,"line_nr":1517,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/ as it would appear in source code","is_multi":false,"pos":{"len":36,"line_nr":1518,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/ possibilities:","is_multi":false,"pos":{"len":17,"line_nr":1519,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/   single chars like `a`, `b` => 'a', 'b'","is_multi":false,"pos":{"len":43,"line_nr":1520,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/   escaped single chars like `\\\\`, `\\``, `\\n` => '\\\\', '`', '\\n'","is_multi":false,"pos":{"len":66,"line_nr":1521,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/   escaped single hex bytes like `\\x01`, `\\x61` => '\\x01', 'a'","is_multi":false,"pos":{"len":64,"line_nr":1522,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/   escaped unicode literals like `\\u2605`","is_multi":false,"pos":{"len":43,"line_nr":1523,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/   escaped unicode 32 literals like `\\U00002605`","is_multi":false,"pos":{"len":50,"line_nr":1524,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/   escaped utf8 runes in hex like `\\xe2\\x98\\x85` => (★)","is_multi":false,"pos":{"len":59,"line_nr":1525,"pos":0,"col":0,"last_line":0}},{"text":"\u0001/   escaped utf8 runes in octal like `\\342\\230\\205` => (★)","is_multi":false,"pos":{"len":61,"line_nr":1526,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) ident_char() string","name":"ident_char","parent_name":"Scanner","return_type":"string","pos":{"len":42,"line_nr":1527,"pos":45394,"col":0,"last_line":1644},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) current_pos() token.Pos","name":"current_pos","parent_name":"Scanner","return_type":"v.token.Pos","pos":{"len":46,"line_nr":1688,"pos":49864,"col":0,"last_line":1694},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) note(msg string)","name":"note","parent_name":"Scanner","return_type":"void","pos":{"len":39,"line_nr":1696,"pos":50002,"col":0,"last_line":1715},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 call this *before* calling error or warn","is_multi":false,"pos":{"len":42,"line_nr":1717,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) add_error_detail(msg string)","name":"add_error_detail","parent_name":"Scanner","return_type":"void","pos":{"len":51,"line_nr":1718,"pos":50499,"col":0,"last_line":1720},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) add_error_detail_with_pos(msg string, pos token.Pos)","name":"add_error_detail_with_pos","parent_name":"Scanner","return_type":"void","pos":{"len":75,"line_nr":1722,"pos":50580,"col":0,"last_line":1724},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) warn(msg string)","name":"warn","parent_name":"Scanner","return_type":"void","pos":{"len":39,"line_nr":1735,"pos":50920,"col":0,"last_line":1737},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) warn_with_pos(msg string, pos token.Pos)","name":"warn_with_pos","parent_name":"Scanner","return_type":"void","pos":{"len":63,"line_nr":1739,"pos":51004,"col":0,"last_line":1765},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) error(msg string)","name":"error","parent_name":"Scanner","return_type":"void","pos":{"len":40,"line_nr":1767,"pos":51608,"col":0,"last_line":1769},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) error_with_pos(msg string, pos token.Pos)","name":"error_with_pos","parent_name":"Scanner","return_type":"void","pos":{"len":64,"line_nr":1771,"pos":51694,"col":0,"last_line":1803},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 prepare_for_new_text resets the internal state of the scanner,","is_multi":false,"pos":{"len":64,"line_nr":1823,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 so that it can be reused for scanning the new text, given by `text`,","is_multi":false,"pos":{"len":70,"line_nr":1824,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 using a subsequent s.scan_text() call, to get the token corresponding to the text.","is_multi":false,"pos":{"len":84,"line_nr":1825,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn (mut s Scanner) prepare_for_new_text(text string)","name":"prepare_for_new_text","parent_name":"Scanner","return_type":"void","pos":{"len":56,"line_nr":1826,"pos":52976,"col":0,"last_line":1842},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"struct Scanner {\npub mut:\n\tfile_path                   string // '/path/to/file.v'\n\tfile_base                   string // 'file.v'\n\ttext                        string // the whole text of the file\n\tpos                         int    // current position in the file, first character is s.text[0]\n\tline_nr                     int    // current line number\n\tlast_nl_pos                 int = -1 // for calculating column\n\tis_crlf                     bool   // special check when computing columns\n\tis_inside_string            bool   // set to true in a string, *at the start* of an $var or ${expr}\n\tis_nested_string            bool   // '${'abc':-12s}'\n\tis_inter_start              bool   // for hacky string interpolation TODO simplify\n\tis_inter_end                bool\n\tis_enclosed_inter           bool\n\tis_nested_enclosed_inter    bool\n\tline_comment                string\n\tlast_lt                     int = -1 // position of latest <\n\tis_started                  bool\n\tis_print_line_on_error      bool\n\tis_print_colored_error      bool\n\tis_print_rel_paths_on_error bool\n\tquote                       u8  // which quote is used to denote current string: ' or \"\n\tinter_quote                 u8\n\tjust_closed_inter           bool // if is_enclosed_inter was set to false on the previous character: `}`\n\tnr_lines                    int  // total number of lines in the source file that were scanned\n\tis_vh                       bool // Keep newlines\n\tis_fmt                      bool // Used for v fmt.\n\tcomments_mode               CommentsMode\n\tis_inside_toplvl_statement  bool // *only* used in comments_mode: .toplevel_comments, toggled by parser\n\tall_tokens                  []token.Token // *only* used in comments_mode: .toplevel_comments, contains all tokens\n\ttidx                        int\n\teofs                        int\n\tinter_cbr_count             int\n\tpref                        &pref.Preferences\n\terror_details               []string\n\terrors                      []errors.Error\n\twarnings                    []errors.Warning\n\tnotices                     []errors.Notice\n\tvet_errors                  []vet.Error\n\tshould_abort                bool // when too many errors/warnings/notices are accumulated, should_abort becomes true, and the scanner should stop\n}","name":"Scanner","parent_name":"","return_type":"","pos":{"len":18,"line_nr":24,"pos":484,"col":0,"last_line":64},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\nHow the .toplevel_comments mode works:\n\nIn this mode, the scanner scans *everything* at once, before parsing starts,\nincluding all the comments, and stores the results in an buffer s.all_tokens.\n\nThen .scan() just returns s.all_tokens[ s.tidx++ ] *ignoring* the\ncomment tokens. In other words, by default in this mode, the parser\n*will not see any comments* inside top level statements, so it has\nno reason to complain about them.\n\nWhen the parser determines, that it is outside of a top level statement,\nit tells the scanner to backtrack s.tidx to the current p.tok index,\nthen it changes .is_inside_toplvl_statement to false , and refills its\nlookahead buffer (i.e. p.peek_tok), from the scanner.\n\nIn effect, from the parser's point of view, the next tokens, that it will\nreceive with p.next(), will be the same, as if comments are not ignored\nanymore, *between* top level statements.\n\nWhen the parser determines, that it is going again inside a top level\nstatement, it does the same, this time setting .is_inside_toplvl_statement\nto true, again refilling the lookahead buffer => calling .next() in this\nmode, will again ignore all the comment tokens, till the top level statement\nis finished.\n","is_multi":true,"pos":{"len":1197,"line_nr":66,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The different kinds of scanner modes:","is_multi":false,"pos":{"len":39,"line_nr":92,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":93,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 .skip_comments - simplest/fastest, just ignores all comments early.","is_multi":false,"pos":{"len":69,"line_nr":94,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 This mode is used by the compiler itself.","is_multi":false,"pos":{"len":43,"line_nr":95,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":96,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 .parse_comments is used by vfmt. Ideally it should handle inline /* */","is_multi":false,"pos":{"len":72,"line_nr":97,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 comments too, i.e. it returns every kind of comment as a new token.","is_multi":false,"pos":{"len":69,"line_nr":98,"pos":0,"col":0,"last_line":0}},{"text":"\u0001","is_multi":false,"pos":{"len":1,"line_nr":99,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 .toplevel_comments is used by vdoc, parses *only* top level ones","is_multi":false,"pos":{"len":66,"line_nr":100,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 that are *outside* structs/enums/fns.","is_multi":false,"pos":{"len":39,"line_nr":101,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"enum CommentsMode {\n\tskip_comments\n\tparse_comments\n\ttoplevel_comments\n}","name":"CommentsMode","parent_name":"","return_type":"","pos":{"len":21,"line_nr":102,"pos":4380,"col":0,"last_line":106},"platform":"cross","kind":"enum_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new scanner from file.","is_multi":false,"pos":{"len":24,"line_nr":108,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn new_scanner_file(file_path string, comments_mode CommentsMode, pref_ &pref.Preferences) !&Scanner","name":"new_scanner_file","parent_name":"","return_type":"Scanner","pos":{"len":104,"line_nr":109,"pos":4483,"col":0,"last_line":135},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new scanner from string.","is_multi":false,"pos":{"len":26,"line_nr":139,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn new_scanner(text string, comments_mode CommentsMode, pref_ &pref.Preferences) &Scanner","name":"new_scanner","parent_name":"","return_type":"Scanner","pos":{"len":93,"line_nr":140,"pos":5437,"col":0,"last_line":155},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 new_silent_scanner returns a new scanner instance, setup to just set internal flags and append errors","is_multi":false,"pos":{"len":103,"line_nr":1844,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 to its .errors field, *without aborting the program*. It is mainly useful for programs that want to","is_multi":false,"pos":{"len":101,"line_nr":1845,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 lex potentially invalid V source code repeatedly, and do their own error handling (checking .errors.len).","is_multi":false,"pos":{"len":107,"line_nr":1846,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\v\\scanner\\scanner.v","content":"fn new_silent_scanner() &Scanner","name":"new_silent_scanner","parent_name":"","return_type":"Scanner","pos":{"len":36,"line_nr":1847,"pos":53674,"col":0,"last_line":1853},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:43"}