{"module_name":"maps","description":"## Description:\n\n`maps` is a module that provides utility functions to make working with maps easier.","contents":[{"attributes":{},"comments":[{"text":"\u0001 filter filters map entries by the given predicate function","is_multi":false,"pos":{"len":60,"line_nr":2,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\maps\\maps.v","content":"fn filter[K, V](m map[K]V, f fn (key K, val V) bool) map[K]V","name":"filter","parent_name":"","return_type":"map[K]V","pos":{"len":64,"line_nr":3,"pos":75,"col":0,"last_line":13},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 to_array maps map entries into one-dimensional array","is_multi":false,"pos":{"len":54,"line_nr":15,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\maps\\maps.v","content":"fn to_array[K, V, I](m map[K]V, f fn (key K, val V) I) []I","name":"to_array","parent_name":"","return_type":"[]I","pos":{"len":62,"line_nr":16,"pos":287,"col":0,"last_line":24},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 flat_map maps map entries into arrays and flattens into a one-dimensional array","is_multi":false,"pos":{"len":81,"line_nr":26,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\maps\\maps.v","content":"fn flat_map[K, V, I](m map[K]V, f fn (key K, val V) []I) []I","name":"flat_map","parent_name":"","return_type":"[]I","pos":{"len":64,"line_nr":27,"pos":511,"col":0,"last_line":35},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 to_map maps map entries into new entries and constructs a new map","is_multi":false,"pos":{"len":67,"line_nr":37,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\maps\\maps.v","content":"fn to_map[K, V, X, Y](m map[K]V, f fn (key K, val V) (X, Y)) map[X]Y","name":"to_map","parent_name":"","return_type":"map[X]Y","pos":{"len":72,"line_nr":38,"pos":723,"col":0,"last_line":47},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 invert returns a new map, created by swapping key to value and vice versa for each entry.","is_multi":false,"pos":{"len":91,"line_nr":49,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\maps\\maps.v","content":"fn invert[K, V](m map[K]V) map[V]K","name":"invert","parent_name":"","return_type":"map[V]K","pos":{"len":38,"line_nr":50,"pos":978,"col":0,"last_line":58},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 from_array maps array into map with index to element per entry","is_multi":false,"pos":{"len":64,"line_nr":60,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\maps\\maps.v","content":"fn from_array[T](array []T) map[int]T","name":"from_array","parent_name":"","return_type":"map[int]T","pos":{"len":41,"line_nr":61,"pos":1154,"col":0,"last_line":69},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 merge_in_place merges all elements of `m2` into the mutable map `m1`.","is_multi":false,"pos":{"len":71,"line_nr":71,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 If a key exists in both maps, the value from `m1` will be overwritten by the","is_multi":false,"pos":{"len":78,"line_nr":72,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 value from `m2`.","is_multi":false,"pos":{"len":18,"line_nr":73,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 Note that this function modifes `m1`, while `m2` will not be.","is_multi":false,"pos":{"len":63,"line_nr":74,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\maps\\maps.v","content":"fn merge_in_place[K, V](mut m1 map[K]V, m2 map[K]V)","name":"merge_in_place","parent_name":"","return_type":"void","pos":{"len":55,"line_nr":75,"pos":1511,"col":0,"last_line":79},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 merge produces a map, that is the result of merging the first map `m1`,","is_multi":false,"pos":{"len":73,"line_nr":81,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 with the second map `m2`. If a key exists in both maps, the value from m2,","is_multi":false,"pos":{"len":76,"line_nr":82,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 will override the value from m1.","is_multi":false,"pos":{"len":34,"line_nr":83,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 The original maps `m1` and `m2`, will not be modified. The return value is a new map.","is_multi":false,"pos":{"len":87,"line_nr":84,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\maps\\maps.v","content":"fn merge[K, V](m1 map[K]V, m2 map[K]V) map[K]V","name":"merge","parent_name":"","return_type":"map[K]V","pos":{"len":50,"line_nr":85,"pos":1883,"col":0,"last_line":91},"platform":"cross","kind":"function","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:34"}