{"module_name":"x.json2","description":"> The name `json2` was chosen to avoid any unwanted potential conflicts with the > existing codegen tailored for the main `json` module which is powered by CJSON.\n\n`x.json2` is an experimental JSON parser written from scratch on V.\n\n## Usage\n#### encode[T]\n\n\n```v\nimport x.json2\nimport time\n\nstruct Person {\nmut:\nname     string\nage      ?int = 20\nbirthday time.Time\ndeathday ?time.Time\n}\n\nfn main() {\nmut person := Person{\nname: 'Bob'\nbirthday: time.now()\n}\nperson_json := json2.encode[Person](person)\n// person_json == {\"name\": \"Bob\", \"age\": 20, \"birthday\": \"2022-03-11T13:54:25.000Z\"}\n}\n```\n\n#### decode[T]\n\n```v\nimport x.json2\nimport time\n\nstruct Person {\nmut:\nname     string\nage      ?int = 20\nbirthday time.Time\ndeathday ?time.Time\n}\n\nfn main() {\nresp := '{\"name\": \"Bob\", \"age\": 20, \"birthday\": \"${time.now()}\"}'\nperson := json2.decode[Person](resp)!\n/*\nstruct Person {\nmut:\nname \"Bob\"\nage  20\nbirthday \"2022-03-11 13:54:25\"\n}\n*/\n}\n```\ndecode[T] is smart and can auto-convert the types of struct fields - this means\nexamples below will have the same result\n\n```v ignore\njson2.decode[Person]('{\"name\": \"Bob\", \"age\": 20, \"birthday\": \"2022-03-11T13:54:25.000Z\"}')!\njson2.decode[Person]('{\"name\": \"Bob\", \"age\": 20, \"birthday\": \"2022-03-11 13:54:25.000\"}')!\njson2.decode[Person]('{\"name\": \"Bob\", \"age\": \"20\", \"birthday\": 1647006865}')!\njson2.decode[Person]('{\"name\": \"Bob\", \"age\": \"20\", \"birthday\": \"1647006865\"}}')!\n```\n\n#### raw decode\n\n```v\nimport x.json2\nimport net.http\n\nfn main() {\nresp := http.get('https://reqres.in/api/products/1')!\n\n// This returns an Any type\nraw_product := json2.raw_decode(resp.body)!\n}\n```\n#### Casting `Any` type / Navigating\n```v\nimport x.json2\nimport net.http\n\nfn main() {\nresp := http.get('https://reqres.in/api/products/1')!\n\nraw_product := json2.raw_decode(resp.body)!\n\nproduct := raw_product.as_map()\ndata := product['data'] as map[string]json2.Any\n\nid := data['id'].int() // 1\nname := data['name'].str() // cerulean\nyear := data['year'].int() // 2000\n}\n```\n#### Constructing an `Any` type\n```v\nimport x.json2\n\nfn main() {\nmut me := map[string]json2.Any{}\nme['name'] = 'Bob'\nme['age'] = 18\n\nmut arr := []json2.Any{}\narr << 'rock'\narr << 'papers'\narr << json2.null\narr << 12\n\nme['interests'] = arr\n\nmut pets := map[string]json2.Any{}\npets['Sam'] = 'Maltese Shitzu'\nme['pets'] = pets\n\n// Stringify to JSON\nprintln(me.str())\n//{\n//   \"name\":\"Bob\",\n//   \"age\":18,\n//   \"interests\":[\"rock\",\"papers\",\"scissors\",null,12],\n//   \"pets\":{\"Sam\":\"Maltese\"}\n//}\n}\n```\n### Null Values\n`x.json2` has a separate `Null` type for differentiating an undefined value and a null value.\nTo verify that the field you're accessing is a `Null`, use `[typ] is json2.Null`.\n\n```v ignore\nfn (mut p Person) from_json(f json2.Any) {\nobj := f.as_map()\nif obj['age'] is json2.Null {\n// use a default value\np.age = 10\n}\n}\n```\n\n## Casting a value to an incompatible type\n`x.json2` provides methods for turning `Any` types into usable types.\nThe following list shows the possible outputs when casting a value to an incompatible type.\n\n1. Casting non-array values as array (`arr()`) will return an array with the value as the content.\n2. Casting non-map values as map (`as_map()`) will return a map with the value as the content.\n3. Casting non-string values to string (`str()`) will return the\nJSON string representation of the value.\n4. Casting non-numeric values to int/float (`int()`/`i64()`/`f32()`/`f64()`) will return zero.\n\n## Encoding using string builder instead of []u8\nTo be more performant, `json2`, in PR 20052, decided to use buffers directly instead of Writers.\nIf you want to use Writers you can follow the steps below:\n\n```v ignore\nmut sb := strings.new_builder(64)\nmut buffer := []u8{}\n\njson2.encode_value(<some value to be encoded here>, mut buffer)!\n\nsb.write(buffer)!\n\nunsafe { buffer.free() }\n```\n","contents":[{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 code returns the error code of DecodeError","is_multi":false,"pos":{"len":44,"line_nr":15,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"fn (err DecodeError) code() int","name":"code","parent_name":"DecodeError","return_type":"int","pos":{"len":35,"line_nr":16,"pos":411,"col":0,"last_line":18},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 msg returns the message of the DecodeError","is_multi":false,"pos":{"len":44,"line_nr":20,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"fn (err DecodeError) msg() string","name":"msg","parent_name":"DecodeError","return_type":"string","pos":{"len":37,"line_nr":21,"pos":508,"col":0,"last_line":23},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"struct DecodeError {\n\tline    int\n\tcolumn  int\n\tmessage string\n}","name":"DecodeError","parent_name":"","return_type":"","pos":{"len":22,"line_nr":9,"pos":295,"col":0,"last_line":13},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 code returns the error code of the InvalidTokenError","is_multi":false,"pos":{"len":54,"line_nr":31,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"fn (err InvalidTokenError) code() int","name":"code","parent_name":"InvalidTokenError","return_type":"int","pos":{"len":41,"line_nr":32,"pos":748,"col":0,"last_line":34},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 msg returns the message of the InvalidTokenError","is_multi":false,"pos":{"len":50,"line_nr":36,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"fn (err InvalidTokenError) msg() string","name":"msg","parent_name":"InvalidTokenError","return_type":"string","pos":{"len":43,"line_nr":37,"pos":857,"col":0,"last_line":41},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"struct InvalidTokenError {\n\tDecodeError\n\ttoken    Token\n\texpected TokenKind\n}","name":"InvalidTokenError","parent_name":"","return_type":"","pos":{"len":28,"line_nr":25,"pos":609,"col":0,"last_line":29},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 code returns the error code of the UnknownTokenError","is_multi":false,"pos":{"len":54,"line_nr":49,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"fn (err UnknownTokenError) code() int","name":"code","parent_name":"UnknownTokenError","return_type":"int","pos":{"len":41,"line_nr":50,"pos":1254,"col":0,"last_line":52},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 msg returns the error message of the UnknownTokenError","is_multi":false,"pos":{"len":56,"line_nr":54,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"fn (err UnknownTokenError) msg() string","name":"msg","parent_name":"UnknownTokenError","return_type":"string","pos":{"len":43,"line_nr":55,"pos":1369,"col":0,"last_line":58},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"struct UnknownTokenError {\n\tDecodeError\n\ttoken Token\n\tkind  ValueKind = .unknown\n}","name":"UnknownTokenError","parent_name":"","return_type":"","pos":{"len":28,"line_nr":43,"pos":1110,"col":0,"last_line":47},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 decode - decodes provided JSON","is_multi":false,"pos":{"len":32,"line_nr":119,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\decoder.v","content":"fn (mut p Parser) decode() !Any","name":"decode","parent_name":"Parser","return_type":"!Any","pos":{"len":35,"line_nr":120,"pos":3010,"col":0,"last_line":130},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Parser","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Encoder encodes the an `Any` type into JSON representation.","is_multi":false,"pos":{"len":61,"line_nr":7,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 It provides parameters in order to change the end result.","is_multi":false,"pos":{"len":59,"line_nr":8,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 encode_value encodes a value to the specific buffer.","is_multi":false,"pos":{"len":54,"line_nr":38,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\encoder.v","content":"fn (e &Encoder) encode_value[T](val T, mut buf []u8) !","name":"encode_value","parent_name":"Encoder","return_type":"!","pos":{"len":58,"line_nr":39,"pos":925,"col":0,"last_line":41},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\encoder.v","content":"struct Encoder {\n\tnewline              u8\n\tnewline_spaces_count int\n\tescape_unicode       bool = true\n}","name":"Encoder","parent_name":"","return_type":"","pos":{"len":18,"line_nr":9,"pos":321,"col":0,"last_line":13},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 str returns the JSON string representation of the `map[string]Any` type.","is_multi":false,"pos":{"len":74,"line_nr":433,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\encoder.v","content":"fn (f map[string]Any) str() string","name":"str","parent_name":"map[string]Any","return_type":"string","pos":{"len":38,"line_nr":434,"pos":12706,"col":0,"last_line":436},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"map[string]Any","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 str returns the JSON string representation of the `[]Any` type.","is_multi":false,"pos":{"len":65,"line_nr":438,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\encoder.v","content":"fn (f []Any) str() string","name":"str","parent_name":"[]Any","return_type":"string","pos":{"len":29,"line_nr":439,"pos":12843,"col":0,"last_line":441},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"[]Any","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 arr uses `Any` as an array.","is_multi":false,"pos":{"len":29,"line_nr":363,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) arr() []Any","name":"arr","parent_name":"Any","return_type":"[]Any","pos":{"len":26,"line_nr":364,"pos":7824,"col":0,"last_line":375},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 as_map uses `Any` as a map.","is_multi":false,"pos":{"len":29,"line_nr":377,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) as_map() map[string]Any","name":"as_map","parent_name":"Any","return_type":"map[string]Any","pos":{"len":38,"line_nr":378,"pos":8031,"col":0,"last_line":391},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 bool uses `Any` as a bool.","is_multi":false,"pos":{"len":28,"line_nr":329,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) bool() bool","name":"bool","parent_name":"Any","return_type":"bool","pos":{"len":26,"line_nr":330,"pos":7371,"col":0,"last_line":361},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f32 uses `Any` as a 32-bit float.","is_multi":false,"pos":{"len":35,"line_nr":293,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) f32() f32","name":"f32","parent_name":"Any","return_type":"f32","pos":{"len":24,"line_nr":294,"pos":6908,"col":0,"last_line":309},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 f64 uses `Any` as a 64-bit float.","is_multi":false,"pos":{"len":35,"line_nr":311,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) f64() f64","name":"f64","parent_name":"Any","return_type":"f64","pos":{"len":24,"line_nr":312,"pos":7146,"col":0,"last_line":327},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i16 - TODO","is_multi":false,"pos":{"len":12,"line_nr":221,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) i16() i16","name":"i16","parent_name":"Any","return_type":"i16","pos":{"len":24,"line_nr":222,"pos":5955,"col":0,"last_line":237},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i64 uses `Any` as a 64-bit integer.","is_multi":false,"pos":{"len":37,"line_nr":257,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) i64() i64","name":"i64","parent_name":"Any","return_type":"i64","pos":{"len":24,"line_nr":258,"pos":6425,"col":0,"last_line":273},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 i8 - TODO","is_multi":false,"pos":{"len":11,"line_nr":203,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) i8() i8","name":"i8","parent_name":"Any","return_type":"i8","pos":{"len":22,"line_nr":204,"pos":5746,"col":0,"last_line":219},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 int uses `Any` as an integer.","is_multi":false,"pos":{"len":31,"line_nr":239,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) int() int","name":"int","parent_name":"Any","return_type":"int","pos":{"len":24,"line_nr":240,"pos":6187,"col":0,"last_line":255},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 json_str returns the JSON string representation of the `Any` type.","is_multi":false,"pos":{"len":68,"line_nr":453,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\encoder.v","content":"fn (f Any) json_str() string","name":"json_str","parent_name":"Any","return_type":"string","pos":{"len":32,"line_nr":455,"pos":13238,"col":0,"last_line":457},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 prettify_json_str returns the pretty-formatted JSON string representation of the `Any` type.","is_multi":false,"pos":{"len":94,"line_nr":459,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\encoder.v","content":"fn (f Any) prettify_json_str() string","name":"prettify_json_str","parent_name":"Any","return_type":"string","pos":{"len":41,"line_nr":461,"pos":13404,"col":0,"last_line":472},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 str returns the string representation of the `Any` type. Use the `json_str` method","is_multi":false,"pos":{"len":84,"line_nr":443,"pos":0,"col":0,"last_line":0}},{"text":"\u0001 if you want to use the escaped str() version of the `Any` type.","is_multi":false,"pos":{"len":65,"line_nr":444,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\encoder.v","content":"fn (f Any) str() string","name":"str","parent_name":"Any","return_type":"string","pos":{"len":27,"line_nr":445,"pos":13057,"col":0,"last_line":451},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 to_time uses `Any` as a time.Time.","is_multi":false,"pos":{"len":36,"line_nr":393,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) to_time() !time.Time","name":"to_time","parent_name":"Any","return_type":"!time.Time","pos":{"len":35,"line_nr":394,"pos":8282,"col":0,"last_line":430},"platform":"cross","kind":"method","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 u64 uses `Any` as a 64-bit unsigned integer.","is_multi":false,"pos":{"len":46,"line_nr":275,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn (f Any) u64() u64","name":"u64","parent_name":"Any","return_type":"u64","pos":{"len":24,"line_nr":276,"pos":6672,"col":0,"last_line":291},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Any","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"typedef","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Decodes a JSON string into an `Any` type. Returns an option.","is_multi":false,"pos":{"len":62,"line_nr":7,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn raw_decode(src string) !Any","name":"raw_decode","parent_name":"","return_type":"!Any","pos":{"len":34,"line_nr":8,"pos":261,"col":0,"last_line":11},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Same with `raw_decode`, but skips the type conversion for certain types when decoding a certain value.","is_multi":false,"pos":{"len":104,"line_nr":13,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn fast_raw_decode(src string) !Any","name":"fast_raw_decode","parent_name":"","return_type":"!Any","pos":{"len":39,"line_nr":14,"pos":458,"col":0,"last_line":17},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 decode is a generic function that decodes a JSON string into the target type.","is_multi":false,"pos":{"len":79,"line_nr":19,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn decode[T](src string) !T","name":"decode","parent_name":"","return_type":"!T","pos":{"len":31,"line_nr":20,"pos":636,"col":0,"last_line":23},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 encode is a generic function that encodes a type into a JSON string.","is_multi":false,"pos":{"len":70,"line_nr":158,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn encode[T](val T) string","name":"encode","parent_name":"","return_type":"string","pos":{"len":30,"line_nr":159,"pos":4888,"col":0,"last_line":177},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 encode_pretty ...","is_multi":false,"pos":{"len":19,"line_nr":196,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn encode_pretty[T](typed_data T) string","name":"encode_pretty","parent_name":"","return_type":"string","pos":{"len":44,"line_nr":197,"pos":5567,"col":0,"last_line":201},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 map_from convert a struct to map of Any","is_multi":false,"pos":{"len":41,"line_nr":432,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\json2.v","content":"fn map_from[T](t T) map[string]Any","name":"map_from","parent_name":"","return_type":"map[string]Any","pos":{"len":38,"line_nr":433,"pos":9060,"col":0,"last_line":487},"platform":"cross","kind":"function","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[{"text":"\u0001 full_col returns the full column information which includes the length","is_multi":false,"pos":{"len":72,"line_nr":39,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\scanner.v","content":"fn (t Token) full_col() int","name":"full_col","parent_name":"Token","return_type":"int","pos":{"len":31,"line_nr":40,"pos":837,"col":0,"last_line":42},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\scanner.v","content":"struct Token {\n\tlit  []u8      // literal representation of the token\n\tkind TokenKind // the token number/enum; for quick comparisons\n\tline int       // the line in the source where the token occurred\n\tcol  int       // the column in the source where the token occurred\n}","name":"Token","parent_name":"","return_type":"","pos":{"len":16,"line_nr":32,"pos":486,"col":0,"last_line":37},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Decodable is an interface, that allows custom implementations for decoding structs from JSON encoded values","is_multi":false,"pos":{"len":109,"line_nr":22,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\types.v","content":"interface Decodable {\n\tfrom_json(f Any)\n}","name":"Decodable","parent_name":"","return_type":"","pos":{"len":45,"line_nr":23,"pos":362,"col":0,"last_line":25},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 Decodable is an interface, that allows custom implementations for encoding structs to their string based JSON representations","is_multi":false,"pos":{"len":127,"line_nr":27,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\types.v","content":"interface Encodable {\n\tjson_str() string\n}","name":"Encodable","parent_name":"","return_type":"","pos":{"len":46,"line_nr":28,"pos":538,"col":0,"last_line":30},"platform":"cross","kind":"interface_","public":true,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 `Null` struct is a simple representation of the `null` value in JSON.","is_multi":false,"pos":{"len":71,"line_nr":32,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\types.v","content":"struct Null {\n\tis_null bool = true\n}","name":"Null","parent_name":"","return_type":"","pos":{"len":15,"line_nr":33,"pos":659,"col":0,"last_line":35},"platform":"cross","kind":"struct_","public":true,"from_scope":false},{"attributes":{},"comments":[],"children":[{"attributes":{},"comments":[],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\types.v","content":"const null = Null{}","name":"","parent_name":"","return_type":"","pos":{"len":9,"line_nr":37,"pos":701,"col":0,"last_line":37},"platform":"cross","kind":"const_group","public":true,"from_scope":false}],"tags":[],"file_path":"","content":"","name":"Constants","parent_name":"","return_type":"","pos":{"len":0,"line_nr":0,"pos":0,"col":0,"last_line":0},"platform":"auto","kind":"const_group","public":false,"from_scope":false},{"attributes":{},"comments":[{"text":"\u0001 ValueKind enumerates the kinds of possible values of the Any sumtype.","is_multi":false,"pos":{"len":71,"line_nr":39,"pos":0,"col":0,"last_line":0}}],"children":[{"attributes":{},"comments":[{"text":"\u0001 str returns the string representation of the specific ValueKind","is_multi":false,"pos":{"len":65,"line_nr":48,"pos":0,"col":0,"last_line":0}}],"children":[],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\types.v","content":"fn (k ValueKind) str() string","name":"str","parent_name":"ValueKind","return_type":"string","pos":{"len":33,"line_nr":49,"pos":931,"col":0,"last_line":57},"platform":"cross","kind":"method","public":true,"from_scope":false}],"tags":[],"file_path":"D:\\Games\\Proekti\\V\\v\\vlib\\x\\json2\\types.v","content":"enum ValueKind {\n\tunknown\n\tarray\n\tobject\n\tstring_\n\tnumber\n}","name":"ValueKind","parent_name":"","return_type":"","pos":{"len":18,"line_nr":40,"pos":799,"col":0,"last_line":46},"platform":"cross","kind":"enum_","public":true,"from_scope":false}],"generator":"vdoc","time_generated":"2024-01-13 21:06:44"}